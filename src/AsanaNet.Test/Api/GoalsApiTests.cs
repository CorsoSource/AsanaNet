/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using AsanaNet.Client;
using AsanaNet.Api;
// uncomment below to import models
//using AsanaNet.Model;

namespace AsanaNet.Test.Api
{
    /// <summary>
    ///  Class for testing GoalsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GoalsApiTests : IDisposable
    {
        private GoalsApi instance;

        public GoalsApiTests()
        {
            instance = new GoalsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GoalsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' GoalsApi
            //Assert.IsType<GoalsApi>(instance);
        }

        /// <summary>
        /// Test AddFollowers
        /// </summary>
        [Fact]
        public void AddFollowersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string goalGid = null;
            //AddFollowersRequest addFollowersRequest = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //var response = instance.AddFollowers(goalGid, addFollowersRequest, optPretty, optFields);
            //Assert.IsType<GetGoal200Response>(response);
        }

        /// <summary>
        /// Test CreateGoal
        /// </summary>
        [Fact]
        public void CreateGoalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateGoalRequest createGoalRequest = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //var response = instance.CreateGoal(createGoalRequest, optPretty, optFields);
            //Assert.IsType<GetGoal200Response>(response);
        }

        /// <summary>
        /// Test CreateGoalMetric
        /// </summary>
        [Fact]
        public void CreateGoalMetricTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string goalGid = null;
            //CreateGoalMetricRequest createGoalMetricRequest = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //var response = instance.CreateGoalMetric(goalGid, createGoalMetricRequest, optPretty, optFields);
            //Assert.IsType<GetGoal200Response>(response);
        }

        /// <summary>
        /// Test DeleteGoal
        /// </summary>
        [Fact]
        public void DeleteGoalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string goalGid = null;
            //bool? optPretty = null;
            //var response = instance.DeleteGoal(goalGid, optPretty);
            //Assert.IsType<DeleteAttachment200Response>(response);
        }

        /// <summary>
        /// Test GetGoal
        /// </summary>
        [Fact]
        public void GetGoalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string goalGid = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //var response = instance.GetGoal(goalGid, optPretty, optFields);
            //Assert.IsType<GetGoal200Response>(response);
        }

        /// <summary>
        /// Test GetGoals
        /// </summary>
        [Fact]
        public void GetGoalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? optPretty = null;
            //string? portfolio = null;
            //string? project = null;
            //string? task = null;
            //bool? isWorkspaceLevel = null;
            //string? team = null;
            //string? workspace = null;
            //List<string>? timePeriods = null;
            //int? limit = null;
            //string? offset = null;
            //List<string>? optFields = null;
            //var response = instance.GetGoals(optPretty, portfolio, project, task, isWorkspaceLevel, team, workspace, timePeriods, limit, offset, optFields);
            //Assert.IsType<GetGoals200Response>(response);
        }

        /// <summary>
        /// Test GetParentGoalsForGoal
        /// </summary>
        [Fact]
        public void GetParentGoalsForGoalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string goalGid = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //var response = instance.GetParentGoalsForGoal(goalGid, optPretty, optFields);
            //Assert.IsType<GetParentGoalsForGoal200Response>(response);
        }

        /// <summary>
        /// Test RemoveFollowers
        /// </summary>
        [Fact]
        public void RemoveFollowersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string goalGid = null;
            //AddFollowersRequest addFollowersRequest = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //var response = instance.RemoveFollowers(goalGid, addFollowersRequest, optPretty, optFields);
            //Assert.IsType<GetGoal200Response>(response);
        }

        /// <summary>
        /// Test UpdateGoal
        /// </summary>
        [Fact]
        public void UpdateGoalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string goalGid = null;
            //UpdateGoalRequest updateGoalRequest = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //var response = instance.UpdateGoal(goalGid, updateGoalRequest, optPretty, optFields);
            //Assert.IsType<GetGoal200Response>(response);
        }

        /// <summary>
        /// Test UpdateGoalMetric
        /// </summary>
        [Fact]
        public void UpdateGoalMetricTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string goalGid = null;
            //UpdateGoalMetricRequest updateGoalMetricRequest = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //var response = instance.UpdateGoalMetric(goalGid, updateGoalMetricRequest, optPretty, optFields);
            //Assert.IsType<GetGoal200Response>(response);
        }
    }
}
