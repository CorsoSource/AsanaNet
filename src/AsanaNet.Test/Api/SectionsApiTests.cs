/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using AsanaNet.Client;
using AsanaNet.Api;
// uncomment below to import models
//using AsanaNet.Model;

namespace AsanaNet.Test.Api
{
    /// <summary>
    ///  Class for testing SectionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SectionsApiTests : IDisposable
    {
        private SectionsApi instance;

        public SectionsApiTests()
        {
            instance = new SectionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SectionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SectionsApi
            //Assert.IsType<SectionsApi>(instance);
        }

        /// <summary>
        /// Test AddTaskForSection
        /// </summary>
        [Fact]
        public void AddTaskForSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sectionGid = null;
            //bool? optPretty = null;
            //AddTaskForSectionRequest? addTaskForSectionRequest = null;
            //var response = instance.AddTaskForSection(sectionGid, optPretty, addTaskForSectionRequest);
            //Assert.IsType<DeleteAttachment200Response>(response);
        }

        /// <summary>
        /// Test CreateSectionForProject
        /// </summary>
        [Fact]
        public void CreateSectionForProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectGid = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //UpdateSectionRequest? updateSectionRequest = null;
            //var response = instance.CreateSectionForProject(projectGid, optPretty, optFields, updateSectionRequest);
            //Assert.IsType<GetSection200Response>(response);
        }

        /// <summary>
        /// Test DeleteSection
        /// </summary>
        [Fact]
        public void DeleteSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sectionGid = null;
            //bool? optPretty = null;
            //var response = instance.DeleteSection(sectionGid, optPretty);
            //Assert.IsType<DeleteAttachment200Response>(response);
        }

        /// <summary>
        /// Test GetSection
        /// </summary>
        [Fact]
        public void GetSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sectionGid = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //var response = instance.GetSection(sectionGid, optPretty, optFields);
            //Assert.IsType<GetSection200Response>(response);
        }

        /// <summary>
        /// Test GetSectionsForProject
        /// </summary>
        [Fact]
        public void GetSectionsForProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectGid = null;
            //bool? optPretty = null;
            //int? limit = null;
            //string? offset = null;
            //List<string>? optFields = null;
            //var response = instance.GetSectionsForProject(projectGid, optPretty, limit, offset, optFields);
            //Assert.IsType<GetSectionsForProject200Response>(response);
        }

        /// <summary>
        /// Test InsertSectionForProject
        /// </summary>
        [Fact]
        public void InsertSectionForProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectGid = null;
            //bool? optPretty = null;
            //InsertSectionForProjectRequest? insertSectionForProjectRequest = null;
            //var response = instance.InsertSectionForProject(projectGid, optPretty, insertSectionForProjectRequest);
            //Assert.IsType<DeleteAttachment200Response>(response);
        }

        /// <summary>
        /// Test UpdateSection
        /// </summary>
        [Fact]
        public void UpdateSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sectionGid = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //UpdateSectionRequest? updateSectionRequest = null;
            //var response = instance.UpdateSection(sectionGid, optPretty, optFields, updateSectionRequest);
            //Assert.IsType<GetSection200Response>(response);
        }
    }
}
