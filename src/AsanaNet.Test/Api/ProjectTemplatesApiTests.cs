/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using AsanaNet.Client;
using AsanaNet.Api;
// uncomment below to import models
//using AsanaNet.Model;

namespace AsanaNet.Test.Api
{
    /// <summary>
    ///  Class for testing ProjectTemplatesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ProjectTemplatesApiTests : IDisposable
    {
        private ProjectTemplatesApi instance;

        public ProjectTemplatesApiTests()
        {
            instance = new ProjectTemplatesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ProjectTemplatesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ProjectTemplatesApi
            //Assert.IsType<ProjectTemplatesApi>(instance);
        }

        /// <summary>
        /// Test DeleteProjectTemplate
        /// </summary>
        [Fact]
        public void DeleteProjectTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectTemplateGid = null;
            //bool? optPretty = null;
            //var response = instance.DeleteProjectTemplate(projectTemplateGid, optPretty);
            //Assert.IsType<DeleteAttachment200Response>(response);
        }

        /// <summary>
        /// Test GetProjectTemplate
        /// </summary>
        [Fact]
        public void GetProjectTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectTemplateGid = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //var response = instance.GetProjectTemplate(projectTemplateGid, optPretty, optFields);
            //Assert.IsType<GetProjectTemplate200Response>(response);
        }

        /// <summary>
        /// Test GetProjectTemplates
        /// </summary>
        [Fact]
        public void GetProjectTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? optPretty = null;
            //string? workspace = null;
            //string? team = null;
            //int? limit = null;
            //string? offset = null;
            //List<string>? optFields = null;
            //var response = instance.GetProjectTemplates(optPretty, workspace, team, limit, offset, optFields);
            //Assert.IsType<GetProjectTemplates200Response>(response);
        }

        /// <summary>
        /// Test GetProjectTemplatesForTeam
        /// </summary>
        [Fact]
        public void GetProjectTemplatesForTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamGid = null;
            //bool? optPretty = null;
            //int? limit = null;
            //string? offset = null;
            //List<string>? optFields = null;
            //var response = instance.GetProjectTemplatesForTeam(teamGid, optPretty, limit, offset, optFields);
            //Assert.IsType<GetProjectTemplates200Response>(response);
        }

        /// <summary>
        /// Test InstantiateProject
        /// </summary>
        [Fact]
        public void InstantiateProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectTemplateGid = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //InstantiateProjectRequest? instantiateProjectRequest = null;
            //var response = instance.InstantiateProject(projectTemplateGid, optPretty, optFields, instantiateProjectRequest);
            //Assert.IsType<GetJob200Response>(response);
        }
    }
}
