/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using AsanaNet.Client;
using AsanaNet.Api;
// uncomment below to import models
//using AsanaNet.Model;

namespace AsanaNet.Test.Api
{
    /// <summary>
    ///  Class for testing StoriesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class StoriesApiTests : IDisposable
    {
        private StoriesApi instance;

        public StoriesApiTests()
        {
            instance = new StoriesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of StoriesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' StoriesApi
            //Assert.IsType<StoriesApi>(instance);
        }

        /// <summary>
        /// Test CreateStoryForTask
        /// </summary>
        [Fact]
        public void CreateStoryForTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskGid = null;
            //UpdateStoryRequest updateStoryRequest = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //var response = instance.CreateStoryForTask(taskGid, updateStoryRequest, optPretty, optFields);
            //Assert.IsType<GetStory200Response>(response);
        }

        /// <summary>
        /// Test DeleteStory
        /// </summary>
        [Fact]
        public void DeleteStoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storyGid = null;
            //bool? optPretty = null;
            //var response = instance.DeleteStory(storyGid, optPretty);
            //Assert.IsType<DeleteAttachment200Response>(response);
        }

        /// <summary>
        /// Test GetStoriesForTask
        /// </summary>
        [Fact]
        public void GetStoriesForTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskGid = null;
            //bool? optPretty = null;
            //int? limit = null;
            //string? offset = null;
            //List<string>? optFields = null;
            //var response = instance.GetStoriesForTask(taskGid, optPretty, limit, offset, optFields);
            //Assert.IsType<GetStoriesForTask200Response>(response);
        }

        /// <summary>
        /// Test GetStory
        /// </summary>
        [Fact]
        public void GetStoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storyGid = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //var response = instance.GetStory(storyGid, optPretty, optFields);
            //Assert.IsType<GetStory200Response>(response);
        }

        /// <summary>
        /// Test UpdateStory
        /// </summary>
        [Fact]
        public void UpdateStoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storyGid = null;
            //UpdateStoryRequest updateStoryRequest = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //var response = instance.UpdateStory(storyGid, updateStoryRequest, optPretty, optFields);
            //Assert.IsType<GetStory200Response>(response);
        }
    }
}
