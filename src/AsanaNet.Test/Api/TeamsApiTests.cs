/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using AsanaNet.Client;
using AsanaNet.Api;
// uncomment below to import models
//using AsanaNet.Model;

namespace AsanaNet.Test.Api
{
    /// <summary>
    ///  Class for testing TeamsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TeamsApiTests : IDisposable
    {
        private TeamsApi instance;

        public TeamsApiTests()
        {
            instance = new TeamsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TeamsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TeamsApi
            //Assert.IsType<TeamsApi>(instance);
        }

        /// <summary>
        /// Test AddUserForTeam
        /// </summary>
        [Fact]
        public void AddUserForTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamGid = null;
            //AddUserForTeamRequest addUserForTeamRequest = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //var response = instance.AddUserForTeam(teamGid, addUserForTeamRequest, optPretty, optFields);
            //Assert.IsType<GetTeamMembership200Response>(response);
        }

        /// <summary>
        /// Test CreateTeam
        /// </summary>
        [Fact]
        public void CreateTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateTeamRequest createTeamRequest = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //var response = instance.CreateTeam(createTeamRequest, optPretty, optFields);
            //Assert.IsType<CreateTeam201Response>(response);
        }

        /// <summary>
        /// Test GetTeam
        /// </summary>
        [Fact]
        public void GetTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamGid = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //var response = instance.GetTeam(teamGid, optPretty, optFields);
            //Assert.IsType<CreateTeam201Response>(response);
        }

        /// <summary>
        /// Test GetTeamsForUser
        /// </summary>
        [Fact]
        public void GetTeamsForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGid = null;
            //string organization = null;
            //bool? optPretty = null;
            //int? limit = null;
            //string? offset = null;
            //List<string>? optFields = null;
            //var response = instance.GetTeamsForUser(userGid, organization, optPretty, limit, offset, optFields);
            //Assert.IsType<GetTeamsForWorkspace200Response>(response);
        }

        /// <summary>
        /// Test GetTeamsForWorkspace
        /// </summary>
        [Fact]
        public void GetTeamsForWorkspaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workspaceGid = null;
            //bool? optPretty = null;
            //int? limit = null;
            //string? offset = null;
            //List<string>? optFields = null;
            //var response = instance.GetTeamsForWorkspace(workspaceGid, optPretty, limit, offset, optFields);
            //Assert.IsType<GetTeamsForWorkspace200Response>(response);
        }

        /// <summary>
        /// Test RemoveUserForTeam
        /// </summary>
        [Fact]
        public void RemoveUserForTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamGid = null;
            //RemoveUserForTeamRequest removeUserForTeamRequest = null;
            //bool? optPretty = null;
            //var response = instance.RemoveUserForTeam(teamGid, removeUserForTeamRequest, optPretty);
            //Assert.IsType<DeleteAttachment200Response>(response);
        }

        /// <summary>
        /// Test UpdateTeam
        /// </summary>
        [Fact]
        public void UpdateTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamGid = null;
            //CreateTeamRequest createTeamRequest = null;
            //bool? optPretty = null;
            //List<string>? optFields = null;
            //var response = instance.UpdateTeam(teamGid, createTeamRequest, optPretty, optFields);
            //Assert.IsType<CreateTeam201Response>(response);
        }
    }
}
