/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// GoalMembershipCompact
    /// </summary>
    [DataContract(Name = "GoalMembershipCompact")]
    public partial class GoalMembershipCompact : IValidatableObject
    {
        /// <summary>
        /// Describes if the member is a commenter or editor in goal.
        /// </summary>
        /// <value>Describes if the member is a commenter or editor in goal.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoleEnum
        {
            /// <summary>
            /// Enum Commenter for value: commenter
            /// </summary>
            [EnumMember(Value = "commenter")]
            Commenter = 1,

            /// <summary>
            /// Enum Editor for value: editor
            /// </summary>
            [EnumMember(Value = "editor")]
            Editor = 2
        }


        /// <summary>
        /// Describes if the member is a commenter or editor in goal.
        /// </summary>
        /// <value>Describes if the member is a commenter or editor in goal.</value>
        /// <example>editor</example>
        [DataMember(Name = "role", EmitDefaultValue = false)]
        public RoleEnum? Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GoalMembershipCompact" /> class.
        /// </summary>
        /// <param name="resourceType">The base type of this resource..</param>
        /// <param name="member">member.</param>
        /// <param name="parent">parent.</param>
        /// <param name="role">Describes if the member is a commenter or editor in goal..</param>
        /// <param name="goal">goal.</param>
        public GoalMembershipCompact(string resourceType = default(string), MemberCompact member = default(MemberCompact), GoalMembershipBaseAllOfParent parent = default(GoalMembershipBaseAllOfParent), RoleEnum? role = default(RoleEnum?), GoalMembershipBaseAllOfGoal goal = default(GoalMembershipBaseAllOfGoal))
        {
            this.ResourceType = resourceType;
            this.Member = member;
            this.Parent = parent;
            this.Role = role;
            this.Goal = goal;
        }

        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name = "gid", EmitDefaultValue = false)]
        public string Gid { get; private set; }

        /// <summary>
        /// Returns false as Gid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGid()
        {
            return false;
        }
        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>membership</example>
        [DataMember(Name = "resource_type", EmitDefaultValue = false)]
        public string ResourceType { get; set; }

        /// <summary>
        /// The type of membership.
        /// </summary>
        /// <value>The type of membership.</value>
        /// <example>goal_membership</example>
        [DataMember(Name = "resource_subtype", EmitDefaultValue = false)]
        public string ResourceSubtype { get; private set; }

        /// <summary>
        /// Returns false as ResourceSubtype should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResourceSubtype()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Member
        /// </summary>
        [DataMember(Name = "member", EmitDefaultValue = false)]
        public MemberCompact Member { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = false)]
        public GoalMembershipBaseAllOfParent Parent { get; set; }

        /// <summary>
        /// Gets or Sets Goal
        /// </summary>
        [DataMember(Name = "goal", EmitDefaultValue = false)]
        public GoalMembershipBaseAllOfGoal Goal { get; set; }

        /// <summary>
        /// *Deprecated: new integrations should prefer the &#x60;role&#x60; field.* Describes if the member is comment only in goal.
        /// </summary>
        /// <value>*Deprecated: new integrations should prefer the &#x60;role&#x60; field.* Describes if the member is comment only in goal.</value>
        /// <example>false</example>
        [DataMember(Name = "is_commenter", EmitDefaultValue = true)]
        [Obsolete]
        public bool IsCommenter { get; private set; }

        /// <summary>
        /// Returns false as IsCommenter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsCommenter()
        {
            return false;
        }
        /// <summary>
        /// *Deprecated: new integrations should prefer the &#x60;role&#x60; field.* Describes if the member is editor in goal.
        /// </summary>
        /// <value>*Deprecated: new integrations should prefer the &#x60;role&#x60; field.* Describes if the member is editor in goal.</value>
        /// <example>false</example>
        [DataMember(Name = "is_editor", EmitDefaultValue = true)]
        [Obsolete]
        public bool IsEditor { get; private set; }

        /// <summary>
        /// Returns false as IsEditor should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsEditor()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GoalMembershipCompact {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  Member: ").Append(Member).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Goal: ").Append(Goal).Append("\n");
            sb.Append("  IsCommenter: ").Append(IsCommenter).Append("\n");
            sb.Append("  IsEditor: ").Append(IsEditor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
