/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// RuleTriggerRequest
    /// </summary>
    [DataContract(Name = "RuleTriggerRequest")]
    public partial class RuleTriggerRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleTriggerRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RuleTriggerRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleTriggerRequest" /> class.
        /// </summary>
        /// <param name="resource">The ID of the resource. For the duration of the beta, this resource is always a task, and this task must exist in the project in which the rule is created. (required).</param>
        /// <param name="actionData">The dynamic keys and values of the request. These fields are intended to be used in the action for the rule associated with this trigger. (required).</param>
        public RuleTriggerRequest(string resource = default(string), Dictionary<string, Object> actionData = default(Dictionary<string, Object>))
        {
            // to ensure "resource" is required (not null)
            if (resource == null)
            {
                throw new ArgumentNullException("resource is a required property for RuleTriggerRequest and cannot be null");
            }
            this.Resource = resource;
            // to ensure "actionData" is required (not null)
            if (actionData == null)
            {
                throw new ArgumentNullException("actionData is a required property for RuleTriggerRequest and cannot be null");
            }
            this.ActionData = actionData;
        }

        /// <summary>
        /// The ID of the resource. For the duration of the beta, this resource is always a task, and this task must exist in the project in which the rule is created.
        /// </summary>
        /// <value>The ID of the resource. For the duration of the beta, this resource is always a task, and this task must exist in the project in which the rule is created.</value>
        /// <example>12345</example>
        [DataMember(Name = "resource", IsRequired = true, EmitDefaultValue = true)]
        public string Resource { get; set; }

        /// <summary>
        /// The dynamic keys and values of the request. These fields are intended to be used in the action for the rule associated with this trigger.
        /// </summary>
        /// <value>The dynamic keys and values of the request. These fields are intended to be used in the action for the rule associated with this trigger.</value>
        /// <example>{&quot;jira_ticket_name&quot;:&quot;Test&quot;,&quot;jira_ticket_id&quot;:&quot;123&quot;}</example>
        [DataMember(Name = "action_data", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> ActionData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RuleTriggerRequest {\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  ActionData: ").Append(ActionData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
