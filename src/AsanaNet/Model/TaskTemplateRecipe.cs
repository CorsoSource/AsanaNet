/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// TaskTemplateRecipe
    /// </summary>
    [DataContract(Name = "TaskTemplateRecipe")]
    public partial class TaskTemplateRecipe : IValidatableObject
    {
        /// <summary>
        /// The subtype of the task that will be created from this template.
        /// </summary>
        /// <value>The subtype of the task that will be created from this template.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaskResourceSubtypeEnum
        {
            /// <summary>
            /// Enum DefaultTask for value: default_task
            /// </summary>
            [EnumMember(Value = "default_task")]
            DefaultTask = 1,

            /// <summary>
            /// Enum MilestoneTask for value: milestone_task
            /// </summary>
            [EnumMember(Value = "milestone_task")]
            MilestoneTask = 2,

            /// <summary>
            /// Enum ApprovalTask for value: approval_task
            /// </summary>
            [EnumMember(Value = "approval_task")]
            ApprovalTask = 3
        }


        /// <summary>
        /// The subtype of the task that will be created from this template.
        /// </summary>
        /// <value>The subtype of the task that will be created from this template.</value>
        /// <example>default_task</example>
        [DataMember(Name = "task_resource_subtype", EmitDefaultValue = false)]
        public TaskResourceSubtypeEnum? TaskResourceSubtype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskTemplateRecipe" /> class.
        /// </summary>
        /// <param name="name">Name of the task that will be created from this template..</param>
        /// <param name="taskResourceSubtype">The subtype of the task that will be created from this template..</param>
        /// <param name="description">Description of the task that will be created from this template..</param>
        /// <param name="htmlDescription">HTML description of the task that will be created from this template..</param>
        /// <param name="memberships">Array of projects that the task created from this template will be added to.</param>
        /// <param name="relativeStartOn">The number of days after the task has been instantiated on which that the task will start.</param>
        /// <param name="relativeDueOn">The number of days after the task has been instantiated on which that the task will be due.</param>
        /// <param name="dueTime">The time of day that the task will be due.</param>
        /// <param name="dependencies">Array of task templates that the task created from this template will depend on.</param>
        /// <param name="dependents">Array of task templates that will depend on the task created from this template.</param>
        /// <param name="followers">Array of users that will be added as followers to the task created from this template.</param>
        /// <param name="attachments">Array of attachments that will be added to the task created from this template.</param>
        /// <param name="subtasks">Array of subtasks that will be added to the task created from this template.</param>
        /// <param name="customFields">Array of custom fields that will be added to the task created from this template.</param>
        public TaskTemplateRecipe(string name = default(string), TaskResourceSubtypeEnum? taskResourceSubtype = default(TaskResourceSubtypeEnum?), string description = default(string), string htmlDescription = default(string), List<ProjectCompact> memberships = default(List<ProjectCompact>), int? relativeStartOn = default(int?), int? relativeDueOn = default(int?), string dueTime = default(string), List<TaskTemplateRecipeCompact> dependencies = default(List<TaskTemplateRecipeCompact>), List<TaskTemplateRecipeCompact> dependents = default(List<TaskTemplateRecipeCompact>), List<UserCompact> followers = default(List<UserCompact>), List<AttachmentCompact> attachments = default(List<AttachmentCompact>), List<TaskTemplateRecipeCompact> subtasks = default(List<TaskTemplateRecipeCompact>), List<CustomFieldCompact> customFields = default(List<CustomFieldCompact>))
        {
            this.Name = name;
            this.TaskResourceSubtype = taskResourceSubtype;
            this.Description = description;
            this.HtmlDescription = htmlDescription;
            this.Memberships = memberships;
            this.RelativeStartOn = relativeStartOn;
            this.RelativeDueOn = relativeDueOn;
            this.DueTime = dueTime;
            this.Dependencies = dependencies;
            this.Dependents = dependents;
            this.Followers = followers;
            this.Attachments = attachments;
            this.Subtasks = subtasks;
            this.CustomFields = customFields;
        }

        /// <summary>
        /// Name of the task that will be created from this template.
        /// </summary>
        /// <value>Name of the task that will be created from this template.</value>
        /// <example>Bug Report</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the task that will be created from this template.
        /// </summary>
        /// <value>Description of the task that will be created from this template.</value>
        /// <example>Please describe the bug you found and how to reproduce it.</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// HTML description of the task that will be created from this template.
        /// </summary>
        /// <value>HTML description of the task that will be created from this template.</value>
        /// <example>Please describe the bug you found and how to reproduce it.</example>
        [DataMember(Name = "html_description", EmitDefaultValue = false)]
        public string HtmlDescription { get; set; }

        /// <summary>
        /// Array of projects that the task created from this template will be added to
        /// </summary>
        /// <value>Array of projects that the task created from this template will be added to</value>
        [DataMember(Name = "memberships", EmitDefaultValue = false)]
        public List<ProjectCompact> Memberships { get; set; }

        /// <summary>
        /// The number of days after the task has been instantiated on which that the task will start
        /// </summary>
        /// <value>The number of days after the task has been instantiated on which that the task will start</value>
        /// <example>1</example>
        [DataMember(Name = "relative_start_on", EmitDefaultValue = true)]
        public int? RelativeStartOn { get; set; }

        /// <summary>
        /// The number of days after the task has been instantiated on which that the task will be due
        /// </summary>
        /// <value>The number of days after the task has been instantiated on which that the task will be due</value>
        /// <example>2</example>
        [DataMember(Name = "relative_due_on", EmitDefaultValue = true)]
        public int? RelativeDueOn { get; set; }

        /// <summary>
        /// The time of day that the task will be due
        /// </summary>
        /// <value>The time of day that the task will be due</value>
        /// <example>13:15:00.000Z</example>
        [DataMember(Name = "due_time", EmitDefaultValue = true)]
        public string DueTime { get; set; }

        /// <summary>
        /// Array of task templates that the task created from this template will depend on
        /// </summary>
        /// <value>Array of task templates that the task created from this template will depend on</value>
        [DataMember(Name = "dependencies", EmitDefaultValue = false)]
        public List<TaskTemplateRecipeCompact> Dependencies { get; set; }

        /// <summary>
        /// Array of task templates that will depend on the task created from this template
        /// </summary>
        /// <value>Array of task templates that will depend on the task created from this template</value>
        [DataMember(Name = "dependents", EmitDefaultValue = false)]
        public List<TaskTemplateRecipeCompact> Dependents { get; set; }

        /// <summary>
        /// Array of users that will be added as followers to the task created from this template
        /// </summary>
        /// <value>Array of users that will be added as followers to the task created from this template</value>
        [DataMember(Name = "followers", EmitDefaultValue = false)]
        public List<UserCompact> Followers { get; set; }

        /// <summary>
        /// Array of attachments that will be added to the task created from this template
        /// </summary>
        /// <value>Array of attachments that will be added to the task created from this template</value>
        [DataMember(Name = "attachments", EmitDefaultValue = false)]
        public List<AttachmentCompact> Attachments { get; set; }

        /// <summary>
        /// Array of subtasks that will be added to the task created from this template
        /// </summary>
        /// <value>Array of subtasks that will be added to the task created from this template</value>
        [DataMember(Name = "subtasks", EmitDefaultValue = false)]
        public List<TaskTemplateRecipeCompact> Subtasks { get; set; }

        /// <summary>
        /// Array of custom fields that will be added to the task created from this template
        /// </summary>
        /// <value>Array of custom fields that will be added to the task created from this template</value>
        [DataMember(Name = "custom_fields", EmitDefaultValue = false)]
        public List<CustomFieldCompact> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaskTemplateRecipe {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TaskResourceSubtype: ").Append(TaskResourceSubtype).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HtmlDescription: ").Append(HtmlDescription).Append("\n");
            sb.Append("  Memberships: ").Append(Memberships).Append("\n");
            sb.Append("  RelativeStartOn: ").Append(RelativeStartOn).Append("\n");
            sb.Append("  RelativeDueOn: ").Append(RelativeDueOn).Append("\n");
            sb.Append("  DueTime: ").Append(DueTime).Append("\n");
            sb.Append("  Dependencies: ").Append(Dependencies).Append("\n");
            sb.Append("  Dependents: ").Append(Dependents).Append("\n");
            sb.Append("  Followers: ").Append(Followers).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Subtasks: ").Append(Subtasks).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
