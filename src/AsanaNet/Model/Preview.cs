/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// A collection of rich text that will be displayed as a preview to another app.  This is read-only except for a small group of whitelisted apps.
    /// </summary>
    [DataContract(Name = "Preview")]
    public partial class Preview : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Preview" /> class.
        /// </summary>
        /// <param name="fallback">Some fallback text to display if unable to display the full preview..</param>
        /// <param name="footer">Text to display in the footer..</param>
        /// <param name="header">Text to display in the header..</param>
        /// <param name="headerLink">Where the header will link to..</param>
        /// <param name="htmlText">HTML formatted text for the body of the preview..</param>
        /// <param name="text">Text for the body of the preview..</param>
        /// <param name="title">Text to display as the title..</param>
        /// <param name="titleLink">Where to title will link to..</param>
        public Preview(string fallback = default(string), string footer = default(string), string header = default(string), string headerLink = default(string), string htmlText = default(string), string text = default(string), string title = default(string), string titleLink = default(string))
        {
            this.Fallback = fallback;
            this.Footer = footer;
            this.Header = header;
            this.HeaderLink = headerLink;
            this.HtmlText = htmlText;
            this.Text = text;
            this.Title = title;
            this.TitleLink = titleLink;
        }

        /// <summary>
        /// Some fallback text to display if unable to display the full preview.
        /// </summary>
        /// <value>Some fallback text to display if unable to display the full preview.</value>
        /// <example>Greg: Great! I like this idea.\n\nhttps//a_company.slack.com/archives/ABCDEFG/12345678</example>
        [DataMember(Name = "fallback", EmitDefaultValue = false)]
        public string Fallback { get; set; }

        /// <summary>
        /// Text to display in the footer.
        /// </summary>
        /// <value>Text to display in the footer.</value>
        /// <example>Mar 17, 2019 1:25 PM</example>
        [DataMember(Name = "footer", EmitDefaultValue = false)]
        public string Footer { get; set; }

        /// <summary>
        /// Text to display in the header.
        /// </summary>
        /// <value>Text to display in the header.</value>
        /// <example>Asana for Slack</example>
        [DataMember(Name = "header", EmitDefaultValue = false)]
        public string Header { get; set; }

        /// <summary>
        /// Where the header will link to.
        /// </summary>
        /// <value>Where the header will link to.</value>
        /// <example>https://asana.comn/apps/slack</example>
        [DataMember(Name = "header_link", EmitDefaultValue = false)]
        public string HeaderLink { get; set; }

        /// <summary>
        /// HTML formatted text for the body of the preview.
        /// </summary>
        /// <value>HTML formatted text for the body of the preview.</value>
        /// <example>&lt;body&gt;Great! I like this idea.&lt;/body&gt;</example>
        [DataMember(Name = "html_text", EmitDefaultValue = false)]
        public string HtmlText { get; set; }

        /// <summary>
        /// Text for the body of the preview.
        /// </summary>
        /// <value>Text for the body of the preview.</value>
        /// <example>Great! I like this idea.</example>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Text to display as the title.
        /// </summary>
        /// <value>Text to display as the title.</value>
        /// <example>Greg</example>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Where to title will link to.
        /// </summary>
        /// <value>Where to title will link to.</value>
        /// <example>https://asana.slack.com/archives/ABCDEFG/12345678</example>
        [DataMember(Name = "title_link", EmitDefaultValue = false)]
        public string TitleLink { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Preview {\n");
            sb.Append("  Fallback: ").Append(Fallback).Append("\n");
            sb.Append("  Footer: ").Append(Footer).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  HeaderLink: ").Append(HeaderLink).Append("\n");
            sb.Append("  HtmlText: ").Append(HtmlText).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TitleLink: ").Append(TitleLink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
