/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// PortfolioResponse
    /// </summary>
    [DataContract(Name = "PortfolioResponse")]
    public partial class PortfolioResponse : IValidatableObject
    {
        /// <summary>
        /// Color of the portfolio.
        /// </summary>
        /// <value>Color of the portfolio.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ColorEnum
        {
            /// <summary>
            /// Enum DarkPink for value: dark-pink
            /// </summary>
            [EnumMember(Value = "dark-pink")]
            DarkPink = 1,

            /// <summary>
            /// Enum DarkGreen for value: dark-green
            /// </summary>
            [EnumMember(Value = "dark-green")]
            DarkGreen = 2,

            /// <summary>
            /// Enum DarkBlue for value: dark-blue
            /// </summary>
            [EnumMember(Value = "dark-blue")]
            DarkBlue = 3,

            /// <summary>
            /// Enum DarkRed for value: dark-red
            /// </summary>
            [EnumMember(Value = "dark-red")]
            DarkRed = 4,

            /// <summary>
            /// Enum DarkTeal for value: dark-teal
            /// </summary>
            [EnumMember(Value = "dark-teal")]
            DarkTeal = 5,

            /// <summary>
            /// Enum DarkBrown for value: dark-brown
            /// </summary>
            [EnumMember(Value = "dark-brown")]
            DarkBrown = 6,

            /// <summary>
            /// Enum DarkOrange for value: dark-orange
            /// </summary>
            [EnumMember(Value = "dark-orange")]
            DarkOrange = 7,

            /// <summary>
            /// Enum DarkPurple for value: dark-purple
            /// </summary>
            [EnumMember(Value = "dark-purple")]
            DarkPurple = 8,

            /// <summary>
            /// Enum DarkWarmGray for value: dark-warm-gray
            /// </summary>
            [EnumMember(Value = "dark-warm-gray")]
            DarkWarmGray = 9,

            /// <summary>
            /// Enum LightPink for value: light-pink
            /// </summary>
            [EnumMember(Value = "light-pink")]
            LightPink = 10,

            /// <summary>
            /// Enum LightGreen for value: light-green
            /// </summary>
            [EnumMember(Value = "light-green")]
            LightGreen = 11,

            /// <summary>
            /// Enum LightBlue for value: light-blue
            /// </summary>
            [EnumMember(Value = "light-blue")]
            LightBlue = 12,

            /// <summary>
            /// Enum LightRed for value: light-red
            /// </summary>
            [EnumMember(Value = "light-red")]
            LightRed = 13,

            /// <summary>
            /// Enum LightTeal for value: light-teal
            /// </summary>
            [EnumMember(Value = "light-teal")]
            LightTeal = 14,

            /// <summary>
            /// Enum LightBrown for value: light-brown
            /// </summary>
            [EnumMember(Value = "light-brown")]
            LightBrown = 15,

            /// <summary>
            /// Enum LightOrange for value: light-orange
            /// </summary>
            [EnumMember(Value = "light-orange")]
            LightOrange = 16,

            /// <summary>
            /// Enum LightPurple for value: light-purple
            /// </summary>
            [EnumMember(Value = "light-purple")]
            LightPurple = 17,

            /// <summary>
            /// Enum LightWarmGray for value: light-warm-gray
            /// </summary>
            [EnumMember(Value = "light-warm-gray")]
            LightWarmGray = 18
        }


        /// <summary>
        /// Color of the portfolio.
        /// </summary>
        /// <value>Color of the portfolio.</value>
        /// <example>light-green</example>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public ColorEnum? Color { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioResponse" /> class.
        /// </summary>
        /// <param name="name">The name of the portfolio..</param>
        /// <param name="color">Color of the portfolio..</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="customFieldSettings">Array of custom field settings applied to the portfolio..</param>
        /// <param name="currentStatusUpdate">currentStatusUpdate.</param>
        /// <param name="dueOn">The localized day on which this portfolio is due. This takes a date with format YYYY-MM-DD..</param>
        /// <param name="customFields">Array of Custom Fields..</param>
        /// <param name="owner">owner.</param>
        /// <param name="startOn">The day on which work for this portfolio begins, or null if the portfolio has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format. *Note: &#x60;due_on&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter. Additionally, &#x60;start_on&#x60; and &#x60;due_on&#x60; cannot be the same date.*.</param>
        /// <param name="workspace">workspace.</param>
        /// <param name="varPublic">True if the portfolio is public to its workspace members..</param>
        public PortfolioResponse(string name = default(string), ColorEnum? color = default(ColorEnum?), UserCompact createdBy = default(UserCompact), List<CustomFieldSettingResponse> customFieldSettings = default(List<CustomFieldSettingResponse>), PortfolioResponseAllOfCurrentStatusUpdate currentStatusUpdate = default(PortfolioResponseAllOfCurrentStatusUpdate), DateOnly dueOn = default(DateOnly), List<CustomFieldCompact> customFields = default(List<CustomFieldCompact>), UserCompact owner = default(UserCompact), DateOnly startOn = default(DateOnly), PortfolioResponseAllOfWorkspace workspace = default(PortfolioResponseAllOfWorkspace), bool varPublic = default(bool))
        {
            this.Name = name;
            this.Color = color;
            this.CreatedBy = createdBy;
            this.CustomFieldSettings = customFieldSettings;
            this.CurrentStatusUpdate = currentStatusUpdate;
            this.DueOn = dueOn;
            this.CustomFields = customFields;
            this.Owner = owner;
            this.StartOn = startOn;
            this.Workspace = workspace;
            this.VarPublic = varPublic;
        }

        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name = "gid", EmitDefaultValue = false)]
        public string Gid { get; private set; }

        /// <summary>
        /// Returns false as Gid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGid()
        {
            return false;
        }
        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name = "resource_type", EmitDefaultValue = false)]
        public string ResourceType { get; private set; }

        /// <summary>
        /// Returns false as ResourceType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResourceType()
        {
            return false;
        }
        /// <summary>
        /// The name of the portfolio.
        /// </summary>
        /// <value>The name of the portfolio.</value>
        /// <example>Bug Portfolio</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The time at which this resource was created.
        /// </summary>
        /// <value>The time at which this resource was created.</value>
        /// <example>2012-02-22T02:06:58.147Z</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = false)]
        public UserCompact CreatedBy { get; set; }

        /// <summary>
        /// Array of custom field settings applied to the portfolio.
        /// </summary>
        /// <value>Array of custom field settings applied to the portfolio.</value>
        [DataMember(Name = "custom_field_settings", EmitDefaultValue = false)]
        public List<CustomFieldSettingResponse> CustomFieldSettings { get; set; }

        /// <summary>
        /// Gets or Sets CurrentStatusUpdate
        /// </summary>
        [DataMember(Name = "current_status_update", EmitDefaultValue = false)]
        public PortfolioResponseAllOfCurrentStatusUpdate CurrentStatusUpdate { get; set; }

        /// <summary>
        /// The localized day on which this portfolio is due. This takes a date with format YYYY-MM-DD.
        /// </summary>
        /// <value>The localized day on which this portfolio is due. This takes a date with format YYYY-MM-DD.</value>
        /// <example>Sat Sep 14 19:00:00 CDT 2019</example>
        [DataMember(Name = "due_on", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateOnly DueOn { get; set; }

        /// <summary>
        /// Array of Custom Fields.
        /// </summary>
        /// <value>Array of Custom Fields.</value>
        [DataMember(Name = "custom_fields", EmitDefaultValue = false)]
        public List<CustomFieldCompact> CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [DataMember(Name = "members", EmitDefaultValue = false)]
        public List<UserCompact> Members { get; private set; }

        /// <summary>
        /// Returns false as Members should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMembers()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner", EmitDefaultValue = false)]
        public UserCompact Owner { get; set; }

        /// <summary>
        /// The day on which work for this portfolio begins, or null if the portfolio has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format. *Note: &#x60;due_on&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter. Additionally, &#x60;start_on&#x60; and &#x60;due_on&#x60; cannot be the same date.*
        /// </summary>
        /// <value>The day on which work for this portfolio begins, or null if the portfolio has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format. *Note: &#x60;due_on&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter. Additionally, &#x60;start_on&#x60; and &#x60;due_on&#x60; cannot be the same date.*</value>
        /// <example>Fri Sep 13 19:00:00 CDT 2019</example>
        [DataMember(Name = "start_on", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateOnly StartOn { get; set; }

        /// <summary>
        /// Gets or Sets Workspace
        /// </summary>
        [DataMember(Name = "workspace", EmitDefaultValue = false)]
        public PortfolioResponseAllOfWorkspace Workspace { get; set; }

        /// <summary>
        /// A url that points directly to the object within Asana.
        /// </summary>
        /// <value>A url that points directly to the object within Asana.</value>
        /// <example>https://app.asana.com/0/resource/123456789/list</example>
        [DataMember(Name = "permalink_url", EmitDefaultValue = false)]
        public string PermalinkUrl { get; private set; }

        /// <summary>
        /// Returns false as PermalinkUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePermalinkUrl()
        {
            return false;
        }
        /// <summary>
        /// True if the portfolio is public to its workspace members.
        /// </summary>
        /// <value>True if the portfolio is public to its workspace members.</value>
        /// <example>false</example>
        [DataMember(Name = "public", EmitDefaultValue = true)]
        public bool VarPublic { get; set; }

        /// <summary>
        /// Array of project templates that are in the portfolio
        /// </summary>
        /// <value>Array of project templates that are in the portfolio</value>
        [DataMember(Name = "project_templates", EmitDefaultValue = false)]
        public List<ProjectTemplateCompact> ProjectTemplates { get; private set; }

        /// <summary>
        /// Returns false as ProjectTemplates should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProjectTemplates()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PortfolioResponse {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CustomFieldSettings: ").Append(CustomFieldSettings).Append("\n");
            sb.Append("  CurrentStatusUpdate: ").Append(CurrentStatusUpdate).Append("\n");
            sb.Append("  DueOn: ").Append(DueOn).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  StartOn: ").Append(StartOn).Append("\n");
            sb.Append("  Workspace: ").Append(Workspace).Append("\n");
            sb.Append("  PermalinkUrl: ").Append(PermalinkUrl).Append("\n");
            sb.Append("  VarPublic: ").Append(VarPublic).Append("\n");
            sb.Append("  ProjectTemplates: ").Append(ProjectTemplates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
