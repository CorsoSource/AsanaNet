/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// CustomFieldBase
    /// </summary>
    [DataContract(Name = "CustomFieldBase")]
    public partial class CustomFieldBase : IValidatableObject
    {
        /// <summary>
        /// The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>The type of the custom field. Must be one of the given values. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceSubtypeEnum
        {
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 1,

            /// <summary>
            /// Enum Enum for value: enum
            /// </summary>
            [EnumMember(Value = "enum")]
            Enum = 2,

            /// <summary>
            /// Enum MultiEnum for value: multi_enum
            /// </summary>
            [EnumMember(Value = "multi_enum")]
            MultiEnum = 3,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 4,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 5,

            /// <summary>
            /// Enum People for value: people
            /// </summary>
            [EnumMember(Value = "people")]
            People = 6
        }


        /// <summary>
        /// The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>The type of the custom field. Must be one of the given values. </value>
        /// <example>text</example>
        [DataMember(Name = "resource_subtype", EmitDefaultValue = false)]
        public ResourceSubtypeEnum? ResourceSubtype { get; set; }

        /// <summary>
        /// Returns false as ResourceSubtype should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResourceSubtype()
        {
            return false;
        }
        /// <summary>
        /// *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>*Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 1,

            /// <summary>
            /// Enum Enum for value: enum
            /// </summary>
            [EnumMember(Value = "enum")]
            Enum = 2,

            /// <summary>
            /// Enum MultiEnum for value: multi_enum
            /// </summary>
            [EnumMember(Value = "multi_enum")]
            MultiEnum = 3,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 4,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 5,

            /// <summary>
            /// Enum People for value: people
            /// </summary>
            [EnumMember(Value = "people")]
            People = 6
        }


        /// <summary>
        /// *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>*Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. </value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return false;
        }
        /// <summary>
        /// This field tells the type of the custom field.
        /// </summary>
        /// <value>This field tells the type of the custom field.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RepresentationTypeEnum
        {
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 1,

            /// <summary>
            /// Enum Enum for value: enum
            /// </summary>
            [EnumMember(Value = "enum")]
            Enum = 2,

            /// <summary>
            /// Enum MultiEnum for value: multi_enum
            /// </summary>
            [EnumMember(Value = "multi_enum")]
            MultiEnum = 3,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 4,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 5,

            /// <summary>
            /// Enum People for value: people
            /// </summary>
            [EnumMember(Value = "people")]
            People = 6,

            /// <summary>
            /// Enum Formula for value: formula
            /// </summary>
            [EnumMember(Value = "formula")]
            Formula = 7,

            /// <summary>
            /// Enum CustomId for value: custom_id
            /// </summary>
            [EnumMember(Value = "custom_id")]
            CustomId = 8
        }


        /// <summary>
        /// This field tells the type of the custom field.
        /// </summary>
        /// <value>This field tells the type of the custom field.</value>
        /// <example>number</example>
        [DataMember(Name = "representation_type", EmitDefaultValue = false)]
        public RepresentationTypeEnum? RepresentationType { get; set; }

        /// <summary>
        /// Returns false as RepresentationType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRepresentationType()
        {
            return false;
        }
        /// <summary>
        /// The format of this custom field.
        /// </summary>
        /// <value>The format of this custom field.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            /// <summary>
            /// Enum Currency for value: currency
            /// </summary>
            [EnumMember(Value = "currency")]
            Currency = 1,

            /// <summary>
            /// Enum Identifier for value: identifier
            /// </summary>
            [EnumMember(Value = "identifier")]
            Identifier = 2,

            /// <summary>
            /// Enum Percentage for value: percentage
            /// </summary>
            [EnumMember(Value = "percentage")]
            Percentage = 3,

            /// <summary>
            /// Enum Custom for value: custom
            /// </summary>
            [EnumMember(Value = "custom")]
            Custom = 4,

            /// <summary>
            /// Enum Duration for value: duration
            /// </summary>
            [EnumMember(Value = "duration")]
            Duration = 5,

            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 6
        }


        /// <summary>
        /// The format of this custom field.
        /// </summary>
        /// <value>The format of this custom field.</value>
        /// <example>custom</example>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Only relevant for custom fields with &#x60;custom&#x60; format. This depicts where to place the custom label. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;.
        /// </summary>
        /// <value>Only relevant for custom fields with &#x60;custom&#x60; format. This depicts where to place the custom label. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CustomLabelPositionEnum
        {
            /// <summary>
            /// Enum Prefix for value: prefix
            /// </summary>
            [EnumMember(Value = "prefix")]
            Prefix = 1,

            /// <summary>
            /// Enum Suffix for value: suffix
            /// </summary>
            [EnumMember(Value = "suffix")]
            Suffix = 2,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 3
        }


        /// <summary>
        /// Only relevant for custom fields with &#x60;custom&#x60; format. This depicts where to place the custom label. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;.
        /// </summary>
        /// <value>Only relevant for custom fields with &#x60;custom&#x60; format. This depicts where to place the custom label. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;.</value>
        /// <example>suffix</example>
        [DataMember(Name = "custom_label_position", EmitDefaultValue = true)]
        public CustomLabelPositionEnum? CustomLabelPosition { get; set; }
        /// <summary>
        /// *Conditional*. A unique identifier to associate this field with the template source of truth.
        /// </summary>
        /// <value>*Conditional*. A unique identifier to associate this field with the template source of truth.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AsanaCreatedFieldEnum
        {
            /// <summary>
            /// Enum AVRequirements for value: a_v_requirements
            /// </summary>
            [EnumMember(Value = "a_v_requirements")]
            AVRequirements = 1,

            /// <summary>
            /// Enum AccountName for value: account_name
            /// </summary>
            [EnumMember(Value = "account_name")]
            AccountName = 2,

            /// <summary>
            /// Enum Actionable for value: actionable
            /// </summary>
            [EnumMember(Value = "actionable")]
            Actionable = 3,

            /// <summary>
            /// Enum AlignShippingLink for value: align_shipping_link
            /// </summary>
            [EnumMember(Value = "align_shipping_link")]
            AlignShippingLink = 4,

            /// <summary>
            /// Enum AlignStatus for value: align_status
            /// </summary>
            [EnumMember(Value = "align_status")]
            AlignStatus = 5,

            /// <summary>
            /// Enum AllottedTime for value: allotted_time
            /// </summary>
            [EnumMember(Value = "allotted_time")]
            AllottedTime = 6,

            /// <summary>
            /// Enum Appointment for value: appointment
            /// </summary>
            [EnumMember(Value = "appointment")]
            Appointment = 7,

            /// <summary>
            /// Enum ApprovalStage for value: approval_stage
            /// </summary>
            [EnumMember(Value = "approval_stage")]
            ApprovalStage = 8,

            /// <summary>
            /// Enum Approved for value: approved
            /// </summary>
            [EnumMember(Value = "approved")]
            Approved = 9,

            /// <summary>
            /// Enum ArticleSeries for value: article_series
            /// </summary>
            [EnumMember(Value = "article_series")]
            ArticleSeries = 10,

            /// <summary>
            /// Enum BoardCommittee for value: board_committee
            /// </summary>
            [EnumMember(Value = "board_committee")]
            BoardCommittee = 11,

            /// <summary>
            /// Enum Browser for value: browser
            /// </summary>
            [EnumMember(Value = "browser")]
            Browser = 12,

            /// <summary>
            /// Enum CampaignAudience for value: campaign_audience
            /// </summary>
            [EnumMember(Value = "campaign_audience")]
            CampaignAudience = 13,

            /// <summary>
            /// Enum CampaignProjectStatus for value: campaign_project_status
            /// </summary>
            [EnumMember(Value = "campaign_project_status")]
            CampaignProjectStatus = 14,

            /// <summary>
            /// Enum CampaignRegions for value: campaign_regions
            /// </summary>
            [EnumMember(Value = "campaign_regions")]
            CampaignRegions = 15,

            /// <summary>
            /// Enum ChannelPrimary for value: channel_primary
            /// </summary>
            [EnumMember(Value = "channel_primary")]
            ChannelPrimary = 16,

            /// <summary>
            /// Enum ClientTopicType for value: client_topic_type
            /// </summary>
            [EnumMember(Value = "client_topic_type")]
            ClientTopicType = 17,

            /// <summary>
            /// Enum CompleteBy for value: complete_by
            /// </summary>
            [EnumMember(Value = "complete_by")]
            CompleteBy = 18,

            /// <summary>
            /// Enum Contact for value: contact
            /// </summary>
            [EnumMember(Value = "contact")]
            Contact = 19,

            /// <summary>
            /// Enum ContactEmailAddress for value: contact_email_address
            /// </summary>
            [EnumMember(Value = "contact_email_address")]
            ContactEmailAddress = 20,

            /// <summary>
            /// Enum ContentChannels for value: content_channels
            /// </summary>
            [EnumMember(Value = "content_channels")]
            ContentChannels = 21,

            /// <summary>
            /// Enum ContentChannelsNeeded for value: content_channels_needed
            /// </summary>
            [EnumMember(Value = "content_channels_needed")]
            ContentChannelsNeeded = 22,

            /// <summary>
            /// Enum ContentStage for value: content_stage
            /// </summary>
            [EnumMember(Value = "content_stage")]
            ContentStage = 23,

            /// <summary>
            /// Enum ContentType for value: content_type
            /// </summary>
            [EnumMember(Value = "content_type")]
            ContentType = 24,

            /// <summary>
            /// Enum Contract for value: contract
            /// </summary>
            [EnumMember(Value = "contract")]
            Contract = 25,

            /// <summary>
            /// Enum ContractStatus for value: contract_status
            /// </summary>
            [EnumMember(Value = "contract_status")]
            ContractStatus = 26,

            /// <summary>
            /// Enum Cost for value: cost
            /// </summary>
            [EnumMember(Value = "cost")]
            Cost = 27,

            /// <summary>
            /// Enum CreationStage for value: creation_stage
            /// </summary>
            [EnumMember(Value = "creation_stage")]
            CreationStage = 28,

            /// <summary>
            /// Enum CreativeChannel for value: creative_channel
            /// </summary>
            [EnumMember(Value = "creative_channel")]
            CreativeChannel = 29,

            /// <summary>
            /// Enum CreativeNeeded for value: creative_needed
            /// </summary>
            [EnumMember(Value = "creative_needed")]
            CreativeNeeded = 30,

            /// <summary>
            /// Enum CreativeNeeds for value: creative_needs
            /// </summary>
            [EnumMember(Value = "creative_needs")]
            CreativeNeeds = 31,

            /// <summary>
            /// Enum DataSensitivity for value: data_sensitivity
            /// </summary>
            [EnumMember(Value = "data_sensitivity")]
            DataSensitivity = 32,

            /// <summary>
            /// Enum DealSize for value: deal_size
            /// </summary>
            [EnumMember(Value = "deal_size")]
            DealSize = 33,

            /// <summary>
            /// Enum DeliveryAppt for value: delivery_appt
            /// </summary>
            [EnumMember(Value = "delivery_appt")]
            DeliveryAppt = 34,

            /// <summary>
            /// Enum DeliveryApptDate for value: delivery_appt_date
            /// </summary>
            [EnumMember(Value = "delivery_appt_date")]
            DeliveryApptDate = 35,

            /// <summary>
            /// Enum Department for value: department
            /// </summary>
            [EnumMember(Value = "department")]
            Department = 36,

            /// <summary>
            /// Enum DepartmentResponsible for value: department_responsible
            /// </summary>
            [EnumMember(Value = "department_responsible")]
            DepartmentResponsible = 37,

            /// <summary>
            /// Enum DesignRequestNeeded for value: design_request_needed
            /// </summary>
            [EnumMember(Value = "design_request_needed")]
            DesignRequestNeeded = 38,

            /// <summary>
            /// Enum DesignRequestType for value: design_request_type
            /// </summary>
            [EnumMember(Value = "design_request_type")]
            DesignRequestType = 39,

            /// <summary>
            /// Enum DiscussionCategory for value: discussion_category
            /// </summary>
            [EnumMember(Value = "discussion_category")]
            DiscussionCategory = 40,

            /// <summary>
            /// Enum DoThisTask for value: do_this_task
            /// </summary>
            [EnumMember(Value = "do_this_task")]
            DoThisTask = 41,

            /// <summary>
            /// Enum EditorialContentStatus for value: editorial_content_status
            /// </summary>
            [EnumMember(Value = "editorial_content_status")]
            EditorialContentStatus = 42,

            /// <summary>
            /// Enum EditorialContentTag for value: editorial_content_tag
            /// </summary>
            [EnumMember(Value = "editorial_content_tag")]
            EditorialContentTag = 43,

            /// <summary>
            /// Enum EditorialContentType for value: editorial_content_type
            /// </summary>
            [EnumMember(Value = "editorial_content_type")]
            EditorialContentType = 44,

            /// <summary>
            /// Enum Effort for value: effort
            /// </summary>
            [EnumMember(Value = "effort")]
            Effort = 45,

            /// <summary>
            /// Enum EffortLevel for value: effort_level
            /// </summary>
            [EnumMember(Value = "effort_level")]
            EffortLevel = 46,

            /// <summary>
            /// Enum EstCompletionDate for value: est_completion_date
            /// </summary>
            [EnumMember(Value = "est_completion_date")]
            EstCompletionDate = 47,

            /// <summary>
            /// Enum EstimatedTime for value: estimated_time
            /// </summary>
            [EnumMember(Value = "estimated_time")]
            EstimatedTime = 48,

            /// <summary>
            /// Enum EstimatedValue for value: estimated_value
            /// </summary>
            [EnumMember(Value = "estimated_value")]
            EstimatedValue = 49,

            /// <summary>
            /// Enum ExpectedCost for value: expected_cost
            /// </summary>
            [EnumMember(Value = "expected_cost")]
            ExpectedCost = 50,

            /// <summary>
            /// Enum ExternalStepsNeeded for value: external_steps_needed
            /// </summary>
            [EnumMember(Value = "external_steps_needed")]
            ExternalStepsNeeded = 51,

            /// <summary>
            /// Enum FavoriteIdea for value: favorite_idea
            /// </summary>
            [EnumMember(Value = "favorite_idea")]
            FavoriteIdea = 52,

            /// <summary>
            /// Enum FeedbackType for value: feedback_type
            /// </summary>
            [EnumMember(Value = "feedback_type")]
            FeedbackType = 53,

            /// <summary>
            /// Enum Financial for value: financial
            /// </summary>
            [EnumMember(Value = "financial")]
            Financial = 54,

            /// <summary>
            /// Enum FundingAmount for value: funding_amount
            /// </summary>
            [EnumMember(Value = "funding_amount")]
            FundingAmount = 55,

            /// <summary>
            /// Enum GrantApplicationProcess for value: grant_application_process
            /// </summary>
            [EnumMember(Value = "grant_application_process")]
            GrantApplicationProcess = 56,

            /// <summary>
            /// Enum HiringCandidateStatus for value: hiring_candidate_status
            /// </summary>
            [EnumMember(Value = "hiring_candidate_status")]
            HiringCandidateStatus = 57,

            /// <summary>
            /// Enum IdeaStatus for value: idea_status
            /// </summary>
            [EnumMember(Value = "idea_status")]
            IdeaStatus = 58,

            /// <summary>
            /// Enum IdsLink for value: ids_link
            /// </summary>
            [EnumMember(Value = "ids_link")]
            IdsLink = 59,

            /// <summary>
            /// Enum IdsPatientLink for value: ids_patient_link
            /// </summary>
            [EnumMember(Value = "ids_patient_link")]
            IdsPatientLink = 60,

            /// <summary>
            /// Enum ImplementationStage for value: implementation_stage
            /// </summary>
            [EnumMember(Value = "implementation_stage")]
            ImplementationStage = 61,

            /// <summary>
            /// Enum Insurance for value: insurance
            /// </summary>
            [EnumMember(Value = "insurance")]
            Insurance = 62,

            /// <summary>
            /// Enum InterviewArea for value: interview_area
            /// </summary>
            [EnumMember(Value = "interview_area")]
            InterviewArea = 63,

            /// <summary>
            /// Enum InterviewQuestionScore for value: interview_question_score
            /// </summary>
            [EnumMember(Value = "interview_question_score")]
            InterviewQuestionScore = 64,

            /// <summary>
            /// Enum IteroScanLink for value: itero_scan_link
            /// </summary>
            [EnumMember(Value = "itero_scan_link")]
            IteroScanLink = 65,

            /// <summary>
            /// Enum JobSAppliedTo for value: job_s_applied_to
            /// </summary>
            [EnumMember(Value = "job_s_applied_to")]
            JobSAppliedTo = 66,

            /// <summary>
            /// Enum Lab for value: lab
            /// </summary>
            [EnumMember(Value = "lab")]
            Lab = 67,

            /// <summary>
            /// Enum LaunchStatus for value: launch_status
            /// </summary>
            [EnumMember(Value = "launch_status")]
            LaunchStatus = 68,

            /// <summary>
            /// Enum LeadStatus for value: lead_status
            /// </summary>
            [EnumMember(Value = "lead_status")]
            LeadStatus = 69,

            /// <summary>
            /// Enum LocalizationLanguage for value: localization_language
            /// </summary>
            [EnumMember(Value = "localization_language")]
            LocalizationLanguage = 70,

            /// <summary>
            /// Enum LocalizationMarketTeam for value: localization_market_team
            /// </summary>
            [EnumMember(Value = "localization_market_team")]
            LocalizationMarketTeam = 71,

            /// <summary>
            /// Enum LocalizationStatus for value: localization_status
            /// </summary>
            [EnumMember(Value = "localization_status")]
            LocalizationStatus = 72,

            /// <summary>
            /// Enum MeetingMinutes for value: meeting_minutes
            /// </summary>
            [EnumMember(Value = "meeting_minutes")]
            MeetingMinutes = 73,

            /// <summary>
            /// Enum MeetingNeeded for value: meeting_needed
            /// </summary>
            [EnumMember(Value = "meeting_needed")]
            MeetingNeeded = 74,

            /// <summary>
            /// Enum Minutes for value: minutes
            /// </summary>
            [EnumMember(Value = "minutes")]
            Minutes = 75,

            /// <summary>
            /// Enum Mrr for value: mrr
            /// </summary>
            [EnumMember(Value = "mrr")]
            Mrr = 76,

            /// <summary>
            /// Enum MustLocalize for value: must_localize
            /// </summary>
            [EnumMember(Value = "must_localize")]
            MustLocalize = 77,

            /// <summary>
            /// Enum NameOfFoundation for value: name_of_foundation
            /// </summary>
            [EnumMember(Value = "name_of_foundation")]
            NameOfFoundation = 78,

            /// <summary>
            /// Enum NeedToFollowUp for value: need_to_follow_up
            /// </summary>
            [EnumMember(Value = "need_to_follow_up")]
            NeedToFollowUp = 79,

            /// <summary>
            /// Enum NextAppointment for value: next_appointment
            /// </summary>
            [EnumMember(Value = "next_appointment")]
            NextAppointment = 80,

            /// <summary>
            /// Enum NextStepsSales for value: next_steps_sales
            /// </summary>
            [EnumMember(Value = "next_steps_sales")]
            NextStepsSales = 81,

            /// <summary>
            /// Enum NumPeople for value: num_people
            /// </summary>
            [EnumMember(Value = "num_people")]
            NumPeople = 82,

            /// <summary>
            /// Enum NumberOfUserReports for value: number_of_user_reports
            /// </summary>
            [EnumMember(Value = "number_of_user_reports")]
            NumberOfUserReports = 83,

            /// <summary>
            /// Enum OfficeLocation for value: office_location
            /// </summary>
            [EnumMember(Value = "office_location")]
            OfficeLocation = 84,

            /// <summary>
            /// Enum OnboardingActivity for value: onboarding_activity
            /// </summary>
            [EnumMember(Value = "onboarding_activity")]
            OnboardingActivity = 85,

            /// <summary>
            /// Enum Owner for value: owner
            /// </summary>
            [EnumMember(Value = "owner")]
            Owner = 86,

            /// <summary>
            /// Enum ParticipantsNeeded for value: participants_needed
            /// </summary>
            [EnumMember(Value = "participants_needed")]
            ParticipantsNeeded = 87,

            /// <summary>
            /// Enum PatientDateOfBirth for value: patient_date_of_birth
            /// </summary>
            [EnumMember(Value = "patient_date_of_birth")]
            PatientDateOfBirth = 88,

            /// <summary>
            /// Enum PatientEmail for value: patient_email
            /// </summary>
            [EnumMember(Value = "patient_email")]
            PatientEmail = 89,

            /// <summary>
            /// Enum PatientPhone for value: patient_phone
            /// </summary>
            [EnumMember(Value = "patient_phone")]
            PatientPhone = 90,

            /// <summary>
            /// Enum PatientStatus for value: patient_status
            /// </summary>
            [EnumMember(Value = "patient_status")]
            PatientStatus = 91,

            /// <summary>
            /// Enum PhoneNumber for value: phone_number
            /// </summary>
            [EnumMember(Value = "phone_number")]
            PhoneNumber = 92,

            /// <summary>
            /// Enum PlanningCategory for value: planning_category
            /// </summary>
            [EnumMember(Value = "planning_category")]
            PlanningCategory = 93,

            /// <summary>
            /// Enum PointOfContact for value: point_of_contact
            /// </summary>
            [EnumMember(Value = "point_of_contact")]
            PointOfContact = 94,

            /// <summary>
            /// Enum Position for value: position
            /// </summary>
            [EnumMember(Value = "position")]
            Position = 95,

            /// <summary>
            /// Enum PostFormat for value: post_format
            /// </summary>
            [EnumMember(Value = "post_format")]
            PostFormat = 96,

            /// <summary>
            /// Enum Prescription for value: prescription
            /// </summary>
            [EnumMember(Value = "prescription")]
            Prescription = 97,

            /// <summary>
            /// Enum Priority for value: priority
            /// </summary>
            [EnumMember(Value = "priority")]
            Priority = 98,

            /// <summary>
            /// Enum PriorityLevel for value: priority_level
            /// </summary>
            [EnumMember(Value = "priority_level")]
            PriorityLevel = 99,

            /// <summary>
            /// Enum Product for value: product
            /// </summary>
            [EnumMember(Value = "product")]
            Product = 100,

            /// <summary>
            /// Enum ProductStage for value: product_stage
            /// </summary>
            [EnumMember(Value = "product_stage")]
            ProductStage = 101,

            /// <summary>
            /// Enum Progress for value: progress
            /// </summary>
            [EnumMember(Value = "progress")]
            Progress = 102,

            /// <summary>
            /// Enum ProjectSize for value: project_size
            /// </summary>
            [EnumMember(Value = "project_size")]
            ProjectSize = 103,

            /// <summary>
            /// Enum ProjectStatus for value: project_status
            /// </summary>
            [EnumMember(Value = "project_status")]
            ProjectStatus = 104,

            /// <summary>
            /// Enum ProposedBudget for value: proposed_budget
            /// </summary>
            [EnumMember(Value = "proposed_budget")]
            ProposedBudget = 105,

            /// <summary>
            /// Enum PublishStatus for value: publish_status
            /// </summary>
            [EnumMember(Value = "publish_status")]
            PublishStatus = 106,

            /// <summary>
            /// Enum ReasonForScan for value: reason_for_scan
            /// </summary>
            [EnumMember(Value = "reason_for_scan")]
            ReasonForScan = 107,

            /// <summary>
            /// Enum Referral for value: referral
            /// </summary>
            [EnumMember(Value = "referral")]
            Referral = 108,

            /// <summary>
            /// Enum RequestType for value: request_type
            /// </summary>
            [EnumMember(Value = "request_type")]
            RequestType = 109,

            /// <summary>
            /// Enum ResearchStatus for value: research_status
            /// </summary>
            [EnumMember(Value = "research_status")]
            ResearchStatus = 110,

            /// <summary>
            /// Enum ResponsibleDepartment for value: responsible_department
            /// </summary>
            [EnumMember(Value = "responsible_department")]
            ResponsibleDepartment = 111,

            /// <summary>
            /// Enum ResponsibleTeam for value: responsible_team
            /// </summary>
            [EnumMember(Value = "responsible_team")]
            ResponsibleTeam = 112,

            /// <summary>
            /// Enum RiskAssessmentStatus for value: risk_assessment_status
            /// </summary>
            [EnumMember(Value = "risk_assessment_status")]
            RiskAssessmentStatus = 113,

            /// <summary>
            /// Enum RoomName for value: room_name
            /// </summary>
            [EnumMember(Value = "room_name")]
            RoomName = 114,

            /// <summary>
            /// Enum SalesCounterpart for value: sales_counterpart
            /// </summary>
            [EnumMember(Value = "sales_counterpart")]
            SalesCounterpart = 115,

            /// <summary>
            /// Enum Sentiment for value: sentiment
            /// </summary>
            [EnumMember(Value = "sentiment")]
            Sentiment = 116,

            /// <summary>
            /// Enum ShippingLink for value: shipping_link
            /// </summary>
            [EnumMember(Value = "shipping_link")]
            ShippingLink = 117,

            /// <summary>
            /// Enum SocialChannels for value: social_channels
            /// </summary>
            [EnumMember(Value = "social_channels")]
            SocialChannels = 118,

            /// <summary>
            /// Enum Stage for value: stage
            /// </summary>
            [EnumMember(Value = "stage")]
            Stage = 119,

            /// <summary>
            /// Enum Status for value: status
            /// </summary>
            [EnumMember(Value = "status")]
            Status = 120,

            /// <summary>
            /// Enum StatusDesign for value: status_design
            /// </summary>
            [EnumMember(Value = "status_design")]
            StatusDesign = 121,

            /// <summary>
            /// Enum StatusOfInitiative for value: status_of_initiative
            /// </summary>
            [EnumMember(Value = "status_of_initiative")]
            StatusOfInitiative = 122,

            /// <summary>
            /// Enum SystemSetup for value: system_setup
            /// </summary>
            [EnumMember(Value = "system_setup")]
            SystemSetup = 123,

            /// <summary>
            /// Enum TaskProgress for value: task_progress
            /// </summary>
            [EnumMember(Value = "task_progress")]
            TaskProgress = 124,

            /// <summary>
            /// Enum Team for value: team
            /// </summary>
            [EnumMember(Value = "team")]
            Team = 125,

            /// <summary>
            /// Enum TeamMarketing for value: team_marketing
            /// </summary>
            [EnumMember(Value = "team_marketing")]
            TeamMarketing = 126,

            /// <summary>
            /// Enum TeamResponsible for value: team_responsible
            /// </summary>
            [EnumMember(Value = "team_responsible")]
            TeamResponsible = 127,

            /// <summary>
            /// Enum TimeItTakesToCompleteTasks for value: time_it_takes_to_complete_tasks
            /// </summary>
            [EnumMember(Value = "time_it_takes_to_complete_tasks")]
            TimeItTakesToCompleteTasks = 128,

            /// <summary>
            /// Enum Timeframe for value: timeframe
            /// </summary>
            [EnumMember(Value = "timeframe")]
            Timeframe = 129,

            /// <summary>
            /// Enum TreatmentType for value: treatment_type
            /// </summary>
            [EnumMember(Value = "treatment_type")]
            TreatmentType = 130,

            /// <summary>
            /// Enum TypeWorkRequestsIt for value: type_work_requests_it
            /// </summary>
            [EnumMember(Value = "type_work_requests_it")]
            TypeWorkRequestsIt = 131,

            /// <summary>
            /// Enum UseAgency for value: use_agency
            /// </summary>
            [EnumMember(Value = "use_agency")]
            UseAgency = 132,

            /// <summary>
            /// Enum UserName for value: user_name
            /// </summary>
            [EnumMember(Value = "user_name")]
            UserName = 133,

            /// <summary>
            /// Enum VendorCategory for value: vendor_category
            /// </summary>
            [EnumMember(Value = "vendor_category")]
            VendorCategory = 134,

            /// <summary>
            /// Enum VendorType for value: vendor_type
            /// </summary>
            [EnumMember(Value = "vendor_type")]
            VendorType = 135,

            /// <summary>
            /// Enum WordCount for value: word_count
            /// </summary>
            [EnumMember(Value = "word_count")]
            WordCount = 136,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 137
        }


        /// <summary>
        /// *Conditional*. A unique identifier to associate this field with the template source of truth.
        /// </summary>
        /// <value>*Conditional*. A unique identifier to associate this field with the template source of truth.</value>
        /// <example>priority</example>
        [DataMember(Name = "asana_created_field", EmitDefaultValue = true)]
        public AsanaCreatedFieldEnum? AsanaCreatedField { get; set; }

        /// <summary>
        /// Returns false as AsanaCreatedField should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAsanaCreatedField()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldBase" /> class.
        /// </summary>
        /// <param name="name">The name of the custom field..</param>
        /// <param name="enumOptions">*Conditional*. Only relevant for custom fields of type &#x60;enum&#x60;. This array specifies the possible values which an &#x60;enum&#x60; custom field can adopt. To modify the enum options, refer to [working with enum options](/reference/createenumoptionforcustomfield)..</param>
        /// <param name="idPrefix">This field is the unique custom ID string for the custom field..</param>
        /// <param name="isFormulaField">*Conditional*. This flag describes whether a custom field is a formula custom field..</param>
        /// <param name="dateValue">dateValue.</param>
        /// <param name="enumValue">enumValue.</param>
        /// <param name="multiEnumValues">*Conditional*. Only relevant for custom fields of type &#x60;multi_enum&#x60;. This object is the chosen values of a &#x60;multi_enum&#x60; custom field..</param>
        /// <param name="numberValue">*Conditional*. This number is the value of a &#x60;number&#x60; custom field..</param>
        /// <param name="textValue">*Conditional*. This string is the value of a &#x60;text&#x60; custom field..</param>
        /// <param name="description">[Opt In](/docs/inputoutput-options). The description of the custom field..</param>
        /// <param name="precision">Only relevant for custom fields of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive. For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%. The identifier format will always have a precision of 0..</param>
        /// <param name="format">The format of this custom field..</param>
        /// <param name="currencyCode">ISO 4217 currency code to format this custom field. This will be null if the &#x60;format&#x60; is not &#x60;currency&#x60;..</param>
        /// <param name="customLabel">This is the string that appears next to the custom field value. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;..</param>
        /// <param name="customLabelPosition">Only relevant for custom fields with &#x60;custom&#x60; format. This depicts where to place the custom label. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;..</param>
        /// <param name="hasNotificationsEnabled">*Conditional*. This flag describes whether a follower of a task with this field should receive inbox notifications from changes to this field..</param>
        public CustomFieldBase(string name = default(string), List<EnumOption> enumOptions = default(List<EnumOption>), string idPrefix = default(string), bool isFormulaField = default(bool), CustomFieldCompactAllOfDateValue dateValue = default(CustomFieldCompactAllOfDateValue), CustomFieldCompactAllOfEnumValue enumValue = default(CustomFieldCompactAllOfEnumValue), List<EnumOption> multiEnumValues = default(List<EnumOption>), decimal? numberValue = default(decimal?), string textValue = default(string), string description = default(string), int precision = default(int), FormatEnum? format = default(FormatEnum?), string currencyCode = default(string), string customLabel = default(string), CustomLabelPositionEnum? customLabelPosition = default(CustomLabelPositionEnum?), bool hasNotificationsEnabled = default(bool))
        {
            this.Name = name;
            this.EnumOptions = enumOptions;
            this.IdPrefix = idPrefix;
            this.IsFormulaField = isFormulaField;
            this.DateValue = dateValue;
            this.EnumValue = enumValue;
            this.MultiEnumValues = multiEnumValues;
            this.NumberValue = numberValue;
            this.TextValue = textValue;
            this.Description = description;
            this.Precision = precision;
            this.Format = format;
            this.CurrencyCode = currencyCode;
            this.CustomLabel = customLabel;
            this.CustomLabelPosition = customLabelPosition;
            this.HasNotificationsEnabled = hasNotificationsEnabled;
        }

        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name = "gid", EmitDefaultValue = false)]
        public string Gid { get; private set; }

        /// <summary>
        /// Returns false as Gid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGid()
        {
            return false;
        }
        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name = "resource_type", EmitDefaultValue = false)]
        public string ResourceType { get; private set; }

        /// <summary>
        /// Returns false as ResourceType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResourceType()
        {
            return false;
        }
        /// <summary>
        /// The name of the custom field.
        /// </summary>
        /// <value>The name of the custom field.</value>
        /// <example>Status</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// *Conditional*. Only relevant for custom fields of type &#x60;enum&#x60;. This array specifies the possible values which an &#x60;enum&#x60; custom field can adopt. To modify the enum options, refer to [working with enum options](/reference/createenumoptionforcustomfield).
        /// </summary>
        /// <value>*Conditional*. Only relevant for custom fields of type &#x60;enum&#x60;. This array specifies the possible values which an &#x60;enum&#x60; custom field can adopt. To modify the enum options, refer to [working with enum options](/reference/createenumoptionforcustomfield).</value>
        [DataMember(Name = "enum_options", EmitDefaultValue = false)]
        public List<EnumOption> EnumOptions { get; set; }

        /// <summary>
        /// *Conditional*. Determines if the custom field is enabled or not.
        /// </summary>
        /// <value>*Conditional*. Determines if the custom field is enabled or not.</value>
        /// <example>true</example>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; private set; }

        /// <summary>
        /// Returns false as Enabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEnabled()
        {
            return false;
        }
        /// <summary>
        /// This field is the unique custom ID string for the custom field.
        /// </summary>
        /// <value>This field is the unique custom ID string for the custom field.</value>
        /// <example>ID</example>
        [DataMember(Name = "id_prefix", EmitDefaultValue = true)]
        public string IdPrefix { get; set; }

        /// <summary>
        /// *Conditional*. This flag describes whether a custom field is a formula custom field.
        /// </summary>
        /// <value>*Conditional*. This flag describes whether a custom field is a formula custom field.</value>
        /// <example>false</example>
        [DataMember(Name = "is_formula_field", EmitDefaultValue = true)]
        public bool IsFormulaField { get; set; }

        /// <summary>
        /// Gets or Sets DateValue
        /// </summary>
        [DataMember(Name = "date_value", EmitDefaultValue = true)]
        public CustomFieldCompactAllOfDateValue DateValue { get; set; }

        /// <summary>
        /// Gets or Sets EnumValue
        /// </summary>
        [DataMember(Name = "enum_value", EmitDefaultValue = false)]
        public CustomFieldCompactAllOfEnumValue EnumValue { get; set; }

        /// <summary>
        /// *Conditional*. Only relevant for custom fields of type &#x60;multi_enum&#x60;. This object is the chosen values of a &#x60;multi_enum&#x60; custom field.
        /// </summary>
        /// <value>*Conditional*. Only relevant for custom fields of type &#x60;multi_enum&#x60;. This object is the chosen values of a &#x60;multi_enum&#x60; custom field.</value>
        [DataMember(Name = "multi_enum_values", EmitDefaultValue = false)]
        public List<EnumOption> MultiEnumValues { get; set; }

        /// <summary>
        /// *Conditional*. This number is the value of a &#x60;number&#x60; custom field.
        /// </summary>
        /// <value>*Conditional*. This number is the value of a &#x60;number&#x60; custom field.</value>
        /// <example>5.2</example>
        [DataMember(Name = "number_value", EmitDefaultValue = true)]
        public decimal? NumberValue { get; set; }

        /// <summary>
        /// *Conditional*. This string is the value of a &#x60;text&#x60; custom field.
        /// </summary>
        /// <value>*Conditional*. This string is the value of a &#x60;text&#x60; custom field.</value>
        /// <example>Some Value</example>
        [DataMember(Name = "text_value", EmitDefaultValue = true)]
        public string TextValue { get; set; }

        /// <summary>
        /// A string representation for the value of the custom field. Integrations that don&#39;t require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.
        /// </summary>
        /// <value>A string representation for the value of the custom field. Integrations that don&#39;t require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.</value>
        /// <example>blue</example>
        [DataMember(Name = "display_value", EmitDefaultValue = true)]
        public string DisplayValue { get; private set; }

        /// <summary>
        /// Returns false as DisplayValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDisplayValue()
        {
            return false;
        }
        /// <summary>
        /// [Opt In](/docs/inputoutput-options). The description of the custom field.
        /// </summary>
        /// <value>[Opt In](/docs/inputoutput-options). The description of the custom field.</value>
        /// <example>Development team priority</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Only relevant for custom fields of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive. For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%. The identifier format will always have a precision of 0.
        /// </summary>
        /// <value>Only relevant for custom fields of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive. For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%. The identifier format will always have a precision of 0.</value>
        /// <example>2</example>
        [DataMember(Name = "precision", EmitDefaultValue = false)]
        public int Precision { get; set; }

        /// <summary>
        /// ISO 4217 currency code to format this custom field. This will be null if the &#x60;format&#x60; is not &#x60;currency&#x60;.
        /// </summary>
        /// <value>ISO 4217 currency code to format this custom field. This will be null if the &#x60;format&#x60; is not &#x60;currency&#x60;.</value>
        /// <example>EUR</example>
        [DataMember(Name = "currency_code", EmitDefaultValue = true)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// This is the string that appears next to the custom field value. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;.
        /// </summary>
        /// <value>This is the string that appears next to the custom field value. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;.</value>
        /// <example>gold pieces</example>
        [DataMember(Name = "custom_label", EmitDefaultValue = true)]
        public string CustomLabel { get; set; }

        /// <summary>
        /// This flag describes whether this custom field is available to every container in the workspace. Before project-specific custom fields, this field was always true.
        /// </summary>
        /// <value>This flag describes whether this custom field is available to every container in the workspace. Before project-specific custom fields, this field was always true.</value>
        /// <example>true</example>
        [DataMember(Name = "is_global_to_workspace", EmitDefaultValue = true)]
        public bool IsGlobalToWorkspace { get; private set; }

        /// <summary>
        /// Returns false as IsGlobalToWorkspace should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsGlobalToWorkspace()
        {
            return false;
        }
        /// <summary>
        /// *Conditional*. This flag describes whether a follower of a task with this field should receive inbox notifications from changes to this field.
        /// </summary>
        /// <value>*Conditional*. This flag describes whether a follower of a task with this field should receive inbox notifications from changes to this field.</value>
        /// <example>true</example>
        [DataMember(Name = "has_notifications_enabled", EmitDefaultValue = true)]
        public bool HasNotificationsEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomFieldBase {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EnumOptions: ").Append(EnumOptions).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  RepresentationType: ").Append(RepresentationType).Append("\n");
            sb.Append("  IdPrefix: ").Append(IdPrefix).Append("\n");
            sb.Append("  IsFormulaField: ").Append(IsFormulaField).Append("\n");
            sb.Append("  DateValue: ").Append(DateValue).Append("\n");
            sb.Append("  EnumValue: ").Append(EnumValue).Append("\n");
            sb.Append("  MultiEnumValues: ").Append(MultiEnumValues).Append("\n");
            sb.Append("  NumberValue: ").Append(NumberValue).Append("\n");
            sb.Append("  TextValue: ").Append(TextValue).Append("\n");
            sb.Append("  DisplayValue: ").Append(DisplayValue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CustomLabel: ").Append(CustomLabel).Append("\n");
            sb.Append("  CustomLabelPosition: ").Append(CustomLabelPosition).Append("\n");
            sb.Append("  IsGlobalToWorkspace: ").Append(IsGlobalToWorkspace).Append("\n");
            sb.Append("  HasNotificationsEnabled: ").Append(HasNotificationsEnabled).Append("\n");
            sb.Append("  AsanaCreatedField: ").Append(AsanaCreatedField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
