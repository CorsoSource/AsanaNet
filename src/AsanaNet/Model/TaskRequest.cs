/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// TaskRequest
    /// </summary>
    [DataContract(Name = "TaskRequest")]
    public partial class TaskRequest : IValidatableObject
    {
        /// <summary>
        /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype &#x60;milestone&#x60; represent a single moment in time. This means tasks with this subtype cannot have a start_date.
        /// </summary>
        /// <value>The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype &#x60;milestone&#x60; represent a single moment in time. This means tasks with this subtype cannot have a start_date.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceSubtypeEnum
        {
            /// <summary>
            /// Enum DefaultTask for value: default_task
            /// </summary>
            [EnumMember(Value = "default_task")]
            DefaultTask = 1,

            /// <summary>
            /// Enum Milestone for value: milestone
            /// </summary>
            [EnumMember(Value = "milestone")]
            Milestone = 2,

            /// <summary>
            /// Enum Section for value: section
            /// </summary>
            [EnumMember(Value = "section")]
            Section = 3,

            /// <summary>
            /// Enum Approval for value: approval
            /// </summary>
            [EnumMember(Value = "approval")]
            Approval = 4
        }


        /// <summary>
        /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype &#x60;milestone&#x60; represent a single moment in time. This means tasks with this subtype cannot have a start_date.
        /// </summary>
        /// <value>The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype &#x60;milestone&#x60; represent a single moment in time. This means tasks with this subtype cannot have a start_date.</value>
        /// <example>default_task</example>
        [DataMember(Name = "resource_subtype", EmitDefaultValue = false)]
        public ResourceSubtypeEnum? ResourceSubtype { get; set; }
        /// <summary>
        /// *Conditional* Reflects the approval status of this task. This field is kept in sync with &#x60;completed&#x60;, meaning &#x60;pending&#x60; translates to false while &#x60;approved&#x60;, &#x60;rejected&#x60;, and &#x60;changes_requested&#x60; translate to true. If you set completed to true, this field will be set to &#x60;approved&#x60;.
        /// </summary>
        /// <value>*Conditional* Reflects the approval status of this task. This field is kept in sync with &#x60;completed&#x60;, meaning &#x60;pending&#x60; translates to false while &#x60;approved&#x60;, &#x60;rejected&#x60;, and &#x60;changes_requested&#x60; translate to true. If you set completed to true, this field will be set to &#x60;approved&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApprovalStatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum Approved for value: approved
            /// </summary>
            [EnumMember(Value = "approved")]
            Approved = 2,

            /// <summary>
            /// Enum Rejected for value: rejected
            /// </summary>
            [EnumMember(Value = "rejected")]
            Rejected = 3,

            /// <summary>
            /// Enum ChangesRequested for value: changes_requested
            /// </summary>
            [EnumMember(Value = "changes_requested")]
            ChangesRequested = 4
        }


        /// <summary>
        /// *Conditional* Reflects the approval status of this task. This field is kept in sync with &#x60;completed&#x60;, meaning &#x60;pending&#x60; translates to false while &#x60;approved&#x60;, &#x60;rejected&#x60;, and &#x60;changes_requested&#x60; translate to true. If you set completed to true, this field will be set to &#x60;approved&#x60;.
        /// </summary>
        /// <value>*Conditional* Reflects the approval status of this task. This field is kept in sync with &#x60;completed&#x60;, meaning &#x60;pending&#x60; translates to false while &#x60;approved&#x60;, &#x60;rejected&#x60;, and &#x60;changes_requested&#x60; translate to true. If you set completed to true, this field will be set to &#x60;approved&#x60;.</value>
        /// <example>pending</example>
        [DataMember(Name = "approval_status", EmitDefaultValue = false)]
        public ApprovalStatusEnum? ApprovalStatus { get; set; }
        /// <summary>
        /// *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \&quot;inbox\&quot; or \&quot;upcoming\&quot; inserts it at the top of the section, while the other options will insert at the bottom.
        /// </summary>
        /// <value>*Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \&quot;inbox\&quot; or \&quot;upcoming\&quot; inserts it at the top of the section, while the other options will insert at the bottom.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssigneeStatusEnum
        {
            /// <summary>
            /// Enum Today for value: today
            /// </summary>
            [EnumMember(Value = "today")]
            Today = 1,

            /// <summary>
            /// Enum Upcoming for value: upcoming
            /// </summary>
            [EnumMember(Value = "upcoming")]
            Upcoming = 2,

            /// <summary>
            /// Enum Later for value: later
            /// </summary>
            [EnumMember(Value = "later")]
            Later = 3,

            /// <summary>
            /// Enum New for value: new
            /// </summary>
            [EnumMember(Value = "new")]
            New = 4,

            /// <summary>
            /// Enum Inbox for value: inbox
            /// </summary>
            [EnumMember(Value = "inbox")]
            Inbox = 5
        }


        /// <summary>
        /// *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \&quot;inbox\&quot; or \&quot;upcoming\&quot; inserts it at the top of the section, while the other options will insert at the bottom.
        /// </summary>
        /// <value>*Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \&quot;inbox\&quot; or \&quot;upcoming\&quot; inserts it at the top of the section, while the other options will insert at the bottom.</value>
        /// <example>upcoming</example>
        [DataMember(Name = "assignee_status", EmitDefaultValue = false)]
        public AssigneeStatusEnum? AssigneeStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskRequest" /> class.
        /// </summary>
        /// <param name="name">Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer..</param>
        /// <param name="resourceSubtype">The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype &#x60;milestone&#x60; represent a single moment in time. This means tasks with this subtype cannot have a start_date..</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="approvalStatus">*Conditional* Reflects the approval status of this task. This field is kept in sync with &#x60;completed&#x60;, meaning &#x60;pending&#x60; translates to false while &#x60;approved&#x60;, &#x60;rejected&#x60;, and &#x60;changes_requested&#x60; translate to true. If you set completed to true, this field will be set to &#x60;approved&#x60;..</param>
        /// <param name="assigneeStatus">*Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \&quot;inbox\&quot; or \&quot;upcoming\&quot; inserts it at the top of the section, while the other options will insert at the bottom..</param>
        /// <param name="completed">True if the task is currently marked complete, false if not..</param>
        /// <param name="completedBy">completedBy.</param>
        /// <param name="dueAt">The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;due_on&#x60;..</param>
        /// <param name="dueOn">The localized date on which this task is due, or null if the task has no due date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;due_at&#x60;..</param>
        /// <param name="external">external.</param>
        /// <param name="htmlNotes">[Opt In](/docs/inputoutput-options). The notes of the text with formatting as HTML..</param>
        /// <param name="liked">True if the task is liked by the authorized user, false if not..</param>
        /// <param name="notes">Free-form textual information associated with the task (i.e. its description)..</param>
        /// <param name="startAt">Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;start_on&#x60;. *Note: &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_at&#x60; parameter.*.</param>
        /// <param name="startOn">The day on which work begins for the task , or null if the task has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;start_at&#x60;. *Note: &#x60;due_on&#x60; or &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter.*.</param>
        /// <param name="assignee">Gid of a user..</param>
        /// <param name="assigneeSection">The *assignee section* is a subdivision of a project that groups tasks together in the assignee&#39;s \&quot;My Tasks\&quot; list. It can either be a header above a list of tasks in a list view or a column in a board view of \&quot;My Tasks.\&quot; The &#x60;assignee_section&#x60; property will be returned in the response only if the request was sent by the user who is the assignee of the task. Note that you can only write to &#x60;assignee_section&#x60; with the gid of an existing section visible in the user&#39;s \&quot;My Tasks\&quot; list..</param>
        /// <param name="customFields">An object where each key is the GID of a custom field and its corresponding value is either an enum GID, string, number, object, or array (depending on the custom field type). See the [custom fields guide](/docs/custom-fields-guide) for details on creating and updating custom field values..</param>
        /// <param name="followers">*Create-Only* An array of strings identifying users. These can either be the string \&quot;me\&quot;, an email, or the gid of a user. In order to change followers on an existing task use &#x60;addFollowers&#x60; and &#x60;removeFollowers&#x60;..</param>
        /// <param name="parent">Gid of a task..</param>
        /// <param name="projects">*Create-Only* Array of project gids. In order to change projects on an existing task use &#x60;addProject&#x60; and &#x60;removeProject&#x60;..</param>
        /// <param name="tags">*Create-Only* Array of tag gids. In order to change tags on an existing task use &#x60;addTag&#x60; and &#x60;removeTag&#x60;..</param>
        /// <param name="workspace">Gid of a workspace..</param>
        public TaskRequest(string name = default(string), ResourceSubtypeEnum? resourceSubtype = default(ResourceSubtypeEnum?), TaskCompactAllOfCreatedBy createdBy = default(TaskCompactAllOfCreatedBy), ApprovalStatusEnum? approvalStatus = default(ApprovalStatusEnum?), AssigneeStatusEnum? assigneeStatus = default(AssigneeStatusEnum?), bool completed = default(bool), TaskBaseAllOfCompletedBy completedBy = default(TaskBaseAllOfCompletedBy), DateTime? dueAt = default(DateTime?), DateOnly dueOn = default(DateOnly), TaskBaseAllOfExternal external = default(TaskBaseAllOfExternal), string htmlNotes = default(string), bool liked = default(bool), string notes = default(string), DateTime? startAt = default(DateTime?), DateOnly startOn = default(DateOnly), string assignee = default(string), string assigneeSection = default(string), Dictionary<string, string> customFields = default(Dictionary<string, string>), List<string> followers = default(List<string>), string parent = default(string), List<string> projects = default(List<string>), List<string> tags = default(List<string>), string workspace = default(string))
        {
            this.Name = name;
            this.ResourceSubtype = resourceSubtype;
            this.CreatedBy = createdBy;
            this.ApprovalStatus = approvalStatus;
            this.AssigneeStatus = assigneeStatus;
            this.Completed = completed;
            this.CompletedBy = completedBy;
            this.DueAt = dueAt;
            this.DueOn = dueOn;
            this.External = external;
            this.HtmlNotes = htmlNotes;
            this.Liked = liked;
            this.Notes = notes;
            this.StartAt = startAt;
            this.StartOn = startOn;
            this.Assignee = assignee;
            this.AssigneeSection = assigneeSection;
            this.CustomFields = customFields;
            this.Followers = followers;
            this.Parent = parent;
            this.Projects = projects;
            this.Tags = tags;
            this.Workspace = workspace;
        }

        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name = "gid", EmitDefaultValue = false)]
        public string Gid { get; private set; }

        /// <summary>
        /// Returns false as Gid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGid()
        {
            return false;
        }
        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name = "resource_type", EmitDefaultValue = false)]
        public string ResourceType { get; private set; }

        /// <summary>
        /// Returns false as ResourceType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResourceType()
        {
            return false;
        }
        /// <summary>
        /// Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
        /// </summary>
        /// <value>Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.</value>
        /// <example>Buy catnip</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = false)]
        public TaskCompactAllOfCreatedBy CreatedBy { get; set; }

        /// <summary>
        /// True if the task is currently marked complete, false if not.
        /// </summary>
        /// <value>True if the task is currently marked complete, false if not.</value>
        /// <example>false</example>
        [DataMember(Name = "completed", EmitDefaultValue = true)]
        public bool Completed { get; set; }

        /// <summary>
        /// The time at which this task was completed, or null if the task is incomplete.
        /// </summary>
        /// <value>The time at which this task was completed, or null if the task is incomplete.</value>
        /// <example>2012-02-22T02:06:58.147Z</example>
        [DataMember(Name = "completed_at", EmitDefaultValue = true)]
        public DateTime? CompletedAt { get; private set; }

        /// <summary>
        /// Returns false as CompletedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCompletedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CompletedBy
        /// </summary>
        [DataMember(Name = "completed_by", EmitDefaultValue = false)]
        public TaskBaseAllOfCompletedBy CompletedBy { get; set; }

        /// <summary>
        /// The time at which this resource was created.
        /// </summary>
        /// <value>The time at which this resource was created.</value>
        /// <example>2012-02-22T02:06:58.147Z</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// [Opt In](/docs/inputoutput-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.
        /// </summary>
        /// <value>[Opt In](/docs/inputoutput-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.</value>
        [DataMember(Name = "dependencies", EmitDefaultValue = false)]
        public List<AsanaResource> Dependencies { get; private set; }

        /// <summary>
        /// Returns false as Dependencies should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDependencies()
        {
            return false;
        }
        /// <summary>
        /// [Opt In](/docs/inputoutput-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.
        /// </summary>
        /// <value>[Opt In](/docs/inputoutput-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.</value>
        [DataMember(Name = "dependents", EmitDefaultValue = false)]
        public List<AsanaResource> Dependents { get; private set; }

        /// <summary>
        /// Returns false as Dependents should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDependents()
        {
            return false;
        }
        /// <summary>
        /// The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;due_on&#x60;.
        /// </summary>
        /// <value>The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;due_on&#x60;.</value>
        /// <example>2019-09-15T02:06:58.147Z</example>
        [DataMember(Name = "due_at", EmitDefaultValue = true)]
        public DateTime? DueAt { get; set; }

        /// <summary>
        /// The localized date on which this task is due, or null if the task has no due date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;due_at&#x60;.
        /// </summary>
        /// <value>The localized date on which this task is due, or null if the task has no due date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;due_at&#x60;.</value>
        /// <example>Sat Sep 14 19:00:00 CDT 2019</example>
        [DataMember(Name = "due_on", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateOnly DueOn { get; set; }

        /// <summary>
        /// Gets or Sets External
        /// </summary>
        [DataMember(Name = "external", EmitDefaultValue = false)]
        public TaskBaseAllOfExternal External { get; set; }

        /// <summary>
        /// [Opt In](/docs/inputoutput-options). The notes of the text with formatting as HTML.
        /// </summary>
        /// <value>[Opt In](/docs/inputoutput-options). The notes of the text with formatting as HTML.</value>
        /// <example>&lt;body&gt;Mittens &lt;em&gt;really&lt;/em&gt; likes the stuff from Humboldt.&lt;/body&gt;</example>
        [DataMember(Name = "html_notes", EmitDefaultValue = false)]
        public string HtmlNotes { get; set; }

        /// <summary>
        /// *Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.
        /// </summary>
        /// <value>*Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.</value>
        /// <example>true</example>
        [DataMember(Name = "hearted", EmitDefaultValue = true)]
        public bool Hearted { get; private set; }

        /// <summary>
        /// Returns false as Hearted should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHearted()
        {
            return false;
        }
        /// <summary>
        /// *Deprecated - please use likes instead* Array of likes for users who have hearted this task.
        /// </summary>
        /// <value>*Deprecated - please use likes instead* Array of likes for users who have hearted this task.</value>
        [DataMember(Name = "hearts", EmitDefaultValue = false)]
        public List<Like> Hearts { get; private set; }

        /// <summary>
        /// Returns false as Hearts should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHearts()
        {
            return false;
        }
        /// <summary>
        /// [Opt In](/docs/inputoutput-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/reference/sections) without being true &#x60;section&#x60; objects. If a &#x60;task&#x60; object is rendered this way in any context it will have the property &#x60;is_rendered_as_separator&#x60; set to &#x60;true&#x60;.
        /// </summary>
        /// <value>[Opt In](/docs/inputoutput-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/reference/sections) without being true &#x60;section&#x60; objects. If a &#x60;task&#x60; object is rendered this way in any context it will have the property &#x60;is_rendered_as_separator&#x60; set to &#x60;true&#x60;.</value>
        /// <example>false</example>
        [DataMember(Name = "is_rendered_as_separator", EmitDefaultValue = true)]
        public bool IsRenderedAsSeparator { get; private set; }

        /// <summary>
        /// Returns false as IsRenderedAsSeparator should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsRenderedAsSeparator()
        {
            return false;
        }
        /// <summary>
        /// True if the task is liked by the authorized user, false if not.
        /// </summary>
        /// <value>True if the task is liked by the authorized user, false if not.</value>
        /// <example>true</example>
        [DataMember(Name = "liked", EmitDefaultValue = true)]
        public bool Liked { get; set; }

        /// <summary>
        /// Array of likes for users who have liked this task.
        /// </summary>
        /// <value>Array of likes for users who have liked this task.</value>
        [DataMember(Name = "likes", EmitDefaultValue = false)]
        public List<Like> Likes { get; private set; }

        /// <summary>
        /// Returns false as Likes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLikes()
        {
            return false;
        }
        /// <summary>
        /// *Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the &#x60;addProject&#x60; and &#x60;removeProject&#x60; endpoints. Note that over time, more types of memberships may be added to this property.
        /// </summary>
        /// <value>*Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the &#x60;addProject&#x60; and &#x60;removeProject&#x60; endpoints. Note that over time, more types of memberships may be added to this property.</value>
        [DataMember(Name = "memberships", EmitDefaultValue = false)]
        public List<TaskBaseAllOfMemberships> Memberships { get; private set; }

        /// <summary>
        /// Returns false as Memberships should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMemberships()
        {
            return false;
        }
        /// <summary>
        /// The time at which this task was last modified.  The following conditions will change &#x60;modified_at&#x60;:  - story is created on a task - story is trashed on a task - attachment is trashed on a task - task is assigned or unassigned - custom field value is changed - the task itself is trashed - Or if any of the following fields are updated:   - completed   - name   - due_date   - description   - attachments   - items   - schedule_status  The following conditions will _not_ change &#x60;modified_at&#x60;:  - moving to a new container (project, portfolio, etc) - comments being added to the task (but the stories they generate   _will_ affect &#x60;modified_at&#x60;)
        /// </summary>
        /// <value>The time at which this task was last modified.  The following conditions will change &#x60;modified_at&#x60;:  - story is created on a task - story is trashed on a task - attachment is trashed on a task - task is assigned or unassigned - custom field value is changed - the task itself is trashed - Or if any of the following fields are updated:   - completed   - name   - due_date   - description   - attachments   - items   - schedule_status  The following conditions will _not_ change &#x60;modified_at&#x60;:  - moving to a new container (project, portfolio, etc) - comments being added to the task (but the stories they generate   _will_ affect &#x60;modified_at&#x60;)</value>
        /// <example>2012-02-22T02:06:58.147Z</example>
        [DataMember(Name = "modified_at", EmitDefaultValue = false)]
        public DateTime ModifiedAt { get; private set; }

        /// <summary>
        /// Returns false as ModifiedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeModifiedAt()
        {
            return false;
        }
        /// <summary>
        /// Free-form textual information associated with the task (i.e. its description).
        /// </summary>
        /// <value>Free-form textual information associated with the task (i.e. its description).</value>
        /// <example>Mittens really likes the stuff from Humboldt.</example>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// *Deprecated - please use likes instead* The number of users who have hearted this task.
        /// </summary>
        /// <value>*Deprecated - please use likes instead* The number of users who have hearted this task.</value>
        /// <example>5</example>
        [DataMember(Name = "num_hearts", EmitDefaultValue = false)]
        public int NumHearts { get; private set; }

        /// <summary>
        /// Returns false as NumHearts should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumHearts()
        {
            return false;
        }
        /// <summary>
        /// The number of users who have liked this task.
        /// </summary>
        /// <value>The number of users who have liked this task.</value>
        /// <example>5</example>
        [DataMember(Name = "num_likes", EmitDefaultValue = false)]
        public int NumLikes { get; private set; }

        /// <summary>
        /// Returns false as NumLikes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumLikes()
        {
            return false;
        }
        /// <summary>
        /// [Opt In](/docs/inputoutput-options). The number of subtasks on this task. 
        /// </summary>
        /// <value>[Opt In](/docs/inputoutput-options). The number of subtasks on this task. </value>
        /// <example>3</example>
        [DataMember(Name = "num_subtasks", EmitDefaultValue = false)]
        public int NumSubtasks { get; private set; }

        /// <summary>
        /// Returns false as NumSubtasks should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumSubtasks()
        {
            return false;
        }
        /// <summary>
        /// Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;start_on&#x60;. *Note: &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_at&#x60; parameter.*
        /// </summary>
        /// <value>Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;start_on&#x60;. *Note: &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_at&#x60; parameter.*</value>
        /// <example>2019-09-14T02:06:58.147Z</example>
        [DataMember(Name = "start_at", EmitDefaultValue = true)]
        public DateTime? StartAt { get; set; }

        /// <summary>
        /// The day on which work begins for the task , or null if the task has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;start_at&#x60;. *Note: &#x60;due_on&#x60; or &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter.*
        /// </summary>
        /// <value>The day on which work begins for the task , or null if the task has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;start_at&#x60;. *Note: &#x60;due_on&#x60; or &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter.*</value>
        /// <example>Fri Sep 13 19:00:00 CDT 2019</example>
        [DataMember(Name = "start_on", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateOnly StartOn { get; set; }

        /// <summary>
        /// This value represents the sum of all the Time Tracking entries in the Actual Time field on a given Task. It is represented as a nullable long value.
        /// </summary>
        /// <value>This value represents the sum of all the Time Tracking entries in the Actual Time field on a given Task. It is represented as a nullable long value.</value>
        /// <example>200</example>
        [DataMember(Name = "actual_time_minutes", EmitDefaultValue = true)]
        public decimal? ActualTimeMinutes { get; private set; }

        /// <summary>
        /// Returns false as ActualTimeMinutes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActualTimeMinutes()
        {
            return false;
        }
        /// <summary>
        /// Gid of a user.
        /// </summary>
        /// <value>Gid of a user.</value>
        /// <example>12345</example>
        [DataMember(Name = "assignee", EmitDefaultValue = true)]
        public string Assignee { get; set; }

        /// <summary>
        /// The *assignee section* is a subdivision of a project that groups tasks together in the assignee&#39;s \&quot;My Tasks\&quot; list. It can either be a header above a list of tasks in a list view or a column in a board view of \&quot;My Tasks.\&quot; The &#x60;assignee_section&#x60; property will be returned in the response only if the request was sent by the user who is the assignee of the task. Note that you can only write to &#x60;assignee_section&#x60; with the gid of an existing section visible in the user&#39;s \&quot;My Tasks\&quot; list.
        /// </summary>
        /// <value>The *assignee section* is a subdivision of a project that groups tasks together in the assignee&#39;s \&quot;My Tasks\&quot; list. It can either be a header above a list of tasks in a list view or a column in a board view of \&quot;My Tasks.\&quot; The &#x60;assignee_section&#x60; property will be returned in the response only if the request was sent by the user who is the assignee of the task. Note that you can only write to &#x60;assignee_section&#x60; with the gid of an existing section visible in the user&#39;s \&quot;My Tasks\&quot; list.</value>
        /// <example>12345</example>
        [DataMember(Name = "assignee_section", EmitDefaultValue = true)]
        public string AssigneeSection { get; set; }

        /// <summary>
        /// An object where each key is the GID of a custom field and its corresponding value is either an enum GID, string, number, object, or array (depending on the custom field type). See the [custom fields guide](/docs/custom-fields-guide) for details on creating and updating custom field values.
        /// </summary>
        /// <value>An object where each key is the GID of a custom field and its corresponding value is either an enum GID, string, number, object, or array (depending on the custom field type). See the [custom fields guide](/docs/custom-fields-guide) for details on creating and updating custom field values.</value>
        /// <example>{&quot;5678904321&quot;:&quot;On Hold&quot;,&quot;4578152156&quot;:&quot;Not Started&quot;}</example>
        [DataMember(Name = "custom_fields", EmitDefaultValue = false)]
        public Dictionary<string, string> CustomFields { get; set; }

        /// <summary>
        /// *Create-Only* An array of strings identifying users. These can either be the string \&quot;me\&quot;, an email, or the gid of a user. In order to change followers on an existing task use &#x60;addFollowers&#x60; and &#x60;removeFollowers&#x60;.
        /// </summary>
        /// <value>*Create-Only* An array of strings identifying users. These can either be the string \&quot;me\&quot;, an email, or the gid of a user. In order to change followers on an existing task use &#x60;addFollowers&#x60; and &#x60;removeFollowers&#x60;.</value>
        /// <example>[&quot;12345&quot;]</example>
        [DataMember(Name = "followers", EmitDefaultValue = false)]
        public List<string> Followers { get; set; }

        /// <summary>
        /// Gid of a task.
        /// </summary>
        /// <value>Gid of a task.</value>
        /// <example>12345</example>
        [DataMember(Name = "parent", EmitDefaultValue = true)]
        public string Parent { get; set; }

        /// <summary>
        /// *Create-Only* Array of project gids. In order to change projects on an existing task use &#x60;addProject&#x60; and &#x60;removeProject&#x60;.
        /// </summary>
        /// <value>*Create-Only* Array of project gids. In order to change projects on an existing task use &#x60;addProject&#x60; and &#x60;removeProject&#x60;.</value>
        /// <example>[&quot;12345&quot;]</example>
        [DataMember(Name = "projects", EmitDefaultValue = false)]
        public List<string> Projects { get; set; }

        /// <summary>
        /// *Create-Only* Array of tag gids. In order to change tags on an existing task use &#x60;addTag&#x60; and &#x60;removeTag&#x60;.
        /// </summary>
        /// <value>*Create-Only* Array of tag gids. In order to change tags on an existing task use &#x60;addTag&#x60; and &#x60;removeTag&#x60;.</value>
        /// <example>[&quot;12345&quot;]</example>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gid of a workspace.
        /// </summary>
        /// <value>Gid of a workspace.</value>
        /// <example>12345</example>
        [DataMember(Name = "workspace", EmitDefaultValue = false)]
        public string Workspace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaskRequest {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  ApprovalStatus: ").Append(ApprovalStatus).Append("\n");
            sb.Append("  AssigneeStatus: ").Append(AssigneeStatus).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  CompletedBy: ").Append(CompletedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Dependencies: ").Append(Dependencies).Append("\n");
            sb.Append("  Dependents: ").Append(Dependents).Append("\n");
            sb.Append("  DueAt: ").Append(DueAt).Append("\n");
            sb.Append("  DueOn: ").Append(DueOn).Append("\n");
            sb.Append("  External: ").Append(External).Append("\n");
            sb.Append("  HtmlNotes: ").Append(HtmlNotes).Append("\n");
            sb.Append("  Hearted: ").Append(Hearted).Append("\n");
            sb.Append("  Hearts: ").Append(Hearts).Append("\n");
            sb.Append("  IsRenderedAsSeparator: ").Append(IsRenderedAsSeparator).Append("\n");
            sb.Append("  Liked: ").Append(Liked).Append("\n");
            sb.Append("  Likes: ").Append(Likes).Append("\n");
            sb.Append("  Memberships: ").Append(Memberships).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  NumHearts: ").Append(NumHearts).Append("\n");
            sb.Append("  NumLikes: ").Append(NumLikes).Append("\n");
            sb.Append("  NumSubtasks: ").Append(NumSubtasks).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("  StartOn: ").Append(StartOn).Append("\n");
            sb.Append("  ActualTimeMinutes: ").Append(ActualTimeMinutes).Append("\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  AssigneeSection: ").Append(AssigneeSection).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Followers: ").Append(Followers).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Projects: ").Append(Projects).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Workspace: ").Append(Workspace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
