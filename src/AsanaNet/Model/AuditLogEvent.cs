/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// An object representing a single event within an Asana domain.  Every audit log event is comprised of an &#x60;event_type&#x60;, &#x60;actor&#x60;, &#x60;resource&#x60;, and &#x60;context&#x60;. Some events will include additional metadata about the event under &#x60;details&#x60;. See our [currently supported list of events](/docs/audit-log-events#supported-audit-log-events) for more details.
    /// </summary>
    [DataContract(Name = "AuditLogEvent")]
    public partial class AuditLogEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogEvent" /> class.
        /// </summary>
        /// <param name="gid">Globally unique identifier of the &#x60;AuditLogEvent&#x60;, as a string..</param>
        /// <param name="createdAt">The time the event was created..</param>
        /// <param name="eventType">The type of the event..</param>
        /// <param name="eventCategory">The category that this &#x60;event_type&#x60; belongs to..</param>
        /// <param name="actor">actor.</param>
        /// <param name="resource">resource.</param>
        /// <param name="details">Event specific details. The schema will vary depending on the &#x60;event_type&#x60;..</param>
        /// <param name="context">context.</param>
        public AuditLogEvent(string gid = default(string), DateTime createdAt = default(DateTime), string eventType = default(string), string eventCategory = default(string), AuditLogEventActor actor = default(AuditLogEventActor), AuditLogEventResource resource = default(AuditLogEventResource), Object details = default(Object), AuditLogEventContext context = default(AuditLogEventContext))
        {
            this.Gid = gid;
            this.CreatedAt = createdAt;
            this.EventType = eventType;
            this.EventCategory = eventCategory;
            this.Actor = actor;
            this.Resource = resource;
            this.Details = details;
            this.Context = context;
        }

        /// <summary>
        /// Globally unique identifier of the &#x60;AuditLogEvent&#x60;, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the &#x60;AuditLogEvent&#x60;, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name = "gid", EmitDefaultValue = false)]
        public string Gid { get; set; }

        /// <summary>
        /// The time the event was created.
        /// </summary>
        /// <value>The time the event was created.</value>
        /// <example>2021-01-01T00:00Z</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The type of the event.
        /// </summary>
        /// <value>The type of the event.</value>
        /// <example>task_deleted</example>
        [DataMember(Name = "event_type", EmitDefaultValue = false)]
        public string EventType { get; set; }

        /// <summary>
        /// The category that this &#x60;event_type&#x60; belongs to.
        /// </summary>
        /// <value>The category that this &#x60;event_type&#x60; belongs to.</value>
        /// <example>deletion</example>
        [DataMember(Name = "event_category", EmitDefaultValue = false)]
        public string EventCategory { get; set; }

        /// <summary>
        /// Gets or Sets Actor
        /// </summary>
        [DataMember(Name = "actor", EmitDefaultValue = false)]
        public AuditLogEventActor Actor { get; set; }

        /// <summary>
        /// Gets or Sets Resource
        /// </summary>
        [DataMember(Name = "resource", EmitDefaultValue = false)]
        public AuditLogEventResource Resource { get; set; }

        /// <summary>
        /// Event specific details. The schema will vary depending on the &#x60;event_type&#x60;.
        /// </summary>
        /// <value>Event specific details. The schema will vary depending on the &#x60;event_type&#x60;.</value>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public Object Details { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name = "context", EmitDefaultValue = false)]
        public AuditLogEventContext Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuditLogEvent {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
