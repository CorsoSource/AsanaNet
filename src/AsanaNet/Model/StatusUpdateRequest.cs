/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// StatusUpdateRequest
    /// </summary>
    [DataContract(Name = "StatusUpdateRequest")]
    public partial class StatusUpdateRequest : IValidatableObject
    {
        /// <summary>
        /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The &#x60;resource_subtype&#x60;s for &#x60;status&#x60; objects represent the type of their parent.
        /// </summary>
        /// <value>The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The &#x60;resource_subtype&#x60;s for &#x60;status&#x60; objects represent the type of their parent.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceSubtypeEnum
        {
            /// <summary>
            /// Enum ProjectStatusUpdate for value: project_status_update
            /// </summary>
            [EnumMember(Value = "project_status_update")]
            ProjectStatusUpdate = 1,

            /// <summary>
            /// Enum PortfolioStatusUpdate for value: portfolio_status_update
            /// </summary>
            [EnumMember(Value = "portfolio_status_update")]
            PortfolioStatusUpdate = 2,

            /// <summary>
            /// Enum GoalStatusUpdate for value: goal_status_update
            /// </summary>
            [EnumMember(Value = "goal_status_update")]
            GoalStatusUpdate = 3
        }


        /// <summary>
        /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The &#x60;resource_subtype&#x60;s for &#x60;status&#x60; objects represent the type of their parent.
        /// </summary>
        /// <value>The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The &#x60;resource_subtype&#x60;s for &#x60;status&#x60; objects represent the type of their parent.</value>
        /// <example>project_status_update</example>
        [DataMember(Name = "resource_subtype", EmitDefaultValue = false)]
        public ResourceSubtypeEnum? ResourceSubtype { get; set; }

        /// <summary>
        /// Returns false as ResourceSubtype should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResourceSubtype()
        {
            return false;
        }
        /// <summary>
        /// The type associated with the status update. This represents the current state of the object this object is on.
        /// </summary>
        /// <value>The type associated with the status update. This represents the current state of the object this object is on.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusTypeEnum
        {
            /// <summary>
            /// Enum OnTrack for value: on_track
            /// </summary>
            [EnumMember(Value = "on_track")]
            OnTrack = 1,

            /// <summary>
            /// Enum AtRisk for value: at_risk
            /// </summary>
            [EnumMember(Value = "at_risk")]
            AtRisk = 2,

            /// <summary>
            /// Enum OffTrack for value: off_track
            /// </summary>
            [EnumMember(Value = "off_track")]
            OffTrack = 3,

            /// <summary>
            /// Enum OnHold for value: on_hold
            /// </summary>
            [EnumMember(Value = "on_hold")]
            OnHold = 4,

            /// <summary>
            /// Enum Complete for value: complete
            /// </summary>
            [EnumMember(Value = "complete")]
            Complete = 5,

            /// <summary>
            /// Enum Achieved for value: achieved
            /// </summary>
            [EnumMember(Value = "achieved")]
            Achieved = 6,

            /// <summary>
            /// Enum Partial for value: partial
            /// </summary>
            [EnumMember(Value = "partial")]
            Partial = 7,

            /// <summary>
            /// Enum Missed for value: missed
            /// </summary>
            [EnumMember(Value = "missed")]
            Missed = 8,

            /// <summary>
            /// Enum Dropped for value: dropped
            /// </summary>
            [EnumMember(Value = "dropped")]
            Dropped = 9
        }


        /// <summary>
        /// The type associated with the status update. This represents the current state of the object this object is on.
        /// </summary>
        /// <value>The type associated with the status update. This represents the current state of the object this object is on.</value>
        [DataMember(Name = "status_type", IsRequired = true, EmitDefaultValue = true)]
        public StatusTypeEnum StatusType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusUpdateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StatusUpdateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusUpdateRequest" /> class.
        /// </summary>
        /// <param name="title">The title of the status update..</param>
        /// <param name="text">The text content of the status update. (required).</param>
        /// <param name="htmlText">[Opt In](/docs/inputoutput-options). The text content of the status update with formatting as HTML..</param>
        /// <param name="statusType">The type associated with the status update. This represents the current state of the object this object is on. (required).</param>
        /// <param name="parent">The id of parent to send this status update to. This can be a project, goal or portfolio. (required).</param>
        public StatusUpdateRequest(string title = default(string), string text = default(string), string htmlText = default(string), StatusTypeEnum statusType = default(StatusTypeEnum), string parent = default(string))
        {
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new ArgumentNullException("text is a required property for StatusUpdateRequest and cannot be null");
            }
            this.Text = text;
            this.StatusType = statusType;
            // to ensure "parent" is required (not null)
            if (parent == null)
            {
                throw new ArgumentNullException("parent is a required property for StatusUpdateRequest and cannot be null");
            }
            this.Parent = parent;
            this.Title = title;
            this.HtmlText = htmlText;
        }

        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name = "gid", EmitDefaultValue = false)]
        public string Gid { get; private set; }

        /// <summary>
        /// Returns false as Gid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGid()
        {
            return false;
        }
        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name = "resource_type", EmitDefaultValue = false)]
        public string ResourceType { get; private set; }

        /// <summary>
        /// Returns false as ResourceType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResourceType()
        {
            return false;
        }
        /// <summary>
        /// The title of the status update.
        /// </summary>
        /// <value>The title of the status update.</value>
        /// <example>Status Update - Jun 15</example>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// The text content of the status update.
        /// </summary>
        /// <value>The text content of the status update.</value>
        /// <example>The project is moving forward according to plan...</example>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// [Opt In](/docs/inputoutput-options). The text content of the status update with formatting as HTML.
        /// </summary>
        /// <value>[Opt In](/docs/inputoutput-options). The text content of the status update with formatting as HTML.</value>
        /// <example>&lt;body&gt;The project &lt;strong&gt;is&lt;/strong&gt; moving forward according to plan...&lt;/body&gt;</example>
        [DataMember(Name = "html_text", EmitDefaultValue = false)]
        public string HtmlText { get; set; }

        /// <summary>
        /// The id of parent to send this status update to. This can be a project, goal or portfolio.
        /// </summary>
        /// <value>The id of parent to send this status update to. This can be a project, goal or portfolio.</value>
        [DataMember(Name = "parent", IsRequired = true, EmitDefaultValue = true)]
        public string Parent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StatusUpdateRequest {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  HtmlText: ").Append(HtmlText).Append("\n");
            sb.Append("  StatusType: ").Append(StatusType).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
