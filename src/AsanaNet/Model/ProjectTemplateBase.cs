/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// ProjectTemplateBase
    /// </summary>
    [DataContract(Name = "ProjectTemplateBase")]
    public partial class ProjectTemplateBase : IValidatableObject
    {
        /// <summary>
        /// Color of the project template.
        /// </summary>
        /// <value>Color of the project template.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ColorEnum
        {
            /// <summary>
            /// Enum DarkPink for value: dark-pink
            /// </summary>
            [EnumMember(Value = "dark-pink")]
            DarkPink = 1,

            /// <summary>
            /// Enum DarkGreen for value: dark-green
            /// </summary>
            [EnumMember(Value = "dark-green")]
            DarkGreen = 2,

            /// <summary>
            /// Enum DarkBlue for value: dark-blue
            /// </summary>
            [EnumMember(Value = "dark-blue")]
            DarkBlue = 3,

            /// <summary>
            /// Enum DarkRed for value: dark-red
            /// </summary>
            [EnumMember(Value = "dark-red")]
            DarkRed = 4,

            /// <summary>
            /// Enum DarkTeal for value: dark-teal
            /// </summary>
            [EnumMember(Value = "dark-teal")]
            DarkTeal = 5,

            /// <summary>
            /// Enum DarkBrown for value: dark-brown
            /// </summary>
            [EnumMember(Value = "dark-brown")]
            DarkBrown = 6,

            /// <summary>
            /// Enum DarkOrange for value: dark-orange
            /// </summary>
            [EnumMember(Value = "dark-orange")]
            DarkOrange = 7,

            /// <summary>
            /// Enum DarkPurple for value: dark-purple
            /// </summary>
            [EnumMember(Value = "dark-purple")]
            DarkPurple = 8,

            /// <summary>
            /// Enum DarkWarmGray for value: dark-warm-gray
            /// </summary>
            [EnumMember(Value = "dark-warm-gray")]
            DarkWarmGray = 9,

            /// <summary>
            /// Enum LightPink for value: light-pink
            /// </summary>
            [EnumMember(Value = "light-pink")]
            LightPink = 10,

            /// <summary>
            /// Enum LightGreen for value: light-green
            /// </summary>
            [EnumMember(Value = "light-green")]
            LightGreen = 11,

            /// <summary>
            /// Enum LightBlue for value: light-blue
            /// </summary>
            [EnumMember(Value = "light-blue")]
            LightBlue = 12,

            /// <summary>
            /// Enum LightRed for value: light-red
            /// </summary>
            [EnumMember(Value = "light-red")]
            LightRed = 13,

            /// <summary>
            /// Enum LightTeal for value: light-teal
            /// </summary>
            [EnumMember(Value = "light-teal")]
            LightTeal = 14,

            /// <summary>
            /// Enum LightBrown for value: light-brown
            /// </summary>
            [EnumMember(Value = "light-brown")]
            LightBrown = 15,

            /// <summary>
            /// Enum LightOrange for value: light-orange
            /// </summary>
            [EnumMember(Value = "light-orange")]
            LightOrange = 16,

            /// <summary>
            /// Enum LightPurple for value: light-purple
            /// </summary>
            [EnumMember(Value = "light-purple")]
            LightPurple = 17,

            /// <summary>
            /// Enum LightWarmGray for value: light-warm-gray
            /// </summary>
            [EnumMember(Value = "light-warm-gray")]
            LightWarmGray = 18,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 19
        }


        /// <summary>
        /// Color of the project template.
        /// </summary>
        /// <value>Color of the project template.</value>
        /// <example>light-green</example>
        [DataMember(Name = "color", EmitDefaultValue = true)]
        public ColorEnum? Color { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectTemplateBase" /> class.
        /// </summary>
        /// <param name="name">Name of the project template..</param>
        /// <param name="description">Free-form textual information associated with the project template.</param>
        /// <param name="htmlDescription">The description of the project template with formatting as HTML..</param>
        /// <param name="varPublic">True if the project template is public to its team..</param>
        /// <param name="owner">owner.</param>
        /// <param name="team">team.</param>
        /// <param name="color">Color of the project template..</param>
        /// <param name="requestedRoles">Array of template roles in this project template. User Ids can be provided for these variables when instantiating a project to assign template tasks to the user..</param>
        public ProjectTemplateBase(string name = default(string), string description = default(string), string htmlDescription = default(string), bool varPublic = default(bool), ProjectTemplateBaseAllOfOwner owner = default(ProjectTemplateBaseAllOfOwner), TeamCompact team = default(TeamCompact), ColorEnum? color = default(ColorEnum?), List<TemplateRole> requestedRoles = default(List<TemplateRole>))
        {
            this.Name = name;
            this.Description = description;
            this.HtmlDescription = htmlDescription;
            this.VarPublic = varPublic;
            this.Owner = owner;
            this.Team = team;
            this.Color = color;
            this.RequestedRoles = requestedRoles;
        }

        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name = "gid", EmitDefaultValue = false)]
        public string Gid { get; private set; }

        /// <summary>
        /// Returns false as Gid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGid()
        {
            return false;
        }
        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name = "resource_type", EmitDefaultValue = false)]
        public string ResourceType { get; private set; }

        /// <summary>
        /// Returns false as ResourceType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResourceType()
        {
            return false;
        }
        /// <summary>
        /// Name of the project template.
        /// </summary>
        /// <value>Name of the project template.</value>
        /// <example>Packing list</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Free-form textual information associated with the project template
        /// </summary>
        /// <value>Free-form textual information associated with the project template</value>
        /// <example>These are things we need to pack for a trip.</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The description of the project template with formatting as HTML.
        /// </summary>
        /// <value>The description of the project template with formatting as HTML.</value>
        /// <example>&lt;body&gt;These are things we need to pack for a trip.&lt;/body&gt;</example>
        [DataMember(Name = "html_description", EmitDefaultValue = false)]
        public string HtmlDescription { get; set; }

        /// <summary>
        /// True if the project template is public to its team.
        /// </summary>
        /// <value>True if the project template is public to its team.</value>
        /// <example>false</example>
        [DataMember(Name = "public", EmitDefaultValue = true)]
        public bool VarPublic { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner", EmitDefaultValue = false)]
        public ProjectTemplateBaseAllOfOwner Owner { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name = "team", EmitDefaultValue = false)]
        public TeamCompact Team { get; set; }

        /// <summary>
        /// Array of date variables in this project template. Calendar dates must be provided for these variables when instantiating a project.
        /// </summary>
        /// <value>Array of date variables in this project template. Calendar dates must be provided for these variables when instantiating a project.</value>
        [DataMember(Name = "requested_dates", EmitDefaultValue = false)]
        public List<DateVariableCompact> RequestedDates { get; private set; }

        /// <summary>
        /// Returns false as RequestedDates should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequestedDates()
        {
            return false;
        }
        /// <summary>
        /// Array of template roles in this project template. User Ids can be provided for these variables when instantiating a project to assign template tasks to the user.
        /// </summary>
        /// <value>Array of template roles in this project template. User Ids can be provided for these variables when instantiating a project to assign template tasks to the user.</value>
        [DataMember(Name = "requested_roles", EmitDefaultValue = false)]
        public List<TemplateRole> RequestedRoles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProjectTemplateBase {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HtmlDescription: ").Append(HtmlDescription).Append("\n");
            sb.Append("  VarPublic: ").Append(VarPublic).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  RequestedDates: ").Append(RequestedDates).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  RequestedRoles: ").Append(RequestedRoles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
