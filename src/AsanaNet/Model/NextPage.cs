/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// *Conditional*. This property is only present when a limit query parameter is provided in the request. When making a paginated request, the API will return a number of results as specified by the limit parameter. If more results exist, then the response will contain a next_page attribute, which will include an offset, a relative path attribute, and a full uri attribute. If there are no more pages available, next_page will be null and no offset will be provided. Note that an offset token will expire after some time, as data may have changed.
    /// </summary>
    [DataContract(Name = "NextPage")]
    public partial class NextPage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NextPage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public NextPage()
        {
        }

        /// <summary>
        /// Pagination offset for the request.
        /// </summary>
        /// <value>Pagination offset for the request.</value>
        /// <example>eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9</example>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public string Offset { get; private set; }

        /// <summary>
        /// Returns false as Offset should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOffset()
        {
            return false;
        }
        /// <summary>
        /// A relative path containing the query parameters to fetch for next_page
        /// </summary>
        /// <value>A relative path containing the query parameters to fetch for next_page</value>
        /// <example>/tasks/12345/attachments?limit&#x3D;2&amp;offset&#x3D;eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9</example>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; private set; }

        /// <summary>
        /// Returns false as Path should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePath()
        {
            return false;
        }
        /// <summary>
        /// A full uri containing the query parameters to fetch for next_page
        /// </summary>
        /// <value>A full uri containing the query parameters to fetch for next_page</value>
        /// <example>https://app.asana.com/api/1.0/tasks/12345/attachments?limit&#x3D;2&amp;offset&#x3D;eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9</example>
        [DataMember(Name = "uri", EmitDefaultValue = false)]
        public string Uri { get; private set; }

        /// <summary>
        /// Returns false as Uri should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUri()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NextPage {\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
