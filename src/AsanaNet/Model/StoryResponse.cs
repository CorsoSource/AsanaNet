/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// StoryResponse
    /// </summary>
    [DataContract(Name = "StoryResponse")]
    public partial class StoryResponse : IValidatableObject
    {
        /// <summary>
        /// The name of the sticker in this story. &#x60;null&#x60; if there is no sticker.
        /// </summary>
        /// <value>The name of the sticker in this story. &#x60;null&#x60; if there is no sticker.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StickerNameEnum
        {
            /// <summary>
            /// Enum GreenCheckmark for value: green_checkmark
            /// </summary>
            [EnumMember(Value = "green_checkmark")]
            GreenCheckmark = 1,

            /// <summary>
            /// Enum PeopleDancing for value: people_dancing
            /// </summary>
            [EnumMember(Value = "people_dancing")]
            PeopleDancing = 2,

            /// <summary>
            /// Enum DancingUnicorn for value: dancing_unicorn
            /// </summary>
            [EnumMember(Value = "dancing_unicorn")]
            DancingUnicorn = 3,

            /// <summary>
            /// Enum Heart for value: heart
            /// </summary>
            [EnumMember(Value = "heart")]
            Heart = 4,

            /// <summary>
            /// Enum PartyPopper for value: party_popper
            /// </summary>
            [EnumMember(Value = "party_popper")]
            PartyPopper = 5,

            /// <summary>
            /// Enum PeopleWavingFlags for value: people_waving_flags
            /// </summary>
            [EnumMember(Value = "people_waving_flags")]
            PeopleWavingFlags = 6,

            /// <summary>
            /// Enum SplashingNarwhal for value: splashing_narwhal
            /// </summary>
            [EnumMember(Value = "splashing_narwhal")]
            SplashingNarwhal = 7,

            /// <summary>
            /// Enum Trophy for value: trophy
            /// </summary>
            [EnumMember(Value = "trophy")]
            Trophy = 8,

            /// <summary>
            /// Enum YetiRidingUnicorn for value: yeti_riding_unicorn
            /// </summary>
            [EnumMember(Value = "yeti_riding_unicorn")]
            YetiRidingUnicorn = 9,

            /// <summary>
            /// Enum CelebratingPeople for value: celebrating_people
            /// </summary>
            [EnumMember(Value = "celebrating_people")]
            CelebratingPeople = 10,

            /// <summary>
            /// Enum DeterminedClimbers for value: determined_climbers
            /// </summary>
            [EnumMember(Value = "determined_climbers")]
            DeterminedClimbers = 11,

            /// <summary>
            /// Enum PhoenixSpreadingLove for value: phoenix_spreading_love
            /// </summary>
            [EnumMember(Value = "phoenix_spreading_love")]
            PhoenixSpreadingLove = 12
        }


        /// <summary>
        /// The name of the sticker in this story. &#x60;null&#x60; if there is no sticker.
        /// </summary>
        /// <value>The name of the sticker in this story. &#x60;null&#x60; if there is no sticker.</value>
        /// <example>dancing_unicorn</example>
        [DataMember(Name = "sticker_name", EmitDefaultValue = false)]
        public StickerNameEnum? StickerName { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Comment for value: comment
            /// </summary>
            [EnumMember(Value = "comment")]
            Comment = 1,

            /// <summary>
            /// Enum System for value: system
            /// </summary>
            [EnumMember(Value = "system")]
            System = 2
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        /// <example>comment</example>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return false;
        }
        /// <summary>
        /// The component of the Asana product the user used to trigger the story.
        /// </summary>
        /// <value>The component of the Asana product the user used to trigger the story.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            /// <summary>
            /// Enum Web for value: web
            /// </summary>
            [EnumMember(Value = "web")]
            Web = 1,

            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            [EnumMember(Value = "email")]
            Email = 2,

            /// <summary>
            /// Enum Mobile for value: mobile
            /// </summary>
            [EnumMember(Value = "mobile")]
            Mobile = 3,

            /// <summary>
            /// Enum Api for value: api
            /// </summary>
            [EnumMember(Value = "api")]
            Api = 4,

            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 5
        }


        /// <summary>
        /// The component of the Asana product the user used to trigger the story.
        /// </summary>
        /// <value>The component of the Asana product the user used to trigger the story.</value>
        /// <example>web</example>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public SourceEnum? Source { get; set; }

        /// <summary>
        /// Returns false as Source should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSource()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoryResponse" /> class.
        /// </summary>
        /// <param name="text">The plain text of the comment to add. Cannot be used with html_text..</param>
        /// <param name="htmlText">[Opt In](/docs/inputoutput-options). HTML formatted text for a comment. This will not include the name of the creator..</param>
        /// <param name="isPinned">*Conditional*. Whether the story should be pinned on the resource..</param>
        /// <param name="stickerName">The name of the sticker in this story. &#x60;null&#x60; if there is no sticker..</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="oldName">*Conditional*&#39;.</param>
        /// <param name="oldDates">oldDates.</param>
        /// <param name="newDates">newDates.</param>
        /// <param name="story">story.</param>
        /// <param name="assignee">assignee.</param>
        /// <param name="follower">follower.</param>
        /// <param name="oldSection">oldSection.</param>
        /// <param name="newSection">newSection.</param>
        /// <param name="task">task.</param>
        /// <param name="project">project.</param>
        /// <param name="tag">tag.</param>
        /// <param name="customField">customField.</param>
        /// <param name="oldEnumValue">oldEnumValue.</param>
        /// <param name="newEnumValue">newEnumValue.</param>
        /// <param name="oldDateValue">oldDateValue.</param>
        /// <param name="newDateValue">newDateValue.</param>
        /// <param name="duplicateOf">duplicateOf.</param>
        /// <param name="duplicatedFrom">duplicatedFrom.</param>
        /// <param name="dependency">dependency.</param>
        /// <param name="target">target.</param>
        public StoryResponse(string text = default(string), string htmlText = default(string), bool isPinned = default(bool), StickerNameEnum? stickerName = default(StickerNameEnum?), UserCompact createdBy = default(UserCompact), string oldName = default(string), StoryResponseDates oldDates = default(StoryResponseDates), StoryResponseDates newDates = default(StoryResponseDates), StoryCompact story = default(StoryCompact), UserCompact assignee = default(UserCompact), UserCompact follower = default(UserCompact), SectionCompact oldSection = default(SectionCompact), SectionCompact newSection = default(SectionCompact), TaskCompact task = default(TaskCompact), ProjectCompact project = default(ProjectCompact), TagCompact tag = default(TagCompact), CustomFieldCompact customField = default(CustomFieldCompact), EnumOption oldEnumValue = default(EnumOption), EnumOption newEnumValue = default(EnumOption), StoryResponseAllOfOldDateValue oldDateValue = default(StoryResponseAllOfOldDateValue), StoryResponseAllOfNewDateValue newDateValue = default(StoryResponseAllOfNewDateValue), TaskCompact duplicateOf = default(TaskCompact), TaskCompact duplicatedFrom = default(TaskCompact), TaskCompact dependency = default(TaskCompact), StoryResponseAllOfTarget target = default(StoryResponseAllOfTarget))
        {
            this.Text = text;
            this.HtmlText = htmlText;
            this.IsPinned = isPinned;
            this.StickerName = stickerName;
            this.CreatedBy = createdBy;
            this.OldName = oldName;
            this.OldDates = oldDates;
            this.NewDates = newDates;
            this.Story = story;
            this.Assignee = assignee;
            this.Follower = follower;
            this.OldSection = oldSection;
            this.NewSection = newSection;
            this.Task = task;
            this.Project = project;
            this.Tag = tag;
            this.CustomField = customField;
            this.OldEnumValue = oldEnumValue;
            this.NewEnumValue = newEnumValue;
            this.OldDateValue = oldDateValue;
            this.NewDateValue = newDateValue;
            this.DuplicateOf = duplicateOf;
            this.DuplicatedFrom = duplicatedFrom;
            this.Dependency = dependency;
            this.Target = target;
        }

        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name = "gid", EmitDefaultValue = false)]
        public string Gid { get; private set; }

        /// <summary>
        /// Returns false as Gid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGid()
        {
            return false;
        }
        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name = "resource_type", EmitDefaultValue = false)]
        public string ResourceType { get; private set; }

        /// <summary>
        /// Returns false as ResourceType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResourceType()
        {
            return false;
        }
        /// <summary>
        /// The time at which this resource was created.
        /// </summary>
        /// <value>The time at which this resource was created.</value>
        /// <example>2012-02-22T02:06:58.147Z</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
        /// </summary>
        /// <value>The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.</value>
        /// <example>comment_added</example>
        [DataMember(Name = "resource_subtype", EmitDefaultValue = false)]
        public string ResourceSubtype { get; private set; }

        /// <summary>
        /// Returns false as ResourceSubtype should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResourceSubtype()
        {
            return false;
        }
        /// <summary>
        /// The plain text of the comment to add. Cannot be used with html_text.
        /// </summary>
        /// <value>The plain text of the comment to add. Cannot be used with html_text.</value>
        /// <example>This is a comment.</example>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// [Opt In](/docs/inputoutput-options). HTML formatted text for a comment. This will not include the name of the creator.
        /// </summary>
        /// <value>[Opt In](/docs/inputoutput-options). HTML formatted text for a comment. This will not include the name of the creator.</value>
        /// <example>&lt;body&gt;This is a comment.&lt;/body&gt;</example>
        [DataMember(Name = "html_text", EmitDefaultValue = false)]
        public string HtmlText { get; set; }

        /// <summary>
        /// *Conditional*. Whether the story should be pinned on the resource.
        /// </summary>
        /// <value>*Conditional*. Whether the story should be pinned on the resource.</value>
        /// <example>false</example>
        [DataMember(Name = "is_pinned", EmitDefaultValue = true)]
        public bool IsPinned { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = false)]
        public UserCompact CreatedBy { get; set; }

        /// <summary>
        /// *Conditional*. Whether the text of the story can be edited after creation.
        /// </summary>
        /// <value>*Conditional*. Whether the text of the story can be edited after creation.</value>
        /// <example>false</example>
        [DataMember(Name = "is_editable", EmitDefaultValue = true)]
        public bool IsEditable { get; private set; }

        /// <summary>
        /// Returns false as IsEditable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsEditable()
        {
            return false;
        }
        /// <summary>
        /// *Conditional*. Whether the text of the story has been edited after creation.
        /// </summary>
        /// <value>*Conditional*. Whether the text of the story has been edited after creation.</value>
        /// <example>false</example>
        [DataMember(Name = "is_edited", EmitDefaultValue = true)]
        public bool IsEdited { get; private set; }

        /// <summary>
        /// Returns false as IsEdited should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsEdited()
        {
            return false;
        }
        /// <summary>
        /// *Deprecated - please use likes instead* *Conditional*. True if the story is hearted by the authorized user, false if not.
        /// </summary>
        /// <value>*Deprecated - please use likes instead* *Conditional*. True if the story is hearted by the authorized user, false if not.</value>
        /// <example>false</example>
        [DataMember(Name = "hearted", EmitDefaultValue = true)]
        public bool Hearted { get; private set; }

        /// <summary>
        /// Returns false as Hearted should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHearted()
        {
            return false;
        }
        /// <summary>
        /// *Deprecated - please use likes instead*  *Conditional*. Array of likes for users who have hearted this story.
        /// </summary>
        /// <value>*Deprecated - please use likes instead*  *Conditional*. Array of likes for users who have hearted this story.</value>
        [DataMember(Name = "hearts", EmitDefaultValue = false)]
        public List<Like> Hearts { get; private set; }

        /// <summary>
        /// Returns false as Hearts should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHearts()
        {
            return false;
        }
        /// <summary>
        /// *Deprecated - please use likes instead*  *Conditional*. The number of users who have hearted this story.
        /// </summary>
        /// <value>*Deprecated - please use likes instead*  *Conditional*. The number of users who have hearted this story.</value>
        /// <example>5</example>
        [DataMember(Name = "num_hearts", EmitDefaultValue = false)]
        public int NumHearts { get; private set; }

        /// <summary>
        /// Returns false as NumHearts should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumHearts()
        {
            return false;
        }
        /// <summary>
        /// *Conditional*. True if the story is liked by the authorized user, false if not.
        /// </summary>
        /// <value>*Conditional*. True if the story is liked by the authorized user, false if not.</value>
        /// <example>false</example>
        [DataMember(Name = "liked", EmitDefaultValue = true)]
        public bool Liked { get; private set; }

        /// <summary>
        /// Returns false as Liked should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLiked()
        {
            return false;
        }
        /// <summary>
        /// *Conditional*. Array of likes for users who have liked this story.
        /// </summary>
        /// <value>*Conditional*. Array of likes for users who have liked this story.</value>
        [DataMember(Name = "likes", EmitDefaultValue = false)]
        public List<Like> Likes { get; private set; }

        /// <summary>
        /// Returns false as Likes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLikes()
        {
            return false;
        }
        /// <summary>
        /// *Conditional*. The number of users who have liked this story.
        /// </summary>
        /// <value>*Conditional*. The number of users who have liked this story.</value>
        /// <example>5</example>
        [DataMember(Name = "num_likes", EmitDefaultValue = false)]
        public int NumLikes { get; private set; }

        /// <summary>
        /// Returns false as NumLikes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumLikes()
        {
            return false;
        }
        /// <summary>
        /// *Conditional*. A collection of previews to be displayed in the story.  *Note: This property only exists for comment stories.*
        /// </summary>
        /// <value>*Conditional*. A collection of previews to be displayed in the story.  *Note: This property only exists for comment stories.*</value>
        [DataMember(Name = "previews", EmitDefaultValue = false)]
        public List<Preview> Previews { get; private set; }

        /// <summary>
        /// Returns false as Previews should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePreviews()
        {
            return false;
        }
        /// <summary>
        /// *Conditional*&#39;
        /// </summary>
        /// <value>*Conditional*&#39;</value>
        /// <example>This was the Old Name</example>
        [DataMember(Name = "old_name", EmitDefaultValue = false)]
        public string OldName { get; set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        /// <example>This is the New Name</example>
        [DataMember(Name = "new_name", EmitDefaultValue = true)]
        public string NewName { get; private set; }

        /// <summary>
        /// Returns false as NewName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNewName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets OldDates
        /// </summary>
        [DataMember(Name = "old_dates", EmitDefaultValue = false)]
        public StoryResponseDates OldDates { get; set; }

        /// <summary>
        /// Gets or Sets NewDates
        /// </summary>
        [DataMember(Name = "new_dates", EmitDefaultValue = false)]
        public StoryResponseDates NewDates { get; set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        /// <example>default_task</example>
        [DataMember(Name = "old_resource_subtype", EmitDefaultValue = false)]
        public string OldResourceSubtype { get; private set; }

        /// <summary>
        /// Returns false as OldResourceSubtype should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOldResourceSubtype()
        {
            return false;
        }
        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        /// <example>milestone</example>
        [DataMember(Name = "new_resource_subtype", EmitDefaultValue = false)]
        public string NewResourceSubtype { get; private set; }

        /// <summary>
        /// Returns false as NewResourceSubtype should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNewResourceSubtype()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Story
        /// </summary>
        [DataMember(Name = "story", EmitDefaultValue = false)]
        public StoryCompact Story { get; set; }

        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name = "assignee", EmitDefaultValue = false)]
        public UserCompact Assignee { get; set; }

        /// <summary>
        /// Gets or Sets Follower
        /// </summary>
        [DataMember(Name = "follower", EmitDefaultValue = false)]
        public UserCompact Follower { get; set; }

        /// <summary>
        /// Gets or Sets OldSection
        /// </summary>
        [DataMember(Name = "old_section", EmitDefaultValue = false)]
        public SectionCompact OldSection { get; set; }

        /// <summary>
        /// Gets or Sets NewSection
        /// </summary>
        [DataMember(Name = "new_section", EmitDefaultValue = false)]
        public SectionCompact NewSection { get; set; }

        /// <summary>
        /// Gets or Sets Task
        /// </summary>
        [DataMember(Name = "task", EmitDefaultValue = false)]
        public TaskCompact Task { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name = "project", EmitDefaultValue = false)]
        public ProjectCompact Project { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public TagCompact Tag { get; set; }

        /// <summary>
        /// Gets or Sets CustomField
        /// </summary>
        [DataMember(Name = "custom_field", EmitDefaultValue = false)]
        public CustomFieldCompact CustomField { get; set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        /// <example>This was the Old Text</example>
        [DataMember(Name = "old_text_value", EmitDefaultValue = false)]
        public string OldTextValue { get; private set; }

        /// <summary>
        /// Returns false as OldTextValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOldTextValue()
        {
            return false;
        }
        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        /// <example>This is the New Text</example>
        [DataMember(Name = "new_text_value", EmitDefaultValue = false)]
        public string NewTextValue { get; private set; }

        /// <summary>
        /// Returns false as NewTextValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNewTextValue()
        {
            return false;
        }
        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        /// <example>1</example>
        [DataMember(Name = "old_number_value", EmitDefaultValue = true)]
        public int? OldNumberValue { get; private set; }

        /// <summary>
        /// Returns false as OldNumberValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOldNumberValue()
        {
            return false;
        }
        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        /// <example>2</example>
        [DataMember(Name = "new_number_value", EmitDefaultValue = false)]
        public int NewNumberValue { get; private set; }

        /// <summary>
        /// Returns false as NewNumberValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNewNumberValue()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets OldEnumValue
        /// </summary>
        [DataMember(Name = "old_enum_value", EmitDefaultValue = false)]
        public EnumOption OldEnumValue { get; set; }

        /// <summary>
        /// Gets or Sets NewEnumValue
        /// </summary>
        [DataMember(Name = "new_enum_value", EmitDefaultValue = false)]
        public EnumOption NewEnumValue { get; set; }

        /// <summary>
        /// Gets or Sets OldDateValue
        /// </summary>
        [DataMember(Name = "old_date_value", EmitDefaultValue = false)]
        public StoryResponseAllOfOldDateValue OldDateValue { get; set; }

        /// <summary>
        /// Gets or Sets NewDateValue
        /// </summary>
        [DataMember(Name = "new_date_value", EmitDefaultValue = false)]
        public StoryResponseAllOfNewDateValue NewDateValue { get; set; }

        /// <summary>
        /// *Conditional*. The old value of a people custom field story.
        /// </summary>
        /// <value>*Conditional*. The old value of a people custom field story.</value>
        [DataMember(Name = "old_people_value", EmitDefaultValue = false)]
        public List<UserCompact> OldPeopleValue { get; private set; }

        /// <summary>
        /// Returns false as OldPeopleValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOldPeopleValue()
        {
            return false;
        }
        /// <summary>
        /// *Conditional*. The new value of a people custom field story.
        /// </summary>
        /// <value>*Conditional*. The new value of a people custom field story.</value>
        [DataMember(Name = "new_people_value", EmitDefaultValue = false)]
        public List<UserCompact> NewPeopleValue { get; private set; }

        /// <summary>
        /// Returns false as NewPeopleValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNewPeopleValue()
        {
            return false;
        }
        /// <summary>
        /// *Conditional*. The old value of a multi-enum custom field story.
        /// </summary>
        /// <value>*Conditional*. The old value of a multi-enum custom field story.</value>
        [DataMember(Name = "old_multi_enum_values", EmitDefaultValue = false)]
        public List<EnumOption> OldMultiEnumValues { get; private set; }

        /// <summary>
        /// Returns false as OldMultiEnumValues should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOldMultiEnumValues()
        {
            return false;
        }
        /// <summary>
        /// *Conditional*. The new value of a multi-enum custom field story.
        /// </summary>
        /// <value>*Conditional*. The new value of a multi-enum custom field story.</value>
        [DataMember(Name = "new_multi_enum_values", EmitDefaultValue = false)]
        public List<EnumOption> NewMultiEnumValues { get; private set; }

        /// <summary>
        /// Returns false as NewMultiEnumValues should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNewMultiEnumValues()
        {
            return false;
        }
        /// <summary>
        /// *Conditional*. The new value of approval status.
        /// </summary>
        /// <value>*Conditional*. The new value of approval status.</value>
        /// <example>approved</example>
        [DataMember(Name = "new_approval_status", EmitDefaultValue = false)]
        public string NewApprovalStatus { get; private set; }

        /// <summary>
        /// Returns false as NewApprovalStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNewApprovalStatus()
        {
            return false;
        }
        /// <summary>
        /// *Conditional*. The old value of approval status.
        /// </summary>
        /// <value>*Conditional*. The old value of approval status.</value>
        /// <example>pending</example>
        [DataMember(Name = "old_approval_status", EmitDefaultValue = false)]
        public string OldApprovalStatus { get; private set; }

        /// <summary>
        /// Returns false as OldApprovalStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOldApprovalStatus()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets DuplicateOf
        /// </summary>
        [DataMember(Name = "duplicate_of", EmitDefaultValue = false)]
        public TaskCompact DuplicateOf { get; set; }

        /// <summary>
        /// Gets or Sets DuplicatedFrom
        /// </summary>
        [DataMember(Name = "duplicated_from", EmitDefaultValue = false)]
        public TaskCompact DuplicatedFrom { get; set; }

        /// <summary>
        /// Gets or Sets Dependency
        /// </summary>
        [DataMember(Name = "dependency", EmitDefaultValue = false)]
        public TaskCompact Dependency { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name = "target", EmitDefaultValue = false)]
        public StoryResponseAllOfTarget Target { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StoryResponse {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  HtmlText: ").Append(HtmlText).Append("\n");
            sb.Append("  IsPinned: ").Append(IsPinned).Append("\n");
            sb.Append("  StickerName: ").Append(StickerName).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsEditable: ").Append(IsEditable).Append("\n");
            sb.Append("  IsEdited: ").Append(IsEdited).Append("\n");
            sb.Append("  Hearted: ").Append(Hearted).Append("\n");
            sb.Append("  Hearts: ").Append(Hearts).Append("\n");
            sb.Append("  NumHearts: ").Append(NumHearts).Append("\n");
            sb.Append("  Liked: ").Append(Liked).Append("\n");
            sb.Append("  Likes: ").Append(Likes).Append("\n");
            sb.Append("  NumLikes: ").Append(NumLikes).Append("\n");
            sb.Append("  Previews: ").Append(Previews).Append("\n");
            sb.Append("  OldName: ").Append(OldName).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  OldDates: ").Append(OldDates).Append("\n");
            sb.Append("  NewDates: ").Append(NewDates).Append("\n");
            sb.Append("  OldResourceSubtype: ").Append(OldResourceSubtype).Append("\n");
            sb.Append("  NewResourceSubtype: ").Append(NewResourceSubtype).Append("\n");
            sb.Append("  Story: ").Append(Story).Append("\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  Follower: ").Append(Follower).Append("\n");
            sb.Append("  OldSection: ").Append(OldSection).Append("\n");
            sb.Append("  NewSection: ").Append(NewSection).Append("\n");
            sb.Append("  Task: ").Append(Task).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  CustomField: ").Append(CustomField).Append("\n");
            sb.Append("  OldTextValue: ").Append(OldTextValue).Append("\n");
            sb.Append("  NewTextValue: ").Append(NewTextValue).Append("\n");
            sb.Append("  OldNumberValue: ").Append(OldNumberValue).Append("\n");
            sb.Append("  NewNumberValue: ").Append(NewNumberValue).Append("\n");
            sb.Append("  OldEnumValue: ").Append(OldEnumValue).Append("\n");
            sb.Append("  NewEnumValue: ").Append(NewEnumValue).Append("\n");
            sb.Append("  OldDateValue: ").Append(OldDateValue).Append("\n");
            sb.Append("  NewDateValue: ").Append(NewDateValue).Append("\n");
            sb.Append("  OldPeopleValue: ").Append(OldPeopleValue).Append("\n");
            sb.Append("  NewPeopleValue: ").Append(NewPeopleValue).Append("\n");
            sb.Append("  OldMultiEnumValues: ").Append(OldMultiEnumValues).Append("\n");
            sb.Append("  NewMultiEnumValues: ").Append(NewMultiEnumValues).Append("\n");
            sb.Append("  NewApprovalStatus: ").Append(NewApprovalStatus).Append("\n");
            sb.Append("  OldApprovalStatus: ").Append(OldApprovalStatus).Append("\n");
            sb.Append("  DuplicateOf: ").Append(DuplicateOf).Append("\n");
            sb.Append("  DuplicatedFrom: ").Append(DuplicatedFrom).Append("\n");
            sb.Append("  Dependency: ").Append(Dependency).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
