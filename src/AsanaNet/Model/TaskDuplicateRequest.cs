/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// TaskDuplicateRequest
    /// </summary>
    [DataContract(Name = "TaskDuplicateRequest")]
    public partial class TaskDuplicateRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskDuplicateRequest" /> class.
        /// </summary>
        /// <param name="name">The name of the new task..</param>
        /// <param name="include">A comma-separated list of fields that will be duplicated to the new task. ##### Fields - assignee - attachments - dates - dependencies - followers - notes - parent - projects - subtasks - tags.</param>
        public TaskDuplicateRequest(string name = default(string), string include = default(string))
        {
            this.Name = name;
            this.Include = include;
        }

        /// <summary>
        /// The name of the new task.
        /// </summary>
        /// <value>The name of the new task.</value>
        /// <example>New Task Name</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A comma-separated list of fields that will be duplicated to the new task. ##### Fields - assignee - attachments - dates - dependencies - followers - notes - parent - projects - subtasks - tags
        /// </summary>
        /// <value>A comma-separated list of fields that will be duplicated to the new task. ##### Fields - assignee - attachments - dates - dependencies - followers - notes - parent - projects - subtasks - tags</value>
        /// <example>[&quot;notes,assignee,subtasks,attachments,tags,followers,projects,dates,dependencies,parent&quot;]</example>
        [DataMember(Name = "include", EmitDefaultValue = false)]
        public string Include { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaskDuplicateRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Include: ").Append(Include).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Include != null) {
                // Include (string) pattern
                Regex regexInclude = new Regex(@"([notes|assignee|subtasks|attachments|tags|followers|projects|dates|dependencies|parent])(,\1)*", RegexOptions.CultureInvariant);
                if (!regexInclude.Match(this.Include).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Include, must match a pattern of " + regexInclude, new [] { "Include" });
                }
            }

            yield break;
        }
    }

}
