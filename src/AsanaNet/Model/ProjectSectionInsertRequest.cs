/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// ProjectSectionInsertRequest
    /// </summary>
    [DataContract(Name = "ProjectSectionInsertRequest")]
    public partial class ProjectSectionInsertRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectSectionInsertRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectSectionInsertRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectSectionInsertRequest" /> class.
        /// </summary>
        /// <param name="section">The section to reorder. (required).</param>
        /// <param name="beforeSection">Insert the given section immediately before the section specified by this parameter..</param>
        /// <param name="afterSection">Insert the given section immediately after the section specified by this parameter..</param>
        public ProjectSectionInsertRequest(string section = default(string), string beforeSection = default(string), string afterSection = default(string))
        {
            // to ensure "section" is required (not null)
            if (section == null)
            {
                throw new ArgumentNullException("section is a required property for ProjectSectionInsertRequest and cannot be null");
            }
            this.Section = section;
            this.BeforeSection = beforeSection;
            this.AfterSection = afterSection;
        }

        /// <summary>
        /// The section to reorder.
        /// </summary>
        /// <value>The section to reorder.</value>
        /// <example>321654</example>
        [DataMember(Name = "section", IsRequired = true, EmitDefaultValue = true)]
        public string Section { get; set; }

        /// <summary>
        /// Insert the given section immediately before the section specified by this parameter.
        /// </summary>
        /// <value>Insert the given section immediately before the section specified by this parameter.</value>
        /// <example>86420</example>
        [DataMember(Name = "before_section", EmitDefaultValue = false)]
        public string BeforeSection { get; set; }

        /// <summary>
        /// Insert the given section immediately after the section specified by this parameter.
        /// </summary>
        /// <value>Insert the given section immediately after the section specified by this parameter.</value>
        /// <example>987654</example>
        [DataMember(Name = "after_section", EmitDefaultValue = false)]
        public string AfterSection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProjectSectionInsertRequest {\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  BeforeSection: ").Append(BeforeSection).Append("\n");
            sb.Append("  AfterSection: ").Append(AfterSection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
