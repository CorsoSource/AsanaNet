/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// TeamRequest
    /// </summary>
    [DataContract(Name = "TeamRequest")]
    public partial class TeamRequest : IValidatableObject
    {
        /// <summary>
        /// The visibility of the team to users in the same organization 
        /// </summary>
        /// <value>The visibility of the team to users in the same organization </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VisibilityEnum
        {
            /// <summary>
            /// Enum Secret for value: secret
            /// </summary>
            [EnumMember(Value = "secret")]
            Secret = 1,

            /// <summary>
            /// Enum RequestToJoin for value: request_to_join
            /// </summary>
            [EnumMember(Value = "request_to_join")]
            RequestToJoin = 2,

            /// <summary>
            /// Enum Public for value: public
            /// </summary>
            [EnumMember(Value = "public")]
            Public = 3
        }


        /// <summary>
        /// The visibility of the team to users in the same organization 
        /// </summary>
        /// <value>The visibility of the team to users in the same organization </value>
        [DataMember(Name = "visibility", EmitDefaultValue = false)]
        public VisibilityEnum? Visibility { get; set; }
        /// <summary>
        /// Controls who can edit team name and description 
        /// </summary>
        /// <value>Controls who can edit team name and description </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EditTeamNameOrDescriptionAccessLevelEnum
        {
            /// <summary>
            /// Enum AllTeamMembers for value: all_team_members
            /// </summary>
            [EnumMember(Value = "all_team_members")]
            AllTeamMembers = 1,

            /// <summary>
            /// Enum OnlyTeamAdmins for value: only_team_admins
            /// </summary>
            [EnumMember(Value = "only_team_admins")]
            OnlyTeamAdmins = 2
        }


        /// <summary>
        /// Controls who can edit team name and description 
        /// </summary>
        /// <value>Controls who can edit team name and description </value>
        [DataMember(Name = "edit_team_name_or_description_access_level", EmitDefaultValue = false)]
        public EditTeamNameOrDescriptionAccessLevelEnum? EditTeamNameOrDescriptionAccessLevel { get; set; }

        /// <summary>
        /// Returns false as EditTeamNameOrDescriptionAccessLevel should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEditTeamNameOrDescriptionAccessLevel()
        {
            return false;
        }
        /// <summary>
        /// Controls who can edit team visibility and trash teams 
        /// </summary>
        /// <value>Controls who can edit team visibility and trash teams </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EditTeamVisibilityOrTrashTeamAccessLevelEnum
        {
            /// <summary>
            /// Enum AllTeamMembers for value: all_team_members
            /// </summary>
            [EnumMember(Value = "all_team_members")]
            AllTeamMembers = 1,

            /// <summary>
            /// Enum OnlyTeamAdmins for value: only_team_admins
            /// </summary>
            [EnumMember(Value = "only_team_admins")]
            OnlyTeamAdmins = 2
        }


        /// <summary>
        /// Controls who can edit team visibility and trash teams 
        /// </summary>
        /// <value>Controls who can edit team visibility and trash teams </value>
        [DataMember(Name = "edit_team_visibility_or_trash_team_access_level", EmitDefaultValue = false)]
        public EditTeamVisibilityOrTrashTeamAccessLevelEnum? EditTeamVisibilityOrTrashTeamAccessLevel { get; set; }

        /// <summary>
        /// Returns false as EditTeamVisibilityOrTrashTeamAccessLevel should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEditTeamVisibilityOrTrashTeamAccessLevel()
        {
            return false;
        }
        /// <summary>
        /// Controls who can accept or deny member invites for a given team 
        /// </summary>
        /// <value>Controls who can accept or deny member invites for a given team </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MemberInviteManagementAccessLevelEnum
        {
            /// <summary>
            /// Enum AllTeamMembers for value: all_team_members
            /// </summary>
            [EnumMember(Value = "all_team_members")]
            AllTeamMembers = 1,

            /// <summary>
            /// Enum OnlyTeamAdmins for value: only_team_admins
            /// </summary>
            [EnumMember(Value = "only_team_admins")]
            OnlyTeamAdmins = 2
        }


        /// <summary>
        /// Controls who can accept or deny member invites for a given team 
        /// </summary>
        /// <value>Controls who can accept or deny member invites for a given team </value>
        [DataMember(Name = "member_invite_management_access_level", EmitDefaultValue = false)]
        public MemberInviteManagementAccessLevelEnum? MemberInviteManagementAccessLevel { get; set; }

        /// <summary>
        /// Returns false as MemberInviteManagementAccessLevel should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMemberInviteManagementAccessLevel()
        {
            return false;
        }
        /// <summary>
        /// Controls who can accept or deny guest invites for a given team 
        /// </summary>
        /// <value>Controls who can accept or deny guest invites for a given team </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GuestInviteManagementAccessLevelEnum
        {
            /// <summary>
            /// Enum AllTeamMembers for value: all_team_members
            /// </summary>
            [EnumMember(Value = "all_team_members")]
            AllTeamMembers = 1,

            /// <summary>
            /// Enum OnlyTeamAdmins for value: only_team_admins
            /// </summary>
            [EnumMember(Value = "only_team_admins")]
            OnlyTeamAdmins = 2
        }


        /// <summary>
        /// Controls who can accept or deny guest invites for a given team 
        /// </summary>
        /// <value>Controls who can accept or deny guest invites for a given team </value>
        [DataMember(Name = "guest_invite_management_access_level", EmitDefaultValue = false)]
        public GuestInviteManagementAccessLevelEnum? GuestInviteManagementAccessLevel { get; set; }

        /// <summary>
        /// Returns false as GuestInviteManagementAccessLevel should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGuestInviteManagementAccessLevel()
        {
            return false;
        }
        /// <summary>
        /// Controls who can accept or deny join team requests for a Membership by Request team 
        /// </summary>
        /// <value>Controls who can accept or deny join team requests for a Membership by Request team </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum JoinRequestManagementAccessLevelEnum
        {
            /// <summary>
            /// Enum AllTeamMembers for value: all_team_members
            /// </summary>
            [EnumMember(Value = "all_team_members")]
            AllTeamMembers = 1,

            /// <summary>
            /// Enum OnlyTeamAdmins for value: only_team_admins
            /// </summary>
            [EnumMember(Value = "only_team_admins")]
            OnlyTeamAdmins = 2
        }


        /// <summary>
        /// Controls who can accept or deny join team requests for a Membership by Request team 
        /// </summary>
        /// <value>Controls who can accept or deny join team requests for a Membership by Request team </value>
        [DataMember(Name = "join_request_management_access_level", EmitDefaultValue = false)]
        public JoinRequestManagementAccessLevelEnum? JoinRequestManagementAccessLevel { get; set; }

        /// <summary>
        /// Returns false as JoinRequestManagementAccessLevel should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeJoinRequestManagementAccessLevel()
        {
            return false;
        }
        /// <summary>
        /// Controls who can remove team members 
        /// </summary>
        /// <value>Controls who can remove team members </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TeamMemberRemovalAccessLevelEnum
        {
            /// <summary>
            /// Enum AllTeamMembers for value: all_team_members
            /// </summary>
            [EnumMember(Value = "all_team_members")]
            AllTeamMembers = 1,

            /// <summary>
            /// Enum OnlyTeamAdmins for value: only_team_admins
            /// </summary>
            [EnumMember(Value = "only_team_admins")]
            OnlyTeamAdmins = 2
        }


        /// <summary>
        /// Controls who can remove team members 
        /// </summary>
        /// <value>Controls who can remove team members </value>
        [DataMember(Name = "team_member_removal_access_level", EmitDefaultValue = false)]
        public TeamMemberRemovalAccessLevelEnum? TeamMemberRemovalAccessLevel { get; set; }

        /// <summary>
        /// Returns false as TeamMemberRemovalAccessLevel should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTeamMemberRemovalAccessLevel()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamRequest" /> class.
        /// </summary>
        /// <param name="name">The name of the team..</param>
        /// <param name="description">The description of the team. .</param>
        /// <param name="htmlDescription">The description of the team with formatting as HTML. .</param>
        /// <param name="organization">The organization/workspace the team belongs to. This must be the same organization you are in and cannot be changed once set. .</param>
        /// <param name="visibility">The visibility of the team to users in the same organization .</param>
        public TeamRequest(string name = default(string), string description = default(string), string htmlDescription = default(string), string organization = default(string), VisibilityEnum? visibility = default(VisibilityEnum?))
        {
            this.Name = name;
            this.Description = description;
            this.HtmlDescription = htmlDescription;
            this.Organization = organization;
            this.Visibility = visibility;
        }

        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name = "gid", EmitDefaultValue = false)]
        public string Gid { get; private set; }

        /// <summary>
        /// Returns false as Gid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGid()
        {
            return false;
        }
        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name = "resource_type", EmitDefaultValue = false)]
        public string ResourceType { get; private set; }

        /// <summary>
        /// Returns false as ResourceType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResourceType()
        {
            return false;
        }
        /// <summary>
        /// The name of the team.
        /// </summary>
        /// <value>The name of the team.</value>
        /// <example>Marketing</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the team. 
        /// </summary>
        /// <value>The description of the team. </value>
        /// <example>All developers should be members of this team.</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The description of the team with formatting as HTML. 
        /// </summary>
        /// <value>The description of the team with formatting as HTML. </value>
        /// <example>&lt;body&gt;&lt;em&gt;All&lt;/em&gt; developers should be members of this team.&lt;/body&gt;</example>
        [DataMember(Name = "html_description", EmitDefaultValue = false)]
        public string HtmlDescription { get; set; }

        /// <summary>
        /// The organization/workspace the team belongs to. This must be the same organization you are in and cannot be changed once set. 
        /// </summary>
        /// <value>The organization/workspace the team belongs to. This must be the same organization you are in and cannot be changed once set. </value>
        /// <example>123456789</example>
        [DataMember(Name = "organization", EmitDefaultValue = false)]
        public string Organization { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TeamRequest {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HtmlDescription: ").Append(HtmlDescription).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  EditTeamNameOrDescriptionAccessLevel: ").Append(EditTeamNameOrDescriptionAccessLevel).Append("\n");
            sb.Append("  EditTeamVisibilityOrTrashTeamAccessLevel: ").Append(EditTeamVisibilityOrTrashTeamAccessLevel).Append("\n");
            sb.Append("  MemberInviteManagementAccessLevel: ").Append(MemberInviteManagementAccessLevel).Append("\n");
            sb.Append("  GuestInviteManagementAccessLevel: ").Append(GuestInviteManagementAccessLevel).Append("\n");
            sb.Append("  JoinRequestManagementAccessLevel: ").Append(JoinRequestManagementAccessLevel).Append("\n");
            sb.Append("  TeamMemberRemovalAccessLevel: ").Append(TeamMemberRemovalAccessLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
