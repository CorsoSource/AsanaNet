/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// TaskAddProjectRequest
    /// </summary>
    [DataContract(Name = "TaskAddProjectRequest")]
    public partial class TaskAddProjectRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskAddProjectRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaskAddProjectRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskAddProjectRequest" /> class.
        /// </summary>
        /// <param name="project">The project to add the task to. (required).</param>
        /// <param name="insertAfter">A task in the project to insert the task after, or &#x60;null&#x60; to insert at the beginning of the list..</param>
        /// <param name="insertBefore">A task in the project to insert the task before, or &#x60;null&#x60; to insert at the end of the list..</param>
        /// <param name="section">A section in the project to insert the task into. The task will be inserted at the bottom of the section..</param>
        public TaskAddProjectRequest(string project = default(string), string insertAfter = default(string), string insertBefore = default(string), string section = default(string))
        {
            // to ensure "project" is required (not null)
            if (project == null)
            {
                throw new ArgumentNullException("project is a required property for TaskAddProjectRequest and cannot be null");
            }
            this.Project = project;
            this.InsertAfter = insertAfter;
            this.InsertBefore = insertBefore;
            this.Section = section;
        }

        /// <summary>
        /// The project to add the task to.
        /// </summary>
        /// <value>The project to add the task to.</value>
        /// <example>13579</example>
        [DataMember(Name = "project", IsRequired = true, EmitDefaultValue = true)]
        public string Project { get; set; }

        /// <summary>
        /// A task in the project to insert the task after, or &#x60;null&#x60; to insert at the beginning of the list.
        /// </summary>
        /// <value>A task in the project to insert the task after, or &#x60;null&#x60; to insert at the beginning of the list.</value>
        /// <example>124816</example>
        [DataMember(Name = "insert_after", EmitDefaultValue = true)]
        public string InsertAfter { get; set; }

        /// <summary>
        /// A task in the project to insert the task before, or &#x60;null&#x60; to insert at the end of the list.
        /// </summary>
        /// <value>A task in the project to insert the task before, or &#x60;null&#x60; to insert at the end of the list.</value>
        /// <example>432134</example>
        [DataMember(Name = "insert_before", EmitDefaultValue = true)]
        public string InsertBefore { get; set; }

        /// <summary>
        /// A section in the project to insert the task into. The task will be inserted at the bottom of the section.
        /// </summary>
        /// <value>A section in the project to insert the task into. The task will be inserted at the bottom of the section.</value>
        /// <example>987654</example>
        [DataMember(Name = "section", EmitDefaultValue = true)]
        public string Section { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaskAddProjectRequest {\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  InsertAfter: ").Append(InsertAfter).Append("\n");
            sb.Append("  InsertBefore: ").Append(InsertBefore).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
