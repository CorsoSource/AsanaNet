/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// CustomFieldCompact
    /// </summary>
    [DataContract(Name = "CustomFieldCompact")]
    public partial class CustomFieldCompact : IValidatableObject
    {
        /// <summary>
        /// The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>The type of the custom field. Must be one of the given values. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceSubtypeEnum
        {
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 1,

            /// <summary>
            /// Enum Enum for value: enum
            /// </summary>
            [EnumMember(Value = "enum")]
            Enum = 2,

            /// <summary>
            /// Enum MultiEnum for value: multi_enum
            /// </summary>
            [EnumMember(Value = "multi_enum")]
            MultiEnum = 3,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 4,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 5,

            /// <summary>
            /// Enum People for value: people
            /// </summary>
            [EnumMember(Value = "people")]
            People = 6
        }


        /// <summary>
        /// The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>The type of the custom field. Must be one of the given values. </value>
        /// <example>text</example>
        [DataMember(Name = "resource_subtype", EmitDefaultValue = false)]
        public ResourceSubtypeEnum? ResourceSubtype { get; set; }

        /// <summary>
        /// Returns false as ResourceSubtype should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResourceSubtype()
        {
            return false;
        }
        /// <summary>
        /// *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>*Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 1,

            /// <summary>
            /// Enum Enum for value: enum
            /// </summary>
            [EnumMember(Value = "enum")]
            Enum = 2,

            /// <summary>
            /// Enum MultiEnum for value: multi_enum
            /// </summary>
            [EnumMember(Value = "multi_enum")]
            MultiEnum = 3,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 4,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 5,

            /// <summary>
            /// Enum People for value: people
            /// </summary>
            [EnumMember(Value = "people")]
            People = 6
        }


        /// <summary>
        /// *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>*Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. </value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return false;
        }
        /// <summary>
        /// This field tells the type of the custom field.
        /// </summary>
        /// <value>This field tells the type of the custom field.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RepresentationTypeEnum
        {
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 1,

            /// <summary>
            /// Enum Enum for value: enum
            /// </summary>
            [EnumMember(Value = "enum")]
            Enum = 2,

            /// <summary>
            /// Enum MultiEnum for value: multi_enum
            /// </summary>
            [EnumMember(Value = "multi_enum")]
            MultiEnum = 3,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 4,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 5,

            /// <summary>
            /// Enum People for value: people
            /// </summary>
            [EnumMember(Value = "people")]
            People = 6,

            /// <summary>
            /// Enum Formula for value: formula
            /// </summary>
            [EnumMember(Value = "formula")]
            Formula = 7,

            /// <summary>
            /// Enum CustomId for value: custom_id
            /// </summary>
            [EnumMember(Value = "custom_id")]
            CustomId = 8
        }


        /// <summary>
        /// This field tells the type of the custom field.
        /// </summary>
        /// <value>This field tells the type of the custom field.</value>
        /// <example>number</example>
        [DataMember(Name = "representation_type", EmitDefaultValue = false)]
        public RepresentationTypeEnum? RepresentationType { get; set; }

        /// <summary>
        /// Returns false as RepresentationType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRepresentationType()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldCompact" /> class.
        /// </summary>
        /// <param name="name">The name of the custom field..</param>
        /// <param name="enumOptions">*Conditional*. Only relevant for custom fields of type &#x60;enum&#x60;. This array specifies the possible values which an &#x60;enum&#x60; custom field can adopt. To modify the enum options, refer to [working with enum options](/reference/createenumoptionforcustomfield)..</param>
        /// <param name="idPrefix">This field is the unique custom ID string for the custom field..</param>
        /// <param name="isFormulaField">*Conditional*. This flag describes whether a custom field is a formula custom field..</param>
        /// <param name="dateValue">dateValue.</param>
        /// <param name="enumValue">enumValue.</param>
        /// <param name="multiEnumValues">*Conditional*. Only relevant for custom fields of type &#x60;multi_enum&#x60;. This object is the chosen values of a &#x60;multi_enum&#x60; custom field..</param>
        /// <param name="numberValue">*Conditional*. This number is the value of a &#x60;number&#x60; custom field..</param>
        /// <param name="textValue">*Conditional*. This string is the value of a &#x60;text&#x60; custom field..</param>
        public CustomFieldCompact(string name = default(string), List<EnumOption> enumOptions = default(List<EnumOption>), string idPrefix = default(string), bool isFormulaField = default(bool), CustomFieldCompactAllOfDateValue dateValue = default(CustomFieldCompactAllOfDateValue), CustomFieldCompactAllOfEnumValue enumValue = default(CustomFieldCompactAllOfEnumValue), List<EnumOption> multiEnumValues = default(List<EnumOption>), decimal? numberValue = default(decimal?), string textValue = default(string))
        {
            this.Name = name;
            this.EnumOptions = enumOptions;
            this.IdPrefix = idPrefix;
            this.IsFormulaField = isFormulaField;
            this.DateValue = dateValue;
            this.EnumValue = enumValue;
            this.MultiEnumValues = multiEnumValues;
            this.NumberValue = numberValue;
            this.TextValue = textValue;
        }

        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name = "gid", EmitDefaultValue = false)]
        public string Gid { get; private set; }

        /// <summary>
        /// Returns false as Gid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGid()
        {
            return false;
        }
        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name = "resource_type", EmitDefaultValue = false)]
        public string ResourceType { get; private set; }

        /// <summary>
        /// Returns false as ResourceType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResourceType()
        {
            return false;
        }
        /// <summary>
        /// The name of the custom field.
        /// </summary>
        /// <value>The name of the custom field.</value>
        /// <example>Status</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// *Conditional*. Only relevant for custom fields of type &#x60;enum&#x60;. This array specifies the possible values which an &#x60;enum&#x60; custom field can adopt. To modify the enum options, refer to [working with enum options](/reference/createenumoptionforcustomfield).
        /// </summary>
        /// <value>*Conditional*. Only relevant for custom fields of type &#x60;enum&#x60;. This array specifies the possible values which an &#x60;enum&#x60; custom field can adopt. To modify the enum options, refer to [working with enum options](/reference/createenumoptionforcustomfield).</value>
        [DataMember(Name = "enum_options", EmitDefaultValue = false)]
        public List<EnumOption> EnumOptions { get; set; }

        /// <summary>
        /// *Conditional*. Determines if the custom field is enabled or not.
        /// </summary>
        /// <value>*Conditional*. Determines if the custom field is enabled or not.</value>
        /// <example>true</example>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; private set; }

        /// <summary>
        /// Returns false as Enabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEnabled()
        {
            return false;
        }
        /// <summary>
        /// This field is the unique custom ID string for the custom field.
        /// </summary>
        /// <value>This field is the unique custom ID string for the custom field.</value>
        /// <example>ID</example>
        [DataMember(Name = "id_prefix", EmitDefaultValue = true)]
        public string IdPrefix { get; set; }

        /// <summary>
        /// *Conditional*. This flag describes whether a custom field is a formula custom field.
        /// </summary>
        /// <value>*Conditional*. This flag describes whether a custom field is a formula custom field.</value>
        /// <example>false</example>
        [DataMember(Name = "is_formula_field", EmitDefaultValue = true)]
        public bool IsFormulaField { get; set; }

        /// <summary>
        /// Gets or Sets DateValue
        /// </summary>
        [DataMember(Name = "date_value", EmitDefaultValue = true)]
        public CustomFieldCompactAllOfDateValue DateValue { get; set; }

        /// <summary>
        /// Gets or Sets EnumValue
        /// </summary>
        [DataMember(Name = "enum_value", EmitDefaultValue = false)]
        public CustomFieldCompactAllOfEnumValue EnumValue { get; set; }

        /// <summary>
        /// *Conditional*. Only relevant for custom fields of type &#x60;multi_enum&#x60;. This object is the chosen values of a &#x60;multi_enum&#x60; custom field.
        /// </summary>
        /// <value>*Conditional*. Only relevant for custom fields of type &#x60;multi_enum&#x60;. This object is the chosen values of a &#x60;multi_enum&#x60; custom field.</value>
        [DataMember(Name = "multi_enum_values", EmitDefaultValue = false)]
        public List<EnumOption> MultiEnumValues { get; set; }

        /// <summary>
        /// *Conditional*. This number is the value of a &#x60;number&#x60; custom field.
        /// </summary>
        /// <value>*Conditional*. This number is the value of a &#x60;number&#x60; custom field.</value>
        /// <example>5.2</example>
        [DataMember(Name = "number_value", EmitDefaultValue = true)]
        public decimal? NumberValue { get; set; }

        /// <summary>
        /// *Conditional*. This string is the value of a &#x60;text&#x60; custom field.
        /// </summary>
        /// <value>*Conditional*. This string is the value of a &#x60;text&#x60; custom field.</value>
        /// <example>Some Value</example>
        [DataMember(Name = "text_value", EmitDefaultValue = true)]
        public string TextValue { get; set; }

        /// <summary>
        /// A string representation for the value of the custom field. Integrations that don&#39;t require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.
        /// </summary>
        /// <value>A string representation for the value of the custom field. Integrations that don&#39;t require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.</value>
        /// <example>blue</example>
        [DataMember(Name = "display_value", EmitDefaultValue = true)]
        public string DisplayValue { get; private set; }

        /// <summary>
        /// Returns false as DisplayValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDisplayValue()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomFieldCompact {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EnumOptions: ").Append(EnumOptions).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  RepresentationType: ").Append(RepresentationType).Append("\n");
            sb.Append("  IdPrefix: ").Append(IdPrefix).Append("\n");
            sb.Append("  IsFormulaField: ").Append(IsFormulaField).Append("\n");
            sb.Append("  DateValue: ").Append(DateValue).Append("\n");
            sb.Append("  EnumValue: ").Append(EnumValue).Append("\n");
            sb.Append("  MultiEnumValues: ").Append(MultiEnumValues).Append("\n");
            sb.Append("  NumberValue: ").Append(NumberValue).Append("\n");
            sb.Append("  TextValue: ").Append(TextValue).Append("\n");
            sb.Append("  DisplayValue: ").Append(DisplayValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
