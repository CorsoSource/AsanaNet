/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// EnumOptionRequest
    /// </summary>
    [DataContract(Name = "EnumOptionRequest")]
    public partial class EnumOptionRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnumOptionRequest" /> class.
        /// </summary>
        /// <param name="name">The name of the enum option..</param>
        /// <param name="enabled">Whether or not the enum option is a selectable value for the custom field..</param>
        /// <param name="color">The color of the enum option. Defaults to ‘none’..</param>
        /// <param name="insertBefore">An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option..</param>
        /// <param name="insertAfter">An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option..</param>
        public EnumOptionRequest(string name = default(string), bool enabled = default(bool), string color = default(string), string insertBefore = default(string), string insertAfter = default(string))
        {
            this.Name = name;
            this.Enabled = enabled;
            this.Color = color;
            this.InsertBefore = insertBefore;
            this.InsertAfter = insertAfter;
        }

        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name = "gid", EmitDefaultValue = false)]
        public string Gid { get; private set; }

        /// <summary>
        /// Returns false as Gid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGid()
        {
            return false;
        }
        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name = "resource_type", EmitDefaultValue = false)]
        public string ResourceType { get; private set; }

        /// <summary>
        /// Returns false as ResourceType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResourceType()
        {
            return false;
        }
        /// <summary>
        /// The name of the enum option.
        /// </summary>
        /// <value>The name of the enum option.</value>
        /// <example>Low</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Whether or not the enum option is a selectable value for the custom field.
        /// </summary>
        /// <value>Whether or not the enum option is a selectable value for the custom field.</value>
        /// <example>true</example>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// The color of the enum option. Defaults to ‘none’.
        /// </summary>
        /// <value>The color of the enum option. Defaults to ‘none’.</value>
        /// <example>blue</example>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public string Color { get; set; }

        /// <summary>
        /// An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
        /// </summary>
        /// <value>An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.</value>
        /// <example>12345</example>
        [DataMember(Name = "insert_before", EmitDefaultValue = false)]
        public string InsertBefore { get; set; }

        /// <summary>
        /// An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
        /// </summary>
        /// <value>An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.</value>
        /// <example>12345</example>
        [DataMember(Name = "insert_after", EmitDefaultValue = false)]
        public string InsertAfter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EnumOptionRequest {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  InsertBefore: ").Append(InsertBefore).Append("\n");
            sb.Append("  InsertAfter: ").Append(InsertAfter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
