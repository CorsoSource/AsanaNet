/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// ProjectTemplateInstantiateProjectRequest
    /// </summary>
    [DataContract(Name = "ProjectTemplateInstantiateProjectRequest")]
    public partial class ProjectTemplateInstantiateProjectRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectTemplateInstantiateProjectRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectTemplateInstantiateProjectRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectTemplateInstantiateProjectRequest" /> class.
        /// </summary>
        /// <param name="name">The name of the new project. (required).</param>
        /// <param name="team">*Optional*. Sets the team of the new project. If the project template exists in an _organization_, you may specify a value for &#x60;team&#x60;. If no value is provided then it defaults to the same team as the project template..</param>
        /// <param name="varPublic">Sets the project to public to its team..</param>
        /// <param name="isStrict">*Optional*. If set to &#x60;true&#x60;, the endpoint returns an \&quot;Unprocessable Entity\&quot; error if you fail to provide a calendar date value for any date variable. If set to &#x60;false&#x60;, a default date is used for each unfulfilled date variable (e.g., the current date is used as the Start Date of a project)..</param>
        /// <param name="requestedDates">Array of mappings of date variables to calendar dates..</param>
        /// <param name="requestedRoles">Array of mappings of template roles to user ids.</param>
        public ProjectTemplateInstantiateProjectRequest(string name = default(string), string team = default(string), bool varPublic = default(bool), bool isStrict = default(bool), List<DateVariableRequest> requestedDates = default(List<DateVariableRequest>), List<RequestedRoleRequest> requestedRoles = default(List<RequestedRoleRequest>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ProjectTemplateInstantiateProjectRequest and cannot be null");
            }
            this.Name = name;
            this.Team = team;
            this.VarPublic = varPublic;
            this.IsStrict = isStrict;
            this.RequestedDates = requestedDates;
            this.RequestedRoles = requestedRoles;
        }

        /// <summary>
        /// The name of the new project.
        /// </summary>
        /// <value>The name of the new project.</value>
        /// <example>New Project Name</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// *Optional*. Sets the team of the new project. If the project template exists in an _organization_, you may specify a value for &#x60;team&#x60;. If no value is provided then it defaults to the same team as the project template.
        /// </summary>
        /// <value>*Optional*. Sets the team of the new project. If the project template exists in an _organization_, you may specify a value for &#x60;team&#x60;. If no value is provided then it defaults to the same team as the project template.</value>
        /// <example>12345</example>
        [DataMember(Name = "team", EmitDefaultValue = false)]
        public string Team { get; set; }

        /// <summary>
        /// Sets the project to public to its team.
        /// </summary>
        /// <value>Sets the project to public to its team.</value>
        /// <example>true</example>
        [DataMember(Name = "public", EmitDefaultValue = true)]
        public bool VarPublic { get; set; }

        /// <summary>
        /// *Optional*. If set to &#x60;true&#x60;, the endpoint returns an \&quot;Unprocessable Entity\&quot; error if you fail to provide a calendar date value for any date variable. If set to &#x60;false&#x60;, a default date is used for each unfulfilled date variable (e.g., the current date is used as the Start Date of a project).
        /// </summary>
        /// <value>*Optional*. If set to &#x60;true&#x60;, the endpoint returns an \&quot;Unprocessable Entity\&quot; error if you fail to provide a calendar date value for any date variable. If set to &#x60;false&#x60;, a default date is used for each unfulfilled date variable (e.g., the current date is used as the Start Date of a project).</value>
        /// <example>true</example>
        [DataMember(Name = "is_strict", EmitDefaultValue = true)]
        public bool IsStrict { get; set; }

        /// <summary>
        /// Array of mappings of date variables to calendar dates.
        /// </summary>
        /// <value>Array of mappings of date variables to calendar dates.</value>
        [DataMember(Name = "requested_dates", EmitDefaultValue = false)]
        public List<DateVariableRequest> RequestedDates { get; set; }

        /// <summary>
        /// Array of mappings of template roles to user ids
        /// </summary>
        /// <value>Array of mappings of template roles to user ids</value>
        [DataMember(Name = "requested_roles", EmitDefaultValue = false)]
        public List<RequestedRoleRequest> RequestedRoles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProjectTemplateInstantiateProjectRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  VarPublic: ").Append(VarPublic).Append("\n");
            sb.Append("  IsStrict: ").Append(IsStrict).Append("\n");
            sb.Append("  RequestedDates: ").Append(RequestedDates).Append("\n");
            sb.Append("  RequestedRoles: ").Append(RequestedRoles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
