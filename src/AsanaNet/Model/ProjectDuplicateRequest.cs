/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// ProjectDuplicateRequest
    /// </summary>
    [DataContract(Name = "ProjectDuplicateRequest")]
    public partial class ProjectDuplicateRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectDuplicateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectDuplicateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectDuplicateRequest" /> class.
        /// </summary>
        /// <param name="name">The name of the new project. (required).</param>
        /// <param name="team">Sets the team of the new project. If team is not defined, the new project will be in the same team as the the original project..</param>
        /// <param name="include">A comma-separated list of elements that will be duplicated to the new project. Tasks are always included. ##### Fields - allocations - forms - members - notes - task_assignee - task_attachments - task_dates - task_dependencies - task_followers - task_notes - task_projects - task_subtasks - task_tags.</param>
        /// <param name="scheduleDates">scheduleDates.</param>
        public ProjectDuplicateRequest(string name = default(string), string team = default(string), string include = default(string), ProjectDuplicateRequestScheduleDates scheduleDates = default(ProjectDuplicateRequestScheduleDates))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ProjectDuplicateRequest and cannot be null");
            }
            this.Name = name;
            this.Team = team;
            this.Include = include;
            this.ScheduleDates = scheduleDates;
        }

        /// <summary>
        /// The name of the new project.
        /// </summary>
        /// <value>The name of the new project.</value>
        /// <example>New Project Name</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Sets the team of the new project. If team is not defined, the new project will be in the same team as the the original project.
        /// </summary>
        /// <value>Sets the team of the new project. If team is not defined, the new project will be in the same team as the the original project.</value>
        /// <example>12345</example>
        [DataMember(Name = "team", EmitDefaultValue = false)]
        public string Team { get; set; }

        /// <summary>
        /// A comma-separated list of elements that will be duplicated to the new project. Tasks are always included. ##### Fields - allocations - forms - members - notes - task_assignee - task_attachments - task_dates - task_dependencies - task_followers - task_notes - task_projects - task_subtasks - task_tags
        /// </summary>
        /// <value>A comma-separated list of elements that will be duplicated to the new project. Tasks are always included. ##### Fields - allocations - forms - members - notes - task_assignee - task_attachments - task_dates - task_dependencies - task_followers - task_notes - task_projects - task_subtasks - task_tags</value>
        /// <example>[&quot;allocations,members,notes,forms,task_notes,task_assignee,task_subtasks,task_attachments,task_dates,task_dependencies,task_followers,task_tags,task_projects&quot;]</example>
        [DataMember(Name = "include", EmitDefaultValue = false)]
        public string Include { get; set; }

        /// <summary>
        /// Gets or Sets ScheduleDates
        /// </summary>
        [DataMember(Name = "schedule_dates", EmitDefaultValue = false)]
        public ProjectDuplicateRequestScheduleDates ScheduleDates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProjectDuplicateRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  Include: ").Append(Include).Append("\n");
            sb.Append("  ScheduleDates: ").Append(ScheduleDates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Include != null) {
                // Include (string) pattern
                Regex regexInclude = new Regex(@"([allocations|members|notes|forms|task_notes|task_assignee|task_subtasks|task_attachments|task_dates|task_dependencies|task_followers|task_tags|task_projects])(,\1)*", RegexOptions.CultureInvariant);
                if (!regexInclude.Match(this.Include).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Include, must match a pattern of " + regexInclude, new [] { "Include" });
                }
            }

            yield break;
        }
    }

}
