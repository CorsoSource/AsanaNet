/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AsanaNet.Client.OpenAPIDateConverter;

namespace AsanaNet.Model
{
    /// <summary>
    /// The primary object that was affected by this event.
    /// </summary>
    [DataContract(Name = "AuditLogEventResource")]
    public partial class AuditLogEventResource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogEventResource" /> class.
        /// </summary>
        /// <param name="resourceType">The type of resource..</param>
        /// <param name="resourceSubtype">The subtype of resource. Most resources will not have a subtype..</param>
        /// <param name="gid">Globally unique identifier of the resource..</param>
        /// <param name="name">The name of the resource..</param>
        /// <param name="email">The email of the resource, if applicable..</param>
        public AuditLogEventResource(string resourceType = default(string), string resourceSubtype = default(string), string gid = default(string), string name = default(string), string email = default(string))
        {
            this.ResourceType = resourceType;
            this.ResourceSubtype = resourceSubtype;
            this.Gid = gid;
            this.Name = name;
            this.Email = email;
        }

        /// <summary>
        /// The type of resource.
        /// </summary>
        /// <value>The type of resource.</value>
        /// <example>task</example>
        [DataMember(Name = "resource_type", EmitDefaultValue = false)]
        public string ResourceType { get; set; }

        /// <summary>
        /// The subtype of resource. Most resources will not have a subtype.
        /// </summary>
        /// <value>The subtype of resource. Most resources will not have a subtype.</value>
        /// <example>milestone</example>
        [DataMember(Name = "resource_subtype", EmitDefaultValue = false)]
        public string ResourceSubtype { get; set; }

        /// <summary>
        /// Globally unique identifier of the resource.
        /// </summary>
        /// <value>Globally unique identifier of the resource.</value>
        /// <example>1111</example>
        [DataMember(Name = "gid", EmitDefaultValue = false)]
        public string Gid { get; set; }

        /// <summary>
        /// The name of the resource.
        /// </summary>
        /// <value>The name of the resource.</value>
        /// <example>Example Task</example>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The email of the resource, if applicable.
        /// </summary>
        /// <value>The email of the resource, if applicable.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuditLogEventResource {\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
