/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using AsanaNet.Client;
using AsanaNet.Client.Auth;
using AsanaNet.Model;

namespace AsanaNet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGoalRelationshipsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a supporting goal relationship
        /// </summary>
        /// <remarks>
        /// Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addSupportingRelationshipRequest">The supporting resource to be added to the goal</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetGoalRelationship200Response</returns>
        GetGoalRelationship200Response AddSupportingRelationship(string goalGid, AddSupportingRelationshipRequest addSupportingRelationshipRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Add a supporting goal relationship
        /// </summary>
        /// <remarks>
        /// Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addSupportingRelationshipRequest">The supporting resource to be added to the goal</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetGoalRelationship200Response</returns>
        ApiResponse<GetGoalRelationship200Response> AddSupportingRelationshipWithHttpInfo(string goalGid, AddSupportingRelationshipRequest addSupportingRelationshipRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Get a goal relationship
        /// </summary>
        /// <remarks>
        /// Returns the complete updated goal relationship record for a single goal relationship.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRelationshipGid">Globally unique identifier for the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetGoalRelationship200Response</returns>
        GetGoalRelationship200Response GetGoalRelationship(string goalRelationshipGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Get a goal relationship
        /// </summary>
        /// <remarks>
        /// Returns the complete updated goal relationship record for a single goal relationship.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRelationshipGid">Globally unique identifier for the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetGoalRelationship200Response</returns>
        ApiResponse<GetGoalRelationship200Response> GetGoalRelationshipWithHttpInfo(string goalRelationshipGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Get goal relationships
        /// </summary>
        /// <remarks>
        /// Returns compact goal relationship records.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportedGoal">Globally unique identifier for the supported goal in the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="resourceSubtype">If provided, filter to goal relationships with a given resource_subtype. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetGoalRelationships200Response</returns>
        GetGoalRelationships200Response GetGoalRelationships(string supportedGoal, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? resourceSubtype = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Get goal relationships
        /// </summary>
        /// <remarks>
        /// Returns compact goal relationship records.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportedGoal">Globally unique identifier for the supported goal in the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="resourceSubtype">If provided, filter to goal relationships with a given resource_subtype. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetGoalRelationships200Response</returns>
        ApiResponse<GetGoalRelationships200Response> GetGoalRelationshipsWithHttpInfo(string supportedGoal, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? resourceSubtype = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Removes a supporting goal relationship
        /// </summary>
        /// <remarks>
        /// Removes a goal relationship for a given parent goal.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="removeSupportingRelationshipRequest">The supporting resource to be removed from the goal</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteAttachment200Response</returns>
        DeleteAttachment200Response RemoveSupportingRelationship(string goalGid, RemoveSupportingRelationshipRequest removeSupportingRelationshipRequest, bool? optPretty = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Removes a supporting goal relationship
        /// </summary>
        /// <remarks>
        /// Removes a goal relationship for a given parent goal.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="removeSupportingRelationshipRequest">The supporting resource to be removed from the goal</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteAttachment200Response</returns>
        ApiResponse<DeleteAttachment200Response> RemoveSupportingRelationshipWithHttpInfo(string goalGid, RemoveSupportingRelationshipRequest removeSupportingRelationshipRequest, bool? optPretty = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Update a goal relationship
        /// </summary>
        /// <remarks>
        /// An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRelationshipGid">Globally unique identifier for the goal relationship.</param>
        /// <param name="updateGoalRelationshipRequest">The updated fields for the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetGoalRelationship200Response</returns>
        GetGoalRelationship200Response UpdateGoalRelationship(string goalRelationshipGid, UpdateGoalRelationshipRequest updateGoalRelationshipRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Update a goal relationship
        /// </summary>
        /// <remarks>
        /// An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRelationshipGid">Globally unique identifier for the goal relationship.</param>
        /// <param name="updateGoalRelationshipRequest">The updated fields for the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetGoalRelationship200Response</returns>
        ApiResponse<GetGoalRelationship200Response> UpdateGoalRelationshipWithHttpInfo(string goalRelationshipGid, UpdateGoalRelationshipRequest updateGoalRelationshipRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGoalRelationshipsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a supporting goal relationship
        /// </summary>
        /// <remarks>
        /// Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addSupportingRelationshipRequest">The supporting resource to be added to the goal</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGoalRelationship200Response</returns>
        System.Threading.Tasks.Task<GetGoalRelationship200Response> AddSupportingRelationshipAsync(string goalGid, AddSupportingRelationshipRequest addSupportingRelationshipRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a supporting goal relationship
        /// </summary>
        /// <remarks>
        /// Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addSupportingRelationshipRequest">The supporting resource to be added to the goal</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGoalRelationship200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGoalRelationship200Response>> AddSupportingRelationshipWithHttpInfoAsync(string goalGid, AddSupportingRelationshipRequest addSupportingRelationshipRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a goal relationship
        /// </summary>
        /// <remarks>
        /// Returns the complete updated goal relationship record for a single goal relationship.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRelationshipGid">Globally unique identifier for the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGoalRelationship200Response</returns>
        System.Threading.Tasks.Task<GetGoalRelationship200Response> GetGoalRelationshipAsync(string goalRelationshipGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a goal relationship
        /// </summary>
        /// <remarks>
        /// Returns the complete updated goal relationship record for a single goal relationship.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRelationshipGid">Globally unique identifier for the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGoalRelationship200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGoalRelationship200Response>> GetGoalRelationshipWithHttpInfoAsync(string goalRelationshipGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get goal relationships
        /// </summary>
        /// <remarks>
        /// Returns compact goal relationship records.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportedGoal">Globally unique identifier for the supported goal in the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="resourceSubtype">If provided, filter to goal relationships with a given resource_subtype. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGoalRelationships200Response</returns>
        System.Threading.Tasks.Task<GetGoalRelationships200Response> GetGoalRelationshipsAsync(string supportedGoal, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? resourceSubtype = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get goal relationships
        /// </summary>
        /// <remarks>
        /// Returns compact goal relationship records.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportedGoal">Globally unique identifier for the supported goal in the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="resourceSubtype">If provided, filter to goal relationships with a given resource_subtype. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGoalRelationships200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGoalRelationships200Response>> GetGoalRelationshipsWithHttpInfoAsync(string supportedGoal, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? resourceSubtype = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes a supporting goal relationship
        /// </summary>
        /// <remarks>
        /// Removes a goal relationship for a given parent goal.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="removeSupportingRelationshipRequest">The supporting resource to be removed from the goal</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAttachment200Response</returns>
        System.Threading.Tasks.Task<DeleteAttachment200Response> RemoveSupportingRelationshipAsync(string goalGid, RemoveSupportingRelationshipRequest removeSupportingRelationshipRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes a supporting goal relationship
        /// </summary>
        /// <remarks>
        /// Removes a goal relationship for a given parent goal.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="removeSupportingRelationshipRequest">The supporting resource to be removed from the goal</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAttachment200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAttachment200Response>> RemoveSupportingRelationshipWithHttpInfoAsync(string goalGid, RemoveSupportingRelationshipRequest removeSupportingRelationshipRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a goal relationship
        /// </summary>
        /// <remarks>
        /// An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRelationshipGid">Globally unique identifier for the goal relationship.</param>
        /// <param name="updateGoalRelationshipRequest">The updated fields for the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGoalRelationship200Response</returns>
        System.Threading.Tasks.Task<GetGoalRelationship200Response> UpdateGoalRelationshipAsync(string goalRelationshipGid, UpdateGoalRelationshipRequest updateGoalRelationshipRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a goal relationship
        /// </summary>
        /// <remarks>
        /// An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRelationshipGid">Globally unique identifier for the goal relationship.</param>
        /// <param name="updateGoalRelationshipRequest">The updated fields for the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGoalRelationship200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGoalRelationship200Response>> UpdateGoalRelationshipWithHttpInfoAsync(string goalRelationshipGid, UpdateGoalRelationshipRequest updateGoalRelationshipRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGoalRelationshipsApi : IGoalRelationshipsApiSync, IGoalRelationshipsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GoalRelationshipsApi : IGoalRelationshipsApi
    {
        private AsanaNet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GoalRelationshipsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GoalRelationshipsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GoalRelationshipsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GoalRelationshipsApi(string basePath)
        {
            this.Configuration = AsanaNet.Client.Configuration.MergeConfigurations(
                AsanaNet.Client.GlobalConfiguration.Instance,
                new AsanaNet.Client.Configuration { BasePath = basePath }
            );
            this.Client = new AsanaNet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AsanaNet.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = AsanaNet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GoalRelationshipsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GoalRelationshipsApi(AsanaNet.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AsanaNet.Client.Configuration.MergeConfigurations(
                AsanaNet.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new AsanaNet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AsanaNet.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = AsanaNet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GoalRelationshipsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GoalRelationshipsApi(AsanaNet.Client.ISynchronousClient client, AsanaNet.Client.IAsynchronousClient asyncClient, AsanaNet.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AsanaNet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AsanaNet.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AsanaNet.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AsanaNet.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AsanaNet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a supporting goal relationship Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addSupportingRelationshipRequest">The supporting resource to be added to the goal</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetGoalRelationship200Response</returns>
        public GetGoalRelationship200Response AddSupportingRelationship(string goalGid, AddSupportingRelationshipRequest addSupportingRelationshipRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<GetGoalRelationship200Response> localVarResponse = AddSupportingRelationshipWithHttpInfo(goalGid, addSupportingRelationshipRequest, optPretty, optFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a supporting goal relationship Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addSupportingRelationshipRequest">The supporting resource to be added to the goal</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetGoalRelationship200Response</returns>
        public AsanaNet.Client.ApiResponse<GetGoalRelationship200Response> AddSupportingRelationshipWithHttpInfo(string goalGid, AddSupportingRelationshipRequest addSupportingRelationshipRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'goalGid' when calling GoalRelationshipsApi->AddSupportingRelationship");
            }

            // verify the required parameter 'addSupportingRelationshipRequest' is set
            if (addSupportingRelationshipRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'addSupportingRelationshipRequest' when calling GoalRelationshipsApi->AddSupportingRelationship");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("goal_gid", AsanaNet.Client.ClientUtils.ParameterToString(goalGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }
            localVarRequestOptions.Data = addSupportingRelationshipRequest;

            localVarRequestOptions.Operation = "GoalRelationshipsApi.AddSupportingRelationship";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetGoalRelationship200Response>("/goals/{goal_gid}/addSupportingRelationship", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSupportingRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a supporting goal relationship Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addSupportingRelationshipRequest">The supporting resource to be added to the goal</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGoalRelationship200Response</returns>
        public async System.Threading.Tasks.Task<GetGoalRelationship200Response> AddSupportingRelationshipAsync(string goalGid, AddSupportingRelationshipRequest addSupportingRelationshipRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<GetGoalRelationship200Response> localVarResponse = await AddSupportingRelationshipWithHttpInfoAsync(goalGid, addSupportingRelationshipRequest, optPretty, optFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a supporting goal relationship Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="addSupportingRelationshipRequest">The supporting resource to be added to the goal</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGoalRelationship200Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<GetGoalRelationship200Response>> AddSupportingRelationshipWithHttpInfoAsync(string goalGid, AddSupportingRelationshipRequest addSupportingRelationshipRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'goalGid' when calling GoalRelationshipsApi->AddSupportingRelationship");
            }

            // verify the required parameter 'addSupportingRelationshipRequest' is set
            if (addSupportingRelationshipRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'addSupportingRelationshipRequest' when calling GoalRelationshipsApi->AddSupportingRelationship");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("goal_gid", AsanaNet.Client.ClientUtils.ParameterToString(goalGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }
            localVarRequestOptions.Data = addSupportingRelationshipRequest;

            localVarRequestOptions.Operation = "GoalRelationshipsApi.AddSupportingRelationship";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetGoalRelationship200Response>("/goals/{goal_gid}/addSupportingRelationship", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSupportingRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a goal relationship Returns the complete updated goal relationship record for a single goal relationship.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRelationshipGid">Globally unique identifier for the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetGoalRelationship200Response</returns>
        public GetGoalRelationship200Response GetGoalRelationship(string goalRelationshipGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<GetGoalRelationship200Response> localVarResponse = GetGoalRelationshipWithHttpInfo(goalRelationshipGid, optPretty, optFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a goal relationship Returns the complete updated goal relationship record for a single goal relationship.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRelationshipGid">Globally unique identifier for the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetGoalRelationship200Response</returns>
        public AsanaNet.Client.ApiResponse<GetGoalRelationship200Response> GetGoalRelationshipWithHttpInfo(string goalRelationshipGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'goalRelationshipGid' is set
            if (goalRelationshipGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'goalRelationshipGid' when calling GoalRelationshipsApi->GetGoalRelationship");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("goal_relationship_gid", AsanaNet.Client.ClientUtils.ParameterToString(goalRelationshipGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }

            localVarRequestOptions.Operation = "GoalRelationshipsApi.GetGoalRelationship";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetGoalRelationship200Response>("/goal_relationships/{goal_relationship_gid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGoalRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a goal relationship Returns the complete updated goal relationship record for a single goal relationship.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRelationshipGid">Globally unique identifier for the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGoalRelationship200Response</returns>
        public async System.Threading.Tasks.Task<GetGoalRelationship200Response> GetGoalRelationshipAsync(string goalRelationshipGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<GetGoalRelationship200Response> localVarResponse = await GetGoalRelationshipWithHttpInfoAsync(goalRelationshipGid, optPretty, optFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a goal relationship Returns the complete updated goal relationship record for a single goal relationship.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRelationshipGid">Globally unique identifier for the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGoalRelationship200Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<GetGoalRelationship200Response>> GetGoalRelationshipWithHttpInfoAsync(string goalRelationshipGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'goalRelationshipGid' is set
            if (goalRelationshipGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'goalRelationshipGid' when calling GoalRelationshipsApi->GetGoalRelationship");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("goal_relationship_gid", AsanaNet.Client.ClientUtils.ParameterToString(goalRelationshipGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }

            localVarRequestOptions.Operation = "GoalRelationshipsApi.GetGoalRelationship";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetGoalRelationship200Response>("/goal_relationships/{goal_relationship_gid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGoalRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get goal relationships Returns compact goal relationship records.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportedGoal">Globally unique identifier for the supported goal in the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="resourceSubtype">If provided, filter to goal relationships with a given resource_subtype. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetGoalRelationships200Response</returns>
        public GetGoalRelationships200Response GetGoalRelationships(string supportedGoal, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? resourceSubtype = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<GetGoalRelationships200Response> localVarResponse = GetGoalRelationshipsWithHttpInfo(supportedGoal, optPretty, limit, offset, resourceSubtype, optFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get goal relationships Returns compact goal relationship records.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportedGoal">Globally unique identifier for the supported goal in the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="resourceSubtype">If provided, filter to goal relationships with a given resource_subtype. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetGoalRelationships200Response</returns>
        public AsanaNet.Client.ApiResponse<GetGoalRelationships200Response> GetGoalRelationshipsWithHttpInfo(string supportedGoal, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? resourceSubtype = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'supportedGoal' is set
            if (supportedGoal == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'supportedGoal' when calling GoalRelationshipsApi->GetGoalRelationships");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "supported_goal", supportedGoal));
            if (resourceSubtype != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "resource_subtype", resourceSubtype));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }

            localVarRequestOptions.Operation = "GoalRelationshipsApi.GetGoalRelationships";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetGoalRelationships200Response>("/goal_relationships", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGoalRelationships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get goal relationships Returns compact goal relationship records.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportedGoal">Globally unique identifier for the supported goal in the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="resourceSubtype">If provided, filter to goal relationships with a given resource_subtype. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGoalRelationships200Response</returns>
        public async System.Threading.Tasks.Task<GetGoalRelationships200Response> GetGoalRelationshipsAsync(string supportedGoal, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? resourceSubtype = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<GetGoalRelationships200Response> localVarResponse = await GetGoalRelationshipsWithHttpInfoAsync(supportedGoal, optPretty, limit, offset, resourceSubtype, optFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get goal relationships Returns compact goal relationship records.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportedGoal">Globally unique identifier for the supported goal in the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="resourceSubtype">If provided, filter to goal relationships with a given resource_subtype. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGoalRelationships200Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<GetGoalRelationships200Response>> GetGoalRelationshipsWithHttpInfoAsync(string supportedGoal, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? resourceSubtype = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'supportedGoal' is set
            if (supportedGoal == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'supportedGoal' when calling GoalRelationshipsApi->GetGoalRelationships");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "supported_goal", supportedGoal));
            if (resourceSubtype != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "resource_subtype", resourceSubtype));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }

            localVarRequestOptions.Operation = "GoalRelationshipsApi.GetGoalRelationships";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetGoalRelationships200Response>("/goal_relationships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGoalRelationships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes a supporting goal relationship Removes a goal relationship for a given parent goal.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="removeSupportingRelationshipRequest">The supporting resource to be removed from the goal</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteAttachment200Response</returns>
        public DeleteAttachment200Response RemoveSupportingRelationship(string goalGid, RemoveSupportingRelationshipRequest removeSupportingRelationshipRequest, bool? optPretty = default(bool?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<DeleteAttachment200Response> localVarResponse = RemoveSupportingRelationshipWithHttpInfo(goalGid, removeSupportingRelationshipRequest, optPretty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a supporting goal relationship Removes a goal relationship for a given parent goal.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="removeSupportingRelationshipRequest">The supporting resource to be removed from the goal</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteAttachment200Response</returns>
        public AsanaNet.Client.ApiResponse<DeleteAttachment200Response> RemoveSupportingRelationshipWithHttpInfo(string goalGid, RemoveSupportingRelationshipRequest removeSupportingRelationshipRequest, bool? optPretty = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'goalGid' when calling GoalRelationshipsApi->RemoveSupportingRelationship");
            }

            // verify the required parameter 'removeSupportingRelationshipRequest' is set
            if (removeSupportingRelationshipRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'removeSupportingRelationshipRequest' when calling GoalRelationshipsApi->RemoveSupportingRelationship");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("goal_gid", AsanaNet.Client.ClientUtils.ParameterToString(goalGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            localVarRequestOptions.Data = removeSupportingRelationshipRequest;

            localVarRequestOptions.Operation = "GoalRelationshipsApi.RemoveSupportingRelationship";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DeleteAttachment200Response>("/goals/{goal_gid}/removeSupportingRelationship", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSupportingRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes a supporting goal relationship Removes a goal relationship for a given parent goal.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="removeSupportingRelationshipRequest">The supporting resource to be removed from the goal</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAttachment200Response</returns>
        public async System.Threading.Tasks.Task<DeleteAttachment200Response> RemoveSupportingRelationshipAsync(string goalGid, RemoveSupportingRelationshipRequest removeSupportingRelationshipRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<DeleteAttachment200Response> localVarResponse = await RemoveSupportingRelationshipWithHttpInfoAsync(goalGid, removeSupportingRelationshipRequest, optPretty, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a supporting goal relationship Removes a goal relationship for a given parent goal.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGid">Globally unique identifier for the goal.</param>
        /// <param name="removeSupportingRelationshipRequest">The supporting resource to be removed from the goal</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAttachment200Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<DeleteAttachment200Response>> RemoveSupportingRelationshipWithHttpInfoAsync(string goalGid, RemoveSupportingRelationshipRequest removeSupportingRelationshipRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'goalGid' is set
            if (goalGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'goalGid' when calling GoalRelationshipsApi->RemoveSupportingRelationship");
            }

            // verify the required parameter 'removeSupportingRelationshipRequest' is set
            if (removeSupportingRelationshipRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'removeSupportingRelationshipRequest' when calling GoalRelationshipsApi->RemoveSupportingRelationship");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("goal_gid", AsanaNet.Client.ClientUtils.ParameterToString(goalGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            localVarRequestOptions.Data = removeSupportingRelationshipRequest;

            localVarRequestOptions.Operation = "GoalRelationshipsApi.RemoveSupportingRelationship";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteAttachment200Response>("/goals/{goal_gid}/removeSupportingRelationship", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSupportingRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a goal relationship An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRelationshipGid">Globally unique identifier for the goal relationship.</param>
        /// <param name="updateGoalRelationshipRequest">The updated fields for the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetGoalRelationship200Response</returns>
        public GetGoalRelationship200Response UpdateGoalRelationship(string goalRelationshipGid, UpdateGoalRelationshipRequest updateGoalRelationshipRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<GetGoalRelationship200Response> localVarResponse = UpdateGoalRelationshipWithHttpInfo(goalRelationshipGid, updateGoalRelationshipRequest, optPretty, optFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a goal relationship An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRelationshipGid">Globally unique identifier for the goal relationship.</param>
        /// <param name="updateGoalRelationshipRequest">The updated fields for the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetGoalRelationship200Response</returns>
        public AsanaNet.Client.ApiResponse<GetGoalRelationship200Response> UpdateGoalRelationshipWithHttpInfo(string goalRelationshipGid, UpdateGoalRelationshipRequest updateGoalRelationshipRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'goalRelationshipGid' is set
            if (goalRelationshipGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'goalRelationshipGid' when calling GoalRelationshipsApi->UpdateGoalRelationship");
            }

            // verify the required parameter 'updateGoalRelationshipRequest' is set
            if (updateGoalRelationshipRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'updateGoalRelationshipRequest' when calling GoalRelationshipsApi->UpdateGoalRelationship");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("goal_relationship_gid", AsanaNet.Client.ClientUtils.ParameterToString(goalRelationshipGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }
            localVarRequestOptions.Data = updateGoalRelationshipRequest;

            localVarRequestOptions.Operation = "GoalRelationshipsApi.UpdateGoalRelationship";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<GetGoalRelationship200Response>("/goal_relationships/{goal_relationship_gid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGoalRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a goal relationship An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRelationshipGid">Globally unique identifier for the goal relationship.</param>
        /// <param name="updateGoalRelationshipRequest">The updated fields for the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGoalRelationship200Response</returns>
        public async System.Threading.Tasks.Task<GetGoalRelationship200Response> UpdateGoalRelationshipAsync(string goalRelationshipGid, UpdateGoalRelationshipRequest updateGoalRelationshipRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<GetGoalRelationship200Response> localVarResponse = await UpdateGoalRelationshipWithHttpInfoAsync(goalRelationshipGid, updateGoalRelationshipRequest, optPretty, optFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a goal relationship An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRelationshipGid">Globally unique identifier for the goal relationship.</param>
        /// <param name="updateGoalRelationshipRequest">The updated fields for the goal relationship.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGoalRelationship200Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<GetGoalRelationship200Response>> UpdateGoalRelationshipWithHttpInfoAsync(string goalRelationshipGid, UpdateGoalRelationshipRequest updateGoalRelationshipRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'goalRelationshipGid' is set
            if (goalRelationshipGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'goalRelationshipGid' when calling GoalRelationshipsApi->UpdateGoalRelationship");
            }

            // verify the required parameter 'updateGoalRelationshipRequest' is set
            if (updateGoalRelationshipRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'updateGoalRelationshipRequest' when calling GoalRelationshipsApi->UpdateGoalRelationship");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("goal_relationship_gid", AsanaNet.Client.ClientUtils.ParameterToString(goalRelationshipGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }
            localVarRequestOptions.Data = updateGoalRelationshipRequest;

            localVarRequestOptions.Operation = "GoalRelationshipsApi.UpdateGoalRelationship";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<GetGoalRelationship200Response>("/goal_relationships/{goal_relationship_gid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGoalRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
