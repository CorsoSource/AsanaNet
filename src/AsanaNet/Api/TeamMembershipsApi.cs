/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using AsanaNet.Client;
using AsanaNet.Client.Auth;
using AsanaNet.Model;

namespace AsanaNet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamMembershipsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a team membership
        /// </summary>
        /// <remarks>
        /// Returns the complete team membership record for a single team membership.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMembershipGid"></param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTeamMembership200Response</returns>
        GetTeamMembership200Response GetTeamMembership(string teamMembershipGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Get a team membership
        /// </summary>
        /// <remarks>
        /// Returns the complete team membership record for a single team membership.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMembershipGid"></param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTeamMembership200Response</returns>
        ApiResponse<GetTeamMembership200Response> GetTeamMembershipWithHttpInfo(string teamMembershipGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Get team memberships
        /// </summary>
        /// <remarks>
        /// Returns compact team membership records.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="user">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. This parameter must be used with the workspace parameter. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. This parameter must be used with the user parameter. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTeamMemberships200Response</returns>
        GetTeamMemberships200Response GetTeamMemberships(bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? team = default(string?), string? user = default(string?), string? workspace = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Get team memberships
        /// </summary>
        /// <remarks>
        /// Returns compact team membership records.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="user">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. This parameter must be used with the workspace parameter. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. This parameter must be used with the user parameter. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTeamMemberships200Response</returns>
        ApiResponse<GetTeamMemberships200Response> GetTeamMembershipsWithHttpInfo(bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? team = default(string?), string? user = default(string?), string? workspace = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Get memberships from a team
        /// </summary>
        /// <remarks>
        /// Returns the compact team memberships for the team.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTeamMemberships200Response</returns>
        GetTeamMemberships200Response GetTeamMembershipsForTeam(string teamGid, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Get memberships from a team
        /// </summary>
        /// <remarks>
        /// Returns the compact team memberships for the team.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTeamMemberships200Response</returns>
        ApiResponse<GetTeamMemberships200Response> GetTeamMembershipsForTeamWithHttpInfo(string teamGid, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Get memberships from a user
        /// </summary>
        /// <remarks>
        /// Returns the compact team membership records for the user.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="workspace">Globally unique identifier for the workspace.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTeamMemberships200Response</returns>
        GetTeamMemberships200Response GetTeamMembershipsForUser(string userGid, string workspace, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Get memberships from a user
        /// </summary>
        /// <remarks>
        /// Returns the compact team membership records for the user.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="workspace">Globally unique identifier for the workspace.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTeamMemberships200Response</returns>
        ApiResponse<GetTeamMemberships200Response> GetTeamMembershipsForUserWithHttpInfo(string userGid, string workspace, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamMembershipsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a team membership
        /// </summary>
        /// <remarks>
        /// Returns the complete team membership record for a single team membership.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMembershipGid"></param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTeamMembership200Response</returns>
        System.Threading.Tasks.Task<GetTeamMembership200Response> GetTeamMembershipAsync(string teamMembershipGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a team membership
        /// </summary>
        /// <remarks>
        /// Returns the complete team membership record for a single team membership.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMembershipGid"></param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTeamMembership200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTeamMembership200Response>> GetTeamMembershipWithHttpInfoAsync(string teamMembershipGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get team memberships
        /// </summary>
        /// <remarks>
        /// Returns compact team membership records.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="user">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. This parameter must be used with the workspace parameter. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. This parameter must be used with the user parameter. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTeamMemberships200Response</returns>
        System.Threading.Tasks.Task<GetTeamMemberships200Response> GetTeamMembershipsAsync(bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? team = default(string?), string? user = default(string?), string? workspace = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get team memberships
        /// </summary>
        /// <remarks>
        /// Returns compact team membership records.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="user">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. This parameter must be used with the workspace parameter. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. This parameter must be used with the user parameter. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTeamMemberships200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTeamMemberships200Response>> GetTeamMembershipsWithHttpInfoAsync(bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? team = default(string?), string? user = default(string?), string? workspace = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get memberships from a team
        /// </summary>
        /// <remarks>
        /// Returns the compact team memberships for the team.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTeamMemberships200Response</returns>
        System.Threading.Tasks.Task<GetTeamMemberships200Response> GetTeamMembershipsForTeamAsync(string teamGid, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get memberships from a team
        /// </summary>
        /// <remarks>
        /// Returns the compact team memberships for the team.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTeamMemberships200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTeamMemberships200Response>> GetTeamMembershipsForTeamWithHttpInfoAsync(string teamGid, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get memberships from a user
        /// </summary>
        /// <remarks>
        /// Returns the compact team membership records for the user.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="workspace">Globally unique identifier for the workspace.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTeamMemberships200Response</returns>
        System.Threading.Tasks.Task<GetTeamMemberships200Response> GetTeamMembershipsForUserAsync(string userGid, string workspace, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get memberships from a user
        /// </summary>
        /// <remarks>
        /// Returns the compact team membership records for the user.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="workspace">Globally unique identifier for the workspace.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTeamMemberships200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTeamMemberships200Response>> GetTeamMembershipsForUserWithHttpInfoAsync(string userGid, string workspace, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamMembershipsApi : ITeamMembershipsApiSync, ITeamMembershipsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeamMembershipsApi : ITeamMembershipsApi
    {
        private AsanaNet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamMembershipsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamMembershipsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamMembershipsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamMembershipsApi(string basePath)
        {
            this.Configuration = AsanaNet.Client.Configuration.MergeConfigurations(
                AsanaNet.Client.GlobalConfiguration.Instance,
                new AsanaNet.Client.Configuration { BasePath = basePath }
            );
            this.Client = new AsanaNet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AsanaNet.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = AsanaNet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamMembershipsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeamMembershipsApi(AsanaNet.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AsanaNet.Client.Configuration.MergeConfigurations(
                AsanaNet.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new AsanaNet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AsanaNet.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = AsanaNet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamMembershipsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TeamMembershipsApi(AsanaNet.Client.ISynchronousClient client, AsanaNet.Client.IAsynchronousClient asyncClient, AsanaNet.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AsanaNet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AsanaNet.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AsanaNet.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AsanaNet.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AsanaNet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a team membership Returns the complete team membership record for a single team membership.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMembershipGid"></param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTeamMembership200Response</returns>
        public GetTeamMembership200Response GetTeamMembership(string teamMembershipGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<GetTeamMembership200Response> localVarResponse = GetTeamMembershipWithHttpInfo(teamMembershipGid, optPretty, optFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a team membership Returns the complete team membership record for a single team membership.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMembershipGid"></param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTeamMembership200Response</returns>
        public AsanaNet.Client.ApiResponse<GetTeamMembership200Response> GetTeamMembershipWithHttpInfo(string teamMembershipGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'teamMembershipGid' is set
            if (teamMembershipGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'teamMembershipGid' when calling TeamMembershipsApi->GetTeamMembership");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("team_membership_gid", AsanaNet.Client.ClientUtils.ParameterToString(teamMembershipGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }

            localVarRequestOptions.Operation = "TeamMembershipsApi.GetTeamMembership";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetTeamMembership200Response>("/team_memberships/{team_membership_gid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMembership", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a team membership Returns the complete team membership record for a single team membership.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMembershipGid"></param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTeamMembership200Response</returns>
        public async System.Threading.Tasks.Task<GetTeamMembership200Response> GetTeamMembershipAsync(string teamMembershipGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<GetTeamMembership200Response> localVarResponse = await GetTeamMembershipWithHttpInfoAsync(teamMembershipGid, optPretty, optFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a team membership Returns the complete team membership record for a single team membership.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamMembershipGid"></param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTeamMembership200Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<GetTeamMembership200Response>> GetTeamMembershipWithHttpInfoAsync(string teamMembershipGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamMembershipGid' is set
            if (teamMembershipGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'teamMembershipGid' when calling TeamMembershipsApi->GetTeamMembership");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("team_membership_gid", AsanaNet.Client.ClientUtils.ParameterToString(teamMembershipGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }

            localVarRequestOptions.Operation = "TeamMembershipsApi.GetTeamMembership";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetTeamMembership200Response>("/team_memberships/{team_membership_gid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMembership", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get team memberships Returns compact team membership records.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="user">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. This parameter must be used with the workspace parameter. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. This parameter must be used with the user parameter. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTeamMemberships200Response</returns>
        public GetTeamMemberships200Response GetTeamMemberships(bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? team = default(string?), string? user = default(string?), string? workspace = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<GetTeamMemberships200Response> localVarResponse = GetTeamMembershipsWithHttpInfo(optPretty, limit, offset, team, user, workspace, optFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get team memberships Returns compact team membership records.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="user">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. This parameter must be used with the workspace parameter. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. This parameter must be used with the user parameter. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTeamMemberships200Response</returns>
        public AsanaNet.Client.ApiResponse<GetTeamMemberships200Response> GetTeamMembershipsWithHttpInfo(bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? team = default(string?), string? user = default(string?), string? workspace = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }
            if (workspace != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "workspace", workspace));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }

            localVarRequestOptions.Operation = "TeamMembershipsApi.GetTeamMemberships";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetTeamMemberships200Response>("/team_memberships", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMemberships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get team memberships Returns compact team membership records.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="user">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. This parameter must be used with the workspace parameter. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. This parameter must be used with the user parameter. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTeamMemberships200Response</returns>
        public async System.Threading.Tasks.Task<GetTeamMemberships200Response> GetTeamMembershipsAsync(bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? team = default(string?), string? user = default(string?), string? workspace = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<GetTeamMemberships200Response> localVarResponse = await GetTeamMembershipsWithHttpInfoAsync(optPretty, limit, offset, team, user, workspace, optFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get team memberships Returns compact team membership records.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="team">Globally unique identifier for the team. (optional)</param>
        /// <param name="user">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. This parameter must be used with the workspace parameter. (optional)</param>
        /// <param name="workspace">Globally unique identifier for the workspace. This parameter must be used with the user parameter. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTeamMemberships200Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<GetTeamMemberships200Response>> GetTeamMembershipsWithHttpInfoAsync(bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? team = default(string?), string? user = default(string?), string? workspace = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }
            if (workspace != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "workspace", workspace));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }

            localVarRequestOptions.Operation = "TeamMembershipsApi.GetTeamMemberships";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetTeamMemberships200Response>("/team_memberships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMemberships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get memberships from a team Returns the compact team memberships for the team.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTeamMemberships200Response</returns>
        public GetTeamMemberships200Response GetTeamMembershipsForTeam(string teamGid, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<GetTeamMemberships200Response> localVarResponse = GetTeamMembershipsForTeamWithHttpInfo(teamGid, optPretty, limit, offset, optFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get memberships from a team Returns the compact team memberships for the team.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTeamMemberships200Response</returns>
        public AsanaNet.Client.ApiResponse<GetTeamMemberships200Response> GetTeamMembershipsForTeamWithHttpInfo(string teamGid, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'teamGid' is set
            if (teamGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'teamGid' when calling TeamMembershipsApi->GetTeamMembershipsForTeam");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("team_gid", AsanaNet.Client.ClientUtils.ParameterToString(teamGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }

            localVarRequestOptions.Operation = "TeamMembershipsApi.GetTeamMembershipsForTeam";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetTeamMemberships200Response>("/teams/{team_gid}/team_memberships", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMembershipsForTeam", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get memberships from a team Returns the compact team memberships for the team.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTeamMemberships200Response</returns>
        public async System.Threading.Tasks.Task<GetTeamMemberships200Response> GetTeamMembershipsForTeamAsync(string teamGid, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<GetTeamMemberships200Response> localVarResponse = await GetTeamMembershipsForTeamWithHttpInfoAsync(teamGid, optPretty, limit, offset, optFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get memberships from a team Returns the compact team memberships for the team.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamGid">Globally unique identifier for the team.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTeamMemberships200Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<GetTeamMemberships200Response>> GetTeamMembershipsForTeamWithHttpInfoAsync(string teamGid, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamGid' is set
            if (teamGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'teamGid' when calling TeamMembershipsApi->GetTeamMembershipsForTeam");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("team_gid", AsanaNet.Client.ClientUtils.ParameterToString(teamGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }

            localVarRequestOptions.Operation = "TeamMembershipsApi.GetTeamMembershipsForTeam";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetTeamMemberships200Response>("/teams/{team_gid}/team_memberships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMembershipsForTeam", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get memberships from a user Returns the compact team membership records for the user.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="workspace">Globally unique identifier for the workspace.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTeamMemberships200Response</returns>
        public GetTeamMemberships200Response GetTeamMembershipsForUser(string userGid, string workspace, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<GetTeamMemberships200Response> localVarResponse = GetTeamMembershipsForUserWithHttpInfo(userGid, workspace, optPretty, limit, offset, optFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get memberships from a user Returns the compact team membership records for the user.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="workspace">Globally unique identifier for the workspace.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTeamMemberships200Response</returns>
        public AsanaNet.Client.ApiResponse<GetTeamMemberships200Response> GetTeamMembershipsForUserWithHttpInfo(string userGid, string workspace, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'userGid' is set
            if (userGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'userGid' when calling TeamMembershipsApi->GetTeamMembershipsForUser");
            }

            // verify the required parameter 'workspace' is set
            if (workspace == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'workspace' when calling TeamMembershipsApi->GetTeamMembershipsForUser");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_gid", AsanaNet.Client.ClientUtils.ParameterToString(userGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "workspace", workspace));
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }

            localVarRequestOptions.Operation = "TeamMembershipsApi.GetTeamMembershipsForUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetTeamMemberships200Response>("/users/{user_gid}/team_memberships", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMembershipsForUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get memberships from a user Returns the compact team membership records for the user.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="workspace">Globally unique identifier for the workspace.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTeamMemberships200Response</returns>
        public async System.Threading.Tasks.Task<GetTeamMemberships200Response> GetTeamMembershipsForUserAsync(string userGid, string workspace, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<GetTeamMemberships200Response> localVarResponse = await GetTeamMembershipsForUserWithHttpInfoAsync(userGid, workspace, optPretty, limit, offset, optFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get memberships from a user Returns the compact team membership records for the user.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGid">A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.</param>
        /// <param name="workspace">Globally unique identifier for the workspace.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTeamMemberships200Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<GetTeamMemberships200Response>> GetTeamMembershipsForUserWithHttpInfoAsync(string userGid, string workspace, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGid' is set
            if (userGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'userGid' when calling TeamMembershipsApi->GetTeamMembershipsForUser");
            }

            // verify the required parameter 'workspace' is set
            if (workspace == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'workspace' when calling TeamMembershipsApi->GetTeamMembershipsForUser");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_gid", AsanaNet.Client.ClientUtils.ParameterToString(userGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "workspace", workspace));
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }

            localVarRequestOptions.Operation = "TeamMembershipsApi.GetTeamMembershipsForUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetTeamMemberships200Response>("/users/{user_gid}/team_memberships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamMembershipsForUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
