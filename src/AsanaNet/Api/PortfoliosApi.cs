/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using AsanaNet.Client;
using AsanaNet.Client.Auth;
using AsanaNet.Model;

namespace AsanaNet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPortfoliosApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a custom field to a portfolio
        /// </summary>
        /// <remarks>
        /// Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addCustomFieldSettingForPortfolioRequest">Information about the custom field setting.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddCustomFieldSettingForPortfolio200Response</returns>
        AddCustomFieldSettingForPortfolio200Response AddCustomFieldSettingForPortfolio(string portfolioGid, AddCustomFieldSettingForPortfolioRequest addCustomFieldSettingForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Add a custom field to a portfolio
        /// </summary>
        /// <remarks>
        /// Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addCustomFieldSettingForPortfolioRequest">Information about the custom field setting.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddCustomFieldSettingForPortfolio200Response</returns>
        ApiResponse<AddCustomFieldSettingForPortfolio200Response> AddCustomFieldSettingForPortfolioWithHttpInfo(string portfolioGid, AddCustomFieldSettingForPortfolioRequest addCustomFieldSettingForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Add a portfolio item
        /// </summary>
        /// <remarks>
        /// Add an item to a portfolio. Returns an empty data block.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addItemForPortfolioRequest">Information about the item being inserted.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteAttachment200Response</returns>
        DeleteAttachment200Response AddItemForPortfolio(string portfolioGid, AddItemForPortfolioRequest addItemForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Add a portfolio item
        /// </summary>
        /// <remarks>
        /// Add an item to a portfolio. Returns an empty data block.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addItemForPortfolioRequest">Information about the item being inserted.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteAttachment200Response</returns>
        ApiResponse<DeleteAttachment200Response> AddItemForPortfolioWithHttpInfo(string portfolioGid, AddItemForPortfolioRequest addItemForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Add users to a portfolio
        /// </summary>
        /// <remarks>
        /// Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addMembersForPortfolioRequest">Information about the members being added.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatePortfolio201Response</returns>
        CreatePortfolio201Response AddMembersForPortfolio(string portfolioGid, AddMembersForPortfolioRequest addMembersForPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Add users to a portfolio
        /// </summary>
        /// <remarks>
        /// Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addMembersForPortfolioRequest">Information about the members being added.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatePortfolio201Response</returns>
        ApiResponse<CreatePortfolio201Response> AddMembersForPortfolioWithHttpInfo(string portfolioGid, AddMembersForPortfolioRequest addMembersForPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Create a portfolio
        /// </summary>
        /// <remarks>
        /// Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPortfolioRequest">The portfolio to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatePortfolio201Response</returns>
        CreatePortfolio201Response CreatePortfolio(CreatePortfolioRequest createPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Create a portfolio
        /// </summary>
        /// <remarks>
        /// Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPortfolioRequest">The portfolio to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatePortfolio201Response</returns>
        ApiResponse<CreatePortfolio201Response> CreatePortfolioWithHttpInfo(CreatePortfolioRequest createPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Delete a portfolio
        /// </summary>
        /// <remarks>
        /// An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteAttachment200Response</returns>
        DeleteAttachment200Response DeletePortfolio(string portfolioGid, bool? optPretty = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Delete a portfolio
        /// </summary>
        /// <remarks>
        /// An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteAttachment200Response</returns>
        ApiResponse<DeleteAttachment200Response> DeletePortfolioWithHttpInfo(string portfolioGid, bool? optPretty = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get portfolio items
        /// </summary>
        /// <remarks>
        /// Get a list of the items in compact form in a portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetItemsForPortfolio200Response</returns>
        GetItemsForPortfolio200Response GetItemsForPortfolio(string portfolioGid, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Get portfolio items
        /// </summary>
        /// <remarks>
        /// Get a list of the items in compact form in a portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetItemsForPortfolio200Response</returns>
        ApiResponse<GetItemsForPortfolio200Response> GetItemsForPortfolioWithHttpInfo(string portfolioGid, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Get a portfolio
        /// </summary>
        /// <remarks>
        /// Returns the complete portfolio record for a single portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatePortfolio201Response</returns>
        CreatePortfolio201Response GetPortfolio(string portfolioGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Get a portfolio
        /// </summary>
        /// <remarks>
        /// Returns the complete portfolio record for a single portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatePortfolio201Response</returns>
        ApiResponse<CreatePortfolio201Response> GetPortfolioWithHttpInfo(string portfolioGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Get multiple portfolios
        /// </summary>
        /// <remarks>
        /// Returns a list of the portfolios in compact representation that are owned by the current API user.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace or organization to filter portfolios on.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="owner">The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own, unless the request is made from a Service Account. In the case of a Service Account, if this parameter is specified, then all portfolios owned by this parameter are returned. Otherwise, all portfolios across the workspace are returned. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPortfolios200Response</returns>
        GetPortfolios200Response GetPortfolios(string workspace, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? owner = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Get multiple portfolios
        /// </summary>
        /// <remarks>
        /// Returns a list of the portfolios in compact representation that are owned by the current API user.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace or organization to filter portfolios on.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="owner">The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own, unless the request is made from a Service Account. In the case of a Service Account, if this parameter is specified, then all portfolios owned by this parameter are returned. Otherwise, all portfolios across the workspace are returned. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPortfolios200Response</returns>
        ApiResponse<GetPortfolios200Response> GetPortfoliosWithHttpInfo(string workspace, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? owner = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Remove a custom field from a portfolio
        /// </summary>
        /// <remarks>
        /// Removes a custom field setting from a portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeCustomFieldSettingForPortfolioRequest">Information about the custom field setting being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteAttachment200Response</returns>
        DeleteAttachment200Response RemoveCustomFieldSettingForPortfolio(string portfolioGid, RemoveCustomFieldSettingForPortfolioRequest removeCustomFieldSettingForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Remove a custom field from a portfolio
        /// </summary>
        /// <remarks>
        /// Removes a custom field setting from a portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeCustomFieldSettingForPortfolioRequest">Information about the custom field setting being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteAttachment200Response</returns>
        ApiResponse<DeleteAttachment200Response> RemoveCustomFieldSettingForPortfolioWithHttpInfo(string portfolioGid, RemoveCustomFieldSettingForPortfolioRequest removeCustomFieldSettingForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Remove a portfolio item
        /// </summary>
        /// <remarks>
        /// Remove an item from a portfolio. Returns an empty data block.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeItemForPortfolioRequest">Information about the item being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteAttachment200Response</returns>
        DeleteAttachment200Response RemoveItemForPortfolio(string portfolioGid, RemoveItemForPortfolioRequest removeItemForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Remove a portfolio item
        /// </summary>
        /// <remarks>
        /// Remove an item from a portfolio. Returns an empty data block.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeItemForPortfolioRequest">Information about the item being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteAttachment200Response</returns>
        ApiResponse<DeleteAttachment200Response> RemoveItemForPortfolioWithHttpInfo(string portfolioGid, RemoveItemForPortfolioRequest removeItemForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Remove users from a portfolio
        /// </summary>
        /// <remarks>
        /// Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeMembersForPortfolioRequest">Information about the members being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatePortfolio201Response</returns>
        CreatePortfolio201Response RemoveMembersForPortfolio(string portfolioGid, RemoveMembersForPortfolioRequest removeMembersForPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Remove users from a portfolio
        /// </summary>
        /// <remarks>
        /// Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeMembersForPortfolioRequest">Information about the members being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatePortfolio201Response</returns>
        ApiResponse<CreatePortfolio201Response> RemoveMembersForPortfolioWithHttpInfo(string portfolioGid, RemoveMembersForPortfolioRequest removeMembersForPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Update a portfolio
        /// </summary>
        /// <remarks>
        /// An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="createPortfolioRequest">The updated fields for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatePortfolio201Response</returns>
        CreatePortfolio201Response UpdatePortfolio(string portfolioGid, CreatePortfolioRequest createPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Update a portfolio
        /// </summary>
        /// <remarks>
        /// An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="createPortfolioRequest">The updated fields for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatePortfolio201Response</returns>
        ApiResponse<CreatePortfolio201Response> UpdatePortfolioWithHttpInfo(string portfolioGid, CreatePortfolioRequest createPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPortfoliosApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a custom field to a portfolio
        /// </summary>
        /// <remarks>
        /// Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addCustomFieldSettingForPortfolioRequest">Information about the custom field setting.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddCustomFieldSettingForPortfolio200Response</returns>
        System.Threading.Tasks.Task<AddCustomFieldSettingForPortfolio200Response> AddCustomFieldSettingForPortfolioAsync(string portfolioGid, AddCustomFieldSettingForPortfolioRequest addCustomFieldSettingForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a custom field to a portfolio
        /// </summary>
        /// <remarks>
        /// Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addCustomFieldSettingForPortfolioRequest">Information about the custom field setting.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddCustomFieldSettingForPortfolio200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddCustomFieldSettingForPortfolio200Response>> AddCustomFieldSettingForPortfolioWithHttpInfoAsync(string portfolioGid, AddCustomFieldSettingForPortfolioRequest addCustomFieldSettingForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a portfolio item
        /// </summary>
        /// <remarks>
        /// Add an item to a portfolio. Returns an empty data block.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addItemForPortfolioRequest">Information about the item being inserted.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAttachment200Response</returns>
        System.Threading.Tasks.Task<DeleteAttachment200Response> AddItemForPortfolioAsync(string portfolioGid, AddItemForPortfolioRequest addItemForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a portfolio item
        /// </summary>
        /// <remarks>
        /// Add an item to a portfolio. Returns an empty data block.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addItemForPortfolioRequest">Information about the item being inserted.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAttachment200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAttachment200Response>> AddItemForPortfolioWithHttpInfoAsync(string portfolioGid, AddItemForPortfolioRequest addItemForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add users to a portfolio
        /// </summary>
        /// <remarks>
        /// Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addMembersForPortfolioRequest">Information about the members being added.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePortfolio201Response</returns>
        System.Threading.Tasks.Task<CreatePortfolio201Response> AddMembersForPortfolioAsync(string portfolioGid, AddMembersForPortfolioRequest addMembersForPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add users to a portfolio
        /// </summary>
        /// <remarks>
        /// Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addMembersForPortfolioRequest">Information about the members being added.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePortfolio201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePortfolio201Response>> AddMembersForPortfolioWithHttpInfoAsync(string portfolioGid, AddMembersForPortfolioRequest addMembersForPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a portfolio
        /// </summary>
        /// <remarks>
        /// Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPortfolioRequest">The portfolio to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePortfolio201Response</returns>
        System.Threading.Tasks.Task<CreatePortfolio201Response> CreatePortfolioAsync(CreatePortfolioRequest createPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a portfolio
        /// </summary>
        /// <remarks>
        /// Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPortfolioRequest">The portfolio to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePortfolio201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePortfolio201Response>> CreatePortfolioWithHttpInfoAsync(CreatePortfolioRequest createPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a portfolio
        /// </summary>
        /// <remarks>
        /// An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAttachment200Response</returns>
        System.Threading.Tasks.Task<DeleteAttachment200Response> DeletePortfolioAsync(string portfolioGid, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a portfolio
        /// </summary>
        /// <remarks>
        /// An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAttachment200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAttachment200Response>> DeletePortfolioWithHttpInfoAsync(string portfolioGid, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get portfolio items
        /// </summary>
        /// <remarks>
        /// Get a list of the items in compact form in a portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetItemsForPortfolio200Response</returns>
        System.Threading.Tasks.Task<GetItemsForPortfolio200Response> GetItemsForPortfolioAsync(string portfolioGid, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get portfolio items
        /// </summary>
        /// <remarks>
        /// Get a list of the items in compact form in a portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetItemsForPortfolio200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetItemsForPortfolio200Response>> GetItemsForPortfolioWithHttpInfoAsync(string portfolioGid, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a portfolio
        /// </summary>
        /// <remarks>
        /// Returns the complete portfolio record for a single portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePortfolio201Response</returns>
        System.Threading.Tasks.Task<CreatePortfolio201Response> GetPortfolioAsync(string portfolioGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a portfolio
        /// </summary>
        /// <remarks>
        /// Returns the complete portfolio record for a single portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePortfolio201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePortfolio201Response>> GetPortfolioWithHttpInfoAsync(string portfolioGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get multiple portfolios
        /// </summary>
        /// <remarks>
        /// Returns a list of the portfolios in compact representation that are owned by the current API user.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace or organization to filter portfolios on.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="owner">The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own, unless the request is made from a Service Account. In the case of a Service Account, if this parameter is specified, then all portfolios owned by this parameter are returned. Otherwise, all portfolios across the workspace are returned. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPortfolios200Response</returns>
        System.Threading.Tasks.Task<GetPortfolios200Response> GetPortfoliosAsync(string workspace, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? owner = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get multiple portfolios
        /// </summary>
        /// <remarks>
        /// Returns a list of the portfolios in compact representation that are owned by the current API user.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace or organization to filter portfolios on.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="owner">The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own, unless the request is made from a Service Account. In the case of a Service Account, if this parameter is specified, then all portfolios owned by this parameter are returned. Otherwise, all portfolios across the workspace are returned. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPortfolios200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPortfolios200Response>> GetPortfoliosWithHttpInfoAsync(string workspace, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? owner = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a custom field from a portfolio
        /// </summary>
        /// <remarks>
        /// Removes a custom field setting from a portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeCustomFieldSettingForPortfolioRequest">Information about the custom field setting being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAttachment200Response</returns>
        System.Threading.Tasks.Task<DeleteAttachment200Response> RemoveCustomFieldSettingForPortfolioAsync(string portfolioGid, RemoveCustomFieldSettingForPortfolioRequest removeCustomFieldSettingForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a custom field from a portfolio
        /// </summary>
        /// <remarks>
        /// Removes a custom field setting from a portfolio.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeCustomFieldSettingForPortfolioRequest">Information about the custom field setting being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAttachment200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAttachment200Response>> RemoveCustomFieldSettingForPortfolioWithHttpInfoAsync(string portfolioGid, RemoveCustomFieldSettingForPortfolioRequest removeCustomFieldSettingForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a portfolio item
        /// </summary>
        /// <remarks>
        /// Remove an item from a portfolio. Returns an empty data block.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeItemForPortfolioRequest">Information about the item being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAttachment200Response</returns>
        System.Threading.Tasks.Task<DeleteAttachment200Response> RemoveItemForPortfolioAsync(string portfolioGid, RemoveItemForPortfolioRequest removeItemForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a portfolio item
        /// </summary>
        /// <remarks>
        /// Remove an item from a portfolio. Returns an empty data block.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeItemForPortfolioRequest">Information about the item being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAttachment200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAttachment200Response>> RemoveItemForPortfolioWithHttpInfoAsync(string portfolioGid, RemoveItemForPortfolioRequest removeItemForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove users from a portfolio
        /// </summary>
        /// <remarks>
        /// Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeMembersForPortfolioRequest">Information about the members being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePortfolio201Response</returns>
        System.Threading.Tasks.Task<CreatePortfolio201Response> RemoveMembersForPortfolioAsync(string portfolioGid, RemoveMembersForPortfolioRequest removeMembersForPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove users from a portfolio
        /// </summary>
        /// <remarks>
        /// Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeMembersForPortfolioRequest">Information about the members being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePortfolio201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePortfolio201Response>> RemoveMembersForPortfolioWithHttpInfoAsync(string portfolioGid, RemoveMembersForPortfolioRequest removeMembersForPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a portfolio
        /// </summary>
        /// <remarks>
        /// An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="createPortfolioRequest">The updated fields for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePortfolio201Response</returns>
        System.Threading.Tasks.Task<CreatePortfolio201Response> UpdatePortfolioAsync(string portfolioGid, CreatePortfolioRequest createPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a portfolio
        /// </summary>
        /// <remarks>
        /// An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
        /// </remarks>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="createPortfolioRequest">The updated fields for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePortfolio201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePortfolio201Response>> UpdatePortfolioWithHttpInfoAsync(string portfolioGid, CreatePortfolioRequest createPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPortfoliosApi : IPortfoliosApiSync, IPortfoliosApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PortfoliosApi : IPortfoliosApi
    {
        private AsanaNet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfoliosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PortfoliosApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfoliosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PortfoliosApi(string basePath)
        {
            this.Configuration = AsanaNet.Client.Configuration.MergeConfigurations(
                AsanaNet.Client.GlobalConfiguration.Instance,
                new AsanaNet.Client.Configuration { BasePath = basePath }
            );
            this.Client = new AsanaNet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AsanaNet.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = AsanaNet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfoliosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PortfoliosApi(AsanaNet.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AsanaNet.Client.Configuration.MergeConfigurations(
                AsanaNet.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new AsanaNet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AsanaNet.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = AsanaNet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfoliosApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PortfoliosApi(AsanaNet.Client.ISynchronousClient client, AsanaNet.Client.IAsynchronousClient asyncClient, AsanaNet.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AsanaNet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AsanaNet.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AsanaNet.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AsanaNet.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AsanaNet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a custom field to a portfolio Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addCustomFieldSettingForPortfolioRequest">Information about the custom field setting.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddCustomFieldSettingForPortfolio200Response</returns>
        public AddCustomFieldSettingForPortfolio200Response AddCustomFieldSettingForPortfolio(string portfolioGid, AddCustomFieldSettingForPortfolioRequest addCustomFieldSettingForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<AddCustomFieldSettingForPortfolio200Response> localVarResponse = AddCustomFieldSettingForPortfolioWithHttpInfo(portfolioGid, addCustomFieldSettingForPortfolioRequest, optPretty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a custom field to a portfolio Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addCustomFieldSettingForPortfolioRequest">Information about the custom field setting.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddCustomFieldSettingForPortfolio200Response</returns>
        public AsanaNet.Client.ApiResponse<AddCustomFieldSettingForPortfolio200Response> AddCustomFieldSettingForPortfolioWithHttpInfo(string portfolioGid, AddCustomFieldSettingForPortfolioRequest addCustomFieldSettingForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->AddCustomFieldSettingForPortfolio");
            }

            // verify the required parameter 'addCustomFieldSettingForPortfolioRequest' is set
            if (addCustomFieldSettingForPortfolioRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'addCustomFieldSettingForPortfolioRequest' when calling PortfoliosApi->AddCustomFieldSettingForPortfolio");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            localVarRequestOptions.Data = addCustomFieldSettingForPortfolioRequest;

            localVarRequestOptions.Operation = "PortfoliosApi.AddCustomFieldSettingForPortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddCustomFieldSettingForPortfolio200Response>("/portfolios/{portfolio_gid}/addCustomFieldSetting", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCustomFieldSettingForPortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a custom field to a portfolio Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addCustomFieldSettingForPortfolioRequest">Information about the custom field setting.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddCustomFieldSettingForPortfolio200Response</returns>
        public async System.Threading.Tasks.Task<AddCustomFieldSettingForPortfolio200Response> AddCustomFieldSettingForPortfolioAsync(string portfolioGid, AddCustomFieldSettingForPortfolioRequest addCustomFieldSettingForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<AddCustomFieldSettingForPortfolio200Response> localVarResponse = await AddCustomFieldSettingForPortfolioWithHttpInfoAsync(portfolioGid, addCustomFieldSettingForPortfolioRequest, optPretty, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a custom field to a portfolio Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addCustomFieldSettingForPortfolioRequest">Information about the custom field setting.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddCustomFieldSettingForPortfolio200Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<AddCustomFieldSettingForPortfolio200Response>> AddCustomFieldSettingForPortfolioWithHttpInfoAsync(string portfolioGid, AddCustomFieldSettingForPortfolioRequest addCustomFieldSettingForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->AddCustomFieldSettingForPortfolio");
            }

            // verify the required parameter 'addCustomFieldSettingForPortfolioRequest' is set
            if (addCustomFieldSettingForPortfolioRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'addCustomFieldSettingForPortfolioRequest' when calling PortfoliosApi->AddCustomFieldSettingForPortfolio");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            localVarRequestOptions.Data = addCustomFieldSettingForPortfolioRequest;

            localVarRequestOptions.Operation = "PortfoliosApi.AddCustomFieldSettingForPortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddCustomFieldSettingForPortfolio200Response>("/portfolios/{portfolio_gid}/addCustomFieldSetting", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCustomFieldSettingForPortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a portfolio item Add an item to a portfolio. Returns an empty data block.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addItemForPortfolioRequest">Information about the item being inserted.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteAttachment200Response</returns>
        public DeleteAttachment200Response AddItemForPortfolio(string portfolioGid, AddItemForPortfolioRequest addItemForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<DeleteAttachment200Response> localVarResponse = AddItemForPortfolioWithHttpInfo(portfolioGid, addItemForPortfolioRequest, optPretty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a portfolio item Add an item to a portfolio. Returns an empty data block.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addItemForPortfolioRequest">Information about the item being inserted.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteAttachment200Response</returns>
        public AsanaNet.Client.ApiResponse<DeleteAttachment200Response> AddItemForPortfolioWithHttpInfo(string portfolioGid, AddItemForPortfolioRequest addItemForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->AddItemForPortfolio");
            }

            // verify the required parameter 'addItemForPortfolioRequest' is set
            if (addItemForPortfolioRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'addItemForPortfolioRequest' when calling PortfoliosApi->AddItemForPortfolio");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            localVarRequestOptions.Data = addItemForPortfolioRequest;

            localVarRequestOptions.Operation = "PortfoliosApi.AddItemForPortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DeleteAttachment200Response>("/portfolios/{portfolio_gid}/addItem", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddItemForPortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a portfolio item Add an item to a portfolio. Returns an empty data block.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addItemForPortfolioRequest">Information about the item being inserted.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAttachment200Response</returns>
        public async System.Threading.Tasks.Task<DeleteAttachment200Response> AddItemForPortfolioAsync(string portfolioGid, AddItemForPortfolioRequest addItemForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<DeleteAttachment200Response> localVarResponse = await AddItemForPortfolioWithHttpInfoAsync(portfolioGid, addItemForPortfolioRequest, optPretty, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a portfolio item Add an item to a portfolio. Returns an empty data block.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addItemForPortfolioRequest">Information about the item being inserted.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAttachment200Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<DeleteAttachment200Response>> AddItemForPortfolioWithHttpInfoAsync(string portfolioGid, AddItemForPortfolioRequest addItemForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->AddItemForPortfolio");
            }

            // verify the required parameter 'addItemForPortfolioRequest' is set
            if (addItemForPortfolioRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'addItemForPortfolioRequest' when calling PortfoliosApi->AddItemForPortfolio");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            localVarRequestOptions.Data = addItemForPortfolioRequest;

            localVarRequestOptions.Operation = "PortfoliosApi.AddItemForPortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteAttachment200Response>("/portfolios/{portfolio_gid}/addItem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddItemForPortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add users to a portfolio Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addMembersForPortfolioRequest">Information about the members being added.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatePortfolio201Response</returns>
        public CreatePortfolio201Response AddMembersForPortfolio(string portfolioGid, AddMembersForPortfolioRequest addMembersForPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<CreatePortfolio201Response> localVarResponse = AddMembersForPortfolioWithHttpInfo(portfolioGid, addMembersForPortfolioRequest, optPretty, optFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add users to a portfolio Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addMembersForPortfolioRequest">Information about the members being added.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatePortfolio201Response</returns>
        public AsanaNet.Client.ApiResponse<CreatePortfolio201Response> AddMembersForPortfolioWithHttpInfo(string portfolioGid, AddMembersForPortfolioRequest addMembersForPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->AddMembersForPortfolio");
            }

            // verify the required parameter 'addMembersForPortfolioRequest' is set
            if (addMembersForPortfolioRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'addMembersForPortfolioRequest' when calling PortfoliosApi->AddMembersForPortfolio");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }
            localVarRequestOptions.Data = addMembersForPortfolioRequest;

            localVarRequestOptions.Operation = "PortfoliosApi.AddMembersForPortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreatePortfolio201Response>("/portfolios/{portfolio_gid}/addMembers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMembersForPortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add users to a portfolio Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addMembersForPortfolioRequest">Information about the members being added.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePortfolio201Response</returns>
        public async System.Threading.Tasks.Task<CreatePortfolio201Response> AddMembersForPortfolioAsync(string portfolioGid, AddMembersForPortfolioRequest addMembersForPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<CreatePortfolio201Response> localVarResponse = await AddMembersForPortfolioWithHttpInfoAsync(portfolioGid, addMembersForPortfolioRequest, optPretty, optFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add users to a portfolio Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="addMembersForPortfolioRequest">Information about the members being added.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePortfolio201Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<CreatePortfolio201Response>> AddMembersForPortfolioWithHttpInfoAsync(string portfolioGid, AddMembersForPortfolioRequest addMembersForPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->AddMembersForPortfolio");
            }

            // verify the required parameter 'addMembersForPortfolioRequest' is set
            if (addMembersForPortfolioRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'addMembersForPortfolioRequest' when calling PortfoliosApi->AddMembersForPortfolio");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }
            localVarRequestOptions.Data = addMembersForPortfolioRequest;

            localVarRequestOptions.Operation = "PortfoliosApi.AddMembersForPortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreatePortfolio201Response>("/portfolios/{portfolio_gid}/addMembers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMembersForPortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a portfolio Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPortfolioRequest">The portfolio to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatePortfolio201Response</returns>
        public CreatePortfolio201Response CreatePortfolio(CreatePortfolioRequest createPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<CreatePortfolio201Response> localVarResponse = CreatePortfolioWithHttpInfo(createPortfolioRequest, optPretty, optFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a portfolio Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPortfolioRequest">The portfolio to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatePortfolio201Response</returns>
        public AsanaNet.Client.ApiResponse<CreatePortfolio201Response> CreatePortfolioWithHttpInfo(CreatePortfolioRequest createPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'createPortfolioRequest' is set
            if (createPortfolioRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'createPortfolioRequest' when calling PortfoliosApi->CreatePortfolio");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }
            localVarRequestOptions.Data = createPortfolioRequest;

            localVarRequestOptions.Operation = "PortfoliosApi.CreatePortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreatePortfolio201Response>("/portfolios", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a portfolio Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPortfolioRequest">The portfolio to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePortfolio201Response</returns>
        public async System.Threading.Tasks.Task<CreatePortfolio201Response> CreatePortfolioAsync(CreatePortfolioRequest createPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<CreatePortfolio201Response> localVarResponse = await CreatePortfolioWithHttpInfoAsync(createPortfolioRequest, optPretty, optFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a portfolio Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPortfolioRequest">The portfolio to create.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePortfolio201Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<CreatePortfolio201Response>> CreatePortfolioWithHttpInfoAsync(CreatePortfolioRequest createPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createPortfolioRequest' is set
            if (createPortfolioRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'createPortfolioRequest' when calling PortfoliosApi->CreatePortfolio");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }
            localVarRequestOptions.Data = createPortfolioRequest;

            localVarRequestOptions.Operation = "PortfoliosApi.CreatePortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreatePortfolio201Response>("/portfolios", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a portfolio An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteAttachment200Response</returns>
        public DeleteAttachment200Response DeletePortfolio(string portfolioGid, bool? optPretty = default(bool?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<DeleteAttachment200Response> localVarResponse = DeletePortfolioWithHttpInfo(portfolioGid, optPretty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a portfolio An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteAttachment200Response</returns>
        public AsanaNet.Client.ApiResponse<DeleteAttachment200Response> DeletePortfolioWithHttpInfo(string portfolioGid, bool? optPretty = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->DeletePortfolio");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }

            localVarRequestOptions.Operation = "PortfoliosApi.DeletePortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteAttachment200Response>("/portfolios/{portfolio_gid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a portfolio An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAttachment200Response</returns>
        public async System.Threading.Tasks.Task<DeleteAttachment200Response> DeletePortfolioAsync(string portfolioGid, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<DeleteAttachment200Response> localVarResponse = await DeletePortfolioWithHttpInfoAsync(portfolioGid, optPretty, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a portfolio An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAttachment200Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<DeleteAttachment200Response>> DeletePortfolioWithHttpInfoAsync(string portfolioGid, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->DeletePortfolio");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }

            localVarRequestOptions.Operation = "PortfoliosApi.DeletePortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteAttachment200Response>("/portfolios/{portfolio_gid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get portfolio items Get a list of the items in compact form in a portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetItemsForPortfolio200Response</returns>
        public GetItemsForPortfolio200Response GetItemsForPortfolio(string portfolioGid, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<GetItemsForPortfolio200Response> localVarResponse = GetItemsForPortfolioWithHttpInfo(portfolioGid, optPretty, limit, offset, optFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get portfolio items Get a list of the items in compact form in a portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetItemsForPortfolio200Response</returns>
        public AsanaNet.Client.ApiResponse<GetItemsForPortfolio200Response> GetItemsForPortfolioWithHttpInfo(string portfolioGid, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->GetItemsForPortfolio");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }

            localVarRequestOptions.Operation = "PortfoliosApi.GetItemsForPortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetItemsForPortfolio200Response>("/portfolios/{portfolio_gid}/items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItemsForPortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get portfolio items Get a list of the items in compact form in a portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetItemsForPortfolio200Response</returns>
        public async System.Threading.Tasks.Task<GetItemsForPortfolio200Response> GetItemsForPortfolioAsync(string portfolioGid, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<GetItemsForPortfolio200Response> localVarResponse = await GetItemsForPortfolioWithHttpInfoAsync(portfolioGid, optPretty, limit, offset, optFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get portfolio items Get a list of the items in compact form in a portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetItemsForPortfolio200Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<GetItemsForPortfolio200Response>> GetItemsForPortfolioWithHttpInfoAsync(string portfolioGid, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->GetItemsForPortfolio");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }

            localVarRequestOptions.Operation = "PortfoliosApi.GetItemsForPortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetItemsForPortfolio200Response>("/portfolios/{portfolio_gid}/items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItemsForPortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a portfolio Returns the complete portfolio record for a single portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatePortfolio201Response</returns>
        public CreatePortfolio201Response GetPortfolio(string portfolioGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<CreatePortfolio201Response> localVarResponse = GetPortfolioWithHttpInfo(portfolioGid, optPretty, optFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a portfolio Returns the complete portfolio record for a single portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatePortfolio201Response</returns>
        public AsanaNet.Client.ApiResponse<CreatePortfolio201Response> GetPortfolioWithHttpInfo(string portfolioGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->GetPortfolio");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }

            localVarRequestOptions.Operation = "PortfoliosApi.GetPortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CreatePortfolio201Response>("/portfolios/{portfolio_gid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a portfolio Returns the complete portfolio record for a single portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePortfolio201Response</returns>
        public async System.Threading.Tasks.Task<CreatePortfolio201Response> GetPortfolioAsync(string portfolioGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<CreatePortfolio201Response> localVarResponse = await GetPortfolioWithHttpInfoAsync(portfolioGid, optPretty, optFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a portfolio Returns the complete portfolio record for a single portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePortfolio201Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<CreatePortfolio201Response>> GetPortfolioWithHttpInfoAsync(string portfolioGid, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->GetPortfolio");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }

            localVarRequestOptions.Operation = "PortfoliosApi.GetPortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CreatePortfolio201Response>("/portfolios/{portfolio_gid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get multiple portfolios Returns a list of the portfolios in compact representation that are owned by the current API user.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace or organization to filter portfolios on.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="owner">The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own, unless the request is made from a Service Account. In the case of a Service Account, if this parameter is specified, then all portfolios owned by this parameter are returned. Otherwise, all portfolios across the workspace are returned. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPortfolios200Response</returns>
        public GetPortfolios200Response GetPortfolios(string workspace, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? owner = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<GetPortfolios200Response> localVarResponse = GetPortfoliosWithHttpInfo(workspace, optPretty, limit, offset, owner, optFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple portfolios Returns a list of the portfolios in compact representation that are owned by the current API user.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace or organization to filter portfolios on.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="owner">The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own, unless the request is made from a Service Account. In the case of a Service Account, if this parameter is specified, then all portfolios owned by this parameter are returned. Otherwise, all portfolios across the workspace are returned. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPortfolios200Response</returns>
        public AsanaNet.Client.ApiResponse<GetPortfolios200Response> GetPortfoliosWithHttpInfo(string workspace, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? owner = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'workspace' is set
            if (workspace == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'workspace' when calling PortfoliosApi->GetPortfolios");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "workspace", workspace));
            if (owner != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "owner", owner));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }

            localVarRequestOptions.Operation = "PortfoliosApi.GetPortfolios";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPortfolios200Response>("/portfolios", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPortfolios", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get multiple portfolios Returns a list of the portfolios in compact representation that are owned by the current API user.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace or organization to filter portfolios on.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="owner">The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own, unless the request is made from a Service Account. In the case of a Service Account, if this parameter is specified, then all portfolios owned by this parameter are returned. Otherwise, all portfolios across the workspace are returned. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPortfolios200Response</returns>
        public async System.Threading.Tasks.Task<GetPortfolios200Response> GetPortfoliosAsync(string workspace, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? owner = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<GetPortfolios200Response> localVarResponse = await GetPortfoliosWithHttpInfoAsync(workspace, optPretty, limit, offset, owner, optFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple portfolios Returns a list of the portfolios in compact representation that are owned by the current API user.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The workspace or organization to filter portfolios on.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="limit">Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)</param>
        /// <param name="offset">Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)</param>
        /// <param name="owner">The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own, unless the request is made from a Service Account. In the case of a Service Account, if this parameter is specified, then all portfolios owned by this parameter are returned. Otherwise, all portfolios across the workspace are returned. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPortfolios200Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<GetPortfolios200Response>> GetPortfoliosWithHttpInfoAsync(string workspace, bool? optPretty = default(bool?), int? limit = default(int?), string? offset = default(string?), string? owner = default(string?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workspace' is set
            if (workspace == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'workspace' when calling PortfoliosApi->GetPortfolios");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "workspace", workspace));
            if (owner != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "owner", owner));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }

            localVarRequestOptions.Operation = "PortfoliosApi.GetPortfolios";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPortfolios200Response>("/portfolios", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPortfolios", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a custom field from a portfolio Removes a custom field setting from a portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeCustomFieldSettingForPortfolioRequest">Information about the custom field setting being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteAttachment200Response</returns>
        public DeleteAttachment200Response RemoveCustomFieldSettingForPortfolio(string portfolioGid, RemoveCustomFieldSettingForPortfolioRequest removeCustomFieldSettingForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<DeleteAttachment200Response> localVarResponse = RemoveCustomFieldSettingForPortfolioWithHttpInfo(portfolioGid, removeCustomFieldSettingForPortfolioRequest, optPretty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a custom field from a portfolio Removes a custom field setting from a portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeCustomFieldSettingForPortfolioRequest">Information about the custom field setting being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteAttachment200Response</returns>
        public AsanaNet.Client.ApiResponse<DeleteAttachment200Response> RemoveCustomFieldSettingForPortfolioWithHttpInfo(string portfolioGid, RemoveCustomFieldSettingForPortfolioRequest removeCustomFieldSettingForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->RemoveCustomFieldSettingForPortfolio");
            }

            // verify the required parameter 'removeCustomFieldSettingForPortfolioRequest' is set
            if (removeCustomFieldSettingForPortfolioRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'removeCustomFieldSettingForPortfolioRequest' when calling PortfoliosApi->RemoveCustomFieldSettingForPortfolio");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            localVarRequestOptions.Data = removeCustomFieldSettingForPortfolioRequest;

            localVarRequestOptions.Operation = "PortfoliosApi.RemoveCustomFieldSettingForPortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DeleteAttachment200Response>("/portfolios/{portfolio_gid}/removeCustomFieldSetting", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveCustomFieldSettingForPortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a custom field from a portfolio Removes a custom field setting from a portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeCustomFieldSettingForPortfolioRequest">Information about the custom field setting being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAttachment200Response</returns>
        public async System.Threading.Tasks.Task<DeleteAttachment200Response> RemoveCustomFieldSettingForPortfolioAsync(string portfolioGid, RemoveCustomFieldSettingForPortfolioRequest removeCustomFieldSettingForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<DeleteAttachment200Response> localVarResponse = await RemoveCustomFieldSettingForPortfolioWithHttpInfoAsync(portfolioGid, removeCustomFieldSettingForPortfolioRequest, optPretty, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a custom field from a portfolio Removes a custom field setting from a portfolio.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeCustomFieldSettingForPortfolioRequest">Information about the custom field setting being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAttachment200Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<DeleteAttachment200Response>> RemoveCustomFieldSettingForPortfolioWithHttpInfoAsync(string portfolioGid, RemoveCustomFieldSettingForPortfolioRequest removeCustomFieldSettingForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->RemoveCustomFieldSettingForPortfolio");
            }

            // verify the required parameter 'removeCustomFieldSettingForPortfolioRequest' is set
            if (removeCustomFieldSettingForPortfolioRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'removeCustomFieldSettingForPortfolioRequest' when calling PortfoliosApi->RemoveCustomFieldSettingForPortfolio");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            localVarRequestOptions.Data = removeCustomFieldSettingForPortfolioRequest;

            localVarRequestOptions.Operation = "PortfoliosApi.RemoveCustomFieldSettingForPortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteAttachment200Response>("/portfolios/{portfolio_gid}/removeCustomFieldSetting", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveCustomFieldSettingForPortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a portfolio item Remove an item from a portfolio. Returns an empty data block.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeItemForPortfolioRequest">Information about the item being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteAttachment200Response</returns>
        public DeleteAttachment200Response RemoveItemForPortfolio(string portfolioGid, RemoveItemForPortfolioRequest removeItemForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<DeleteAttachment200Response> localVarResponse = RemoveItemForPortfolioWithHttpInfo(portfolioGid, removeItemForPortfolioRequest, optPretty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a portfolio item Remove an item from a portfolio. Returns an empty data block.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeItemForPortfolioRequest">Information about the item being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteAttachment200Response</returns>
        public AsanaNet.Client.ApiResponse<DeleteAttachment200Response> RemoveItemForPortfolioWithHttpInfo(string portfolioGid, RemoveItemForPortfolioRequest removeItemForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->RemoveItemForPortfolio");
            }

            // verify the required parameter 'removeItemForPortfolioRequest' is set
            if (removeItemForPortfolioRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'removeItemForPortfolioRequest' when calling PortfoliosApi->RemoveItemForPortfolio");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            localVarRequestOptions.Data = removeItemForPortfolioRequest;

            localVarRequestOptions.Operation = "PortfoliosApi.RemoveItemForPortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DeleteAttachment200Response>("/portfolios/{portfolio_gid}/removeItem", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveItemForPortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a portfolio item Remove an item from a portfolio. Returns an empty data block.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeItemForPortfolioRequest">Information about the item being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteAttachment200Response</returns>
        public async System.Threading.Tasks.Task<DeleteAttachment200Response> RemoveItemForPortfolioAsync(string portfolioGid, RemoveItemForPortfolioRequest removeItemForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<DeleteAttachment200Response> localVarResponse = await RemoveItemForPortfolioWithHttpInfoAsync(portfolioGid, removeItemForPortfolioRequest, optPretty, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a portfolio item Remove an item from a portfolio. Returns an empty data block.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeItemForPortfolioRequest">Information about the item being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteAttachment200Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<DeleteAttachment200Response>> RemoveItemForPortfolioWithHttpInfoAsync(string portfolioGid, RemoveItemForPortfolioRequest removeItemForPortfolioRequest, bool? optPretty = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->RemoveItemForPortfolio");
            }

            // verify the required parameter 'removeItemForPortfolioRequest' is set
            if (removeItemForPortfolioRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'removeItemForPortfolioRequest' when calling PortfoliosApi->RemoveItemForPortfolio");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            localVarRequestOptions.Data = removeItemForPortfolioRequest;

            localVarRequestOptions.Operation = "PortfoliosApi.RemoveItemForPortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteAttachment200Response>("/portfolios/{portfolio_gid}/removeItem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveItemForPortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove users from a portfolio Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeMembersForPortfolioRequest">Information about the members being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatePortfolio201Response</returns>
        public CreatePortfolio201Response RemoveMembersForPortfolio(string portfolioGid, RemoveMembersForPortfolioRequest removeMembersForPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<CreatePortfolio201Response> localVarResponse = RemoveMembersForPortfolioWithHttpInfo(portfolioGid, removeMembersForPortfolioRequest, optPretty, optFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove users from a portfolio Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeMembersForPortfolioRequest">Information about the members being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatePortfolio201Response</returns>
        public AsanaNet.Client.ApiResponse<CreatePortfolio201Response> RemoveMembersForPortfolioWithHttpInfo(string portfolioGid, RemoveMembersForPortfolioRequest removeMembersForPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->RemoveMembersForPortfolio");
            }

            // verify the required parameter 'removeMembersForPortfolioRequest' is set
            if (removeMembersForPortfolioRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'removeMembersForPortfolioRequest' when calling PortfoliosApi->RemoveMembersForPortfolio");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }
            localVarRequestOptions.Data = removeMembersForPortfolioRequest;

            localVarRequestOptions.Operation = "PortfoliosApi.RemoveMembersForPortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreatePortfolio201Response>("/portfolios/{portfolio_gid}/removeMembers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveMembersForPortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove users from a portfolio Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeMembersForPortfolioRequest">Information about the members being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePortfolio201Response</returns>
        public async System.Threading.Tasks.Task<CreatePortfolio201Response> RemoveMembersForPortfolioAsync(string portfolioGid, RemoveMembersForPortfolioRequest removeMembersForPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<CreatePortfolio201Response> localVarResponse = await RemoveMembersForPortfolioWithHttpInfoAsync(portfolioGid, removeMembersForPortfolioRequest, optPretty, optFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove users from a portfolio Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="removeMembersForPortfolioRequest">Information about the members being removed.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePortfolio201Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<CreatePortfolio201Response>> RemoveMembersForPortfolioWithHttpInfoAsync(string portfolioGid, RemoveMembersForPortfolioRequest removeMembersForPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->RemoveMembersForPortfolio");
            }

            // verify the required parameter 'removeMembersForPortfolioRequest' is set
            if (removeMembersForPortfolioRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'removeMembersForPortfolioRequest' when calling PortfoliosApi->RemoveMembersForPortfolio");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }
            localVarRequestOptions.Data = removeMembersForPortfolioRequest;

            localVarRequestOptions.Operation = "PortfoliosApi.RemoveMembersForPortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreatePortfolio201Response>("/portfolios/{portfolio_gid}/removeMembers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveMembersForPortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a portfolio An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="createPortfolioRequest">The updated fields for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatePortfolio201Response</returns>
        public CreatePortfolio201Response UpdatePortfolio(string portfolioGid, CreatePortfolioRequest createPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            AsanaNet.Client.ApiResponse<CreatePortfolio201Response> localVarResponse = UpdatePortfolioWithHttpInfo(portfolioGid, createPortfolioRequest, optPretty, optFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a portfolio An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="createPortfolioRequest">The updated fields for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatePortfolio201Response</returns>
        public AsanaNet.Client.ApiResponse<CreatePortfolio201Response> UpdatePortfolioWithHttpInfo(string portfolioGid, CreatePortfolioRequest createPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->UpdatePortfolio");
            }

            // verify the required parameter 'createPortfolioRequest' is set
            if (createPortfolioRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'createPortfolioRequest' when calling PortfoliosApi->UpdatePortfolio");
            }

            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }
            localVarRequestOptions.Data = createPortfolioRequest;

            localVarRequestOptions.Operation = "PortfoliosApi.UpdatePortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CreatePortfolio201Response>("/portfolios/{portfolio_gid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a portfolio An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="createPortfolioRequest">The updated fields for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePortfolio201Response</returns>
        public async System.Threading.Tasks.Task<CreatePortfolio201Response> UpdatePortfolioAsync(string portfolioGid, CreatePortfolioRequest createPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AsanaNet.Client.ApiResponse<CreatePortfolio201Response> localVarResponse = await UpdatePortfolioWithHttpInfoAsync(portfolioGid, createPortfolioRequest, optPretty, optFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a portfolio An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
        /// </summary>
        /// <exception cref="AsanaNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGid">Globally unique identifier for the portfolio.</param>
        /// <param name="createPortfolioRequest">The updated fields for the portfolio.</param>
        /// <param name="optPretty">Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)</param>
        /// <param name="optFields">This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePortfolio201Response)</returns>
        public async System.Threading.Tasks.Task<AsanaNet.Client.ApiResponse<CreatePortfolio201Response>> UpdatePortfolioWithHttpInfoAsync(string portfolioGid, CreatePortfolioRequest createPortfolioRequest, bool? optPretty = default(bool?), List<string>? optFields = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'portfolioGid' is set
            if (portfolioGid == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'portfolioGid' when calling PortfoliosApi->UpdatePortfolio");
            }

            // verify the required parameter 'createPortfolioRequest' is set
            if (createPortfolioRequest == null)
            {
                throw new AsanaNet.Client.ApiException(400, "Missing required parameter 'createPortfolioRequest' when calling PortfoliosApi->UpdatePortfolio");
            }


            AsanaNet.Client.RequestOptions localVarRequestOptions = new AsanaNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AsanaNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = AsanaNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portfolio_gid", AsanaNet.Client.ClientUtils.ParameterToString(portfolioGid)); // path parameter
            if (optPretty != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("", "opt_pretty", optPretty));
            }
            if (optFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(AsanaNet.Client.ClientUtils.ParameterToMultiMap("csv", "opt_fields", optFields));
            }
            localVarRequestOptions.Data = createPortfolioRequest;

            localVarRequestOptions.Operation = "PortfoliosApi.UpdatePortfolio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (personalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CreatePortfolio201Response>("/portfolios/{portfolio_gid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePortfolio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
